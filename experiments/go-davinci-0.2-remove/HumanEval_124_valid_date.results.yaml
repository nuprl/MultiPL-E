language: go_test.go
name: HumanEval_124_valid_date
results:
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    _, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day,\
    \ &year)\n    if err != nil {\n        return false\n    }\n    if month < 1 ||\
    \ month > 12 {\n        return false\n    }\n    if day < 1 {\n        return\
    \ false\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day > 30 {\n            return false\n        }\n    } else\
    \ {\n        if day > 31 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    _, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day,\
    \ &year)\n    if err != nil {\n        return false\n    }\n    if month < 1 ||\
    \ month > 12 {\n        return false\n    }\n    if day < 1 {\n        return\
    \ false\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day > 30 {\n            return false\n        }\n    } else\
    \ {\n        if day > 31 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if\
    \ len(date) != 10 {\n        return false\n    }\n    if date[2] != '-' || date[5]\
    \ != '-' {\n        return false\n    }\n    month := date[0:2]\n    day := date[3:5]\n\
    \    year := date[6:10]\n    if month[0] == '0' {\n        month = month[1:2]\n\
    \    }\n    if day[0] == '0' {\n        day = day[1:2]\n    }\n    if year[0]\
    \ == '0' {\n        year = year[1:4]\n    }\n    if len(month) > 2 || len(day)\
    \ > 2 || len(year) > 4 {\n        return false\n    }\n    if len(month) == 0\
    \ || len(day) == 0 || len(year) == 0 {\n        return false\n    }\n    if len(month)\
    \ == 1 {\n        month = \"0\" + month\n    }\n    if len(day) == 1 {\n     \
    \   day = \"0\" + day\n    }\n    if len(year) == 1 {\n        year = \"000\"\
    \ + year\n    }\n    if len(year) == 2 {\n        year = \"00\" + year\n    }\n\
    \    if len(year) == 3 {\n        year = \"0\" + year\n    }\n    if month ==\
    \ \"02\" {\n        if day == \"29\" {\n            if year == \"2000\" || year\
    \ == \"2004\" || year == \"2008\" || year == \"2012\" || year == \"2016\" {\n\
    \                return true\n            }\n            return false\n      \
    \  }\n        if day == \"30\" || day == \"31\" {\n            return false\n\
    \        }\n    }\n    if month == \"01\" || month == \"03\" || month == \"05\"\
    \ || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\"\
    \ {\n        if day == \"31\" {\n            return true\n        }\n        if\
    \ day == \"32\" {\n            return false\n        }\n    }\n    if month ==\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp__9hhg2k_test.go:78:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    _, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day,\
    \ &year)\n    if err != nil {\n        return false\n    }\n    if month < 1 ||\
    \ month > 12 {\n        return false\n    }\n    if day < 1 {\n        return\
    \ false\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day > 30 {\n            return false\n        }\n    } else\
    \ {\n        if day > 31 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    var month, day, year int\n    _, err := fmt.Sscanf(date,\
    \ \"%d-%d-%d\", &month, &day, &year)\n    if err != nil {\n        return false\n\
    \    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if\
    \ day < 1 {\n        return false\n    }\n    if month == 2 {\n        if day\
    \ > 29 {\n            return false\n        }\n    } else if month == 4 || month\
    \ == 6 || month == 9 || month == 11 {\n        if day > 30 {\n            return\
    \ false\n        }\n    } else {\n        if day > 31 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    _, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day,\
    \ &year)\n    if err != nil {\n        return false\n    }\n    if month < 1 ||\
    \ month > 12 {\n        return false\n    }\n    if day < 1 {\n        return\
    \ false\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day > 30 {\n            return false\n        }\n    } else\
    \ {\n        if day > 31 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    switch month {\n    case 1, 3, 5, 7, 8,\
    \ 10, 12:\n        if day > 31 {\n            return false\n        }\n    case\
    \ 4, 6, 9, 11:\n        if day > 30 {\n            return false\n        }\n \
    \   case 2:\n        if day > 29 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if\
    \ len(date) != 10 {\n        return false\n    }\n    if date[2] != '-' || date[5]\
    \ != '-' {\n        return false\n    }\n    month := date[0:2]\n    day := date[3:5]\n\
    \    year := date[6:10]\n    if len(month) != 2 || len(day) != 2 || len(year)\
    \ != 4 {\n        return false\n    }\n    if month[0] < '0' || month[0] > '9'\
    \ || month[1] < '0' || month[1] > '9' {\n        return false\n    }\n    if day[0]\
    \ < '0' || day[0] > '9' || day[1] < '0' || day[1] > '9' {\n        return false\n\
    \    }\n    if year[0] < '0' || year[0] > '9' || year[1] < '0' || year[1] > '9'\
    \ || year[2] < '0' || year[2] > '9' || year[3] < '0' || year[3] > '9' {\n    \
    \    return false\n    }\n    month_int := int(month[0] - '0') * 10 + int(month[1]\
    \ - '0')\n    day_int := int(day[0] - '0') * 10 + int(day[1] - '0')\n    year_int\
    \ := int(year[0] - '0') * 1000 + int(year[1] - '0') * 100 + int(year[2] - '0')\
    \ * 10 + int(year[3] - '0')\n    if month_int < 1 || month_int > 12 {\n      \
    \  return false\n    }\n    if month_int == 2 {\n        if year_int % 4 == 0\
    \ {\n            if day_int < 1 || day_int > 29 {\n                return false\n\
    \            }\n        } else {\n            if day_int < 1 || day_int > 28 {\n\
    \                return false\n            }\n        }\n    } else if month_int\
    \ == 1\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpln5nv65h_test.go:57:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month > 12 || month < 1 {\n        return false\n    }\n    if day > 31\
    \ || day < 1 {\n        return false\n    }\n    if month == 2 {\n        if day\
    \ > 29 {\n            return false\n        }\n    } else if month == 4 || month\
    \ == 6 || month == 9 || month == 11 {\n        if day > 30 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    _, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day,\
    \ &year)\n    if err != nil {\n        return false\n    }\n    if month < 1 ||\
    \ month > 12 {\n        return false\n    }\n    if day < 1 {\n        return\
    \ false\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day > 30 {\n            return false\n        }\n    } else\
    \ {\n        if day > 31 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ day, month, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmpdf4u0zg0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmpdf4u0zg0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    _, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day,\
    \ &year)\n    if err != nil {\n        return false\n    }\n    if month < 1 ||\
    \ month > 12 {\n        return false\n    }\n    if day < 1 {\n        return\
    \ false\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day > 30 {\n            return false\n        }\n    } else\
    \ {\n        if day > 31 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    var month, day, year int\n    var err error\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    if _, err = fmt.Sscanf(date, \"%d-%d-%d\"\
    , &month, &day, &year); err != nil {\n        return false\n    }\n    if month\
    \ < 1 || month > 12 {\n        return false\n    }\n    if day < 1 {\n       \
    \ return false\n    }\n    if month == 2 {\n        if day > 29 {\n          \
    \  return false\n        }\n    } else if month == 4 || month == 6 || month ==\
    \ 9 || month == 11 {\n        if day > 30 {\n            return false\n      \
    \  }\n    } else {\n        if day > 31 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    _, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day,\
    \ &year)\n    if err != nil {\n        return false\n    }\n    if month < 1 ||\
    \ month > 12 {\n        return false\n    }\n    if day < 1 {\n        return\
    \ false\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day > 30 {\n            return false\n        }\n    } else\
    \ {\n        if day > 31 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmpdf4u0zg0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmpdf4u0zg0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    var month, day, year int\n    _, err := fmt.Sscanf(date,\
    \ \"%d-%d-%d\", &month, &day, &year)\n    if err != nil {\n        return false\n\
    \    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if\
    \ day < 1 {\n        return false\n    }\n    if month == 2 {\n        if day\
    \ > 29 {\n            return false\n        }\n    } else if month == 4 || month\
    \ == 6 || month == 9 || month == 11 {\n        if day > 30 {\n            return\
    \ false\n        }\n    } else {\n        if day > 31 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    _, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day,\
    \ &year)\n    if err != nil {\n        return false\n    }\n    if month < 1 ||\
    \ month > 12 {\n        return false\n    }\n    if day < 1 {\n        return\
    \ false\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day > 30 {\n            return false\n        }\n    } else\
    \ {\n        if day > 31 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmpdf4u0zg0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmpdf4u0zg0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if\
    \ len(date) != 10 {\n        return false\n    }\n    if date[2] != '-' || date[5]\
    \ != '-' {\n        return false\n    }\n    month := date[0:2]\n    day := date[3:5]\n\
    \    year := date[6:10]\n    if month[0] == '0' {\n        month = month[1:2]\n\
    \    }\n    if day[0] == '0' {\n        day = day[1:2]\n    }\n    if year[0]\
    \ == '0' {\n        year = year[1:4]\n    }\n    if len(month) == 0 || len(day)\
    \ == 0 || len(year) == 0 {\n        return false\n    }\n    if len(month) > 2\
    \ || len(day) > 2 || len(year) > 4 {\n        return false\n    }\n    if len(month)\
    \ == 1 || len(day) == 1 || len(year) == 1 {\n        return false\n    }\n   \
    \ if len(month) == 2 && month[0] == '0' {\n        return false\n    }\n    if\
    \ len(day) == 2 && day[0] == '0' {\n        return false\n    }\n    if len(year)\
    \ == 2 && year[0] == '0' {\n        return false\n    }\n    if len(year) == 3\
    \ && year[0] == '0' {\n        return false\n    }\n    if len(year) == 4 && year[0]\
    \ == '0' {\n        return false\n    }\n    if len(year) == 4 && year[0] == '0'\
    \ && year[1] == '0' {\n        return false\n    }\n    if len(year) == 4 && year[0]\
    \ == '0' && year[1] == '0' && year[2] == '0' {\n        return false\n    }\n\
    \    if len(year) == 4 && year[0] == '0' && year[1] == '0' && year[2] == '0' &&\
    \ year[3] == '0'\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj32mnzf6_test.go:68:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    _, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day,\
    \ &year)\n    if err != nil {\n        return false\n    }\n    if month < 1 ||\
    \ month > 12 {\n        return false\n    }\n    if day < 1 {\n        return\
    \ false\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day > 30 {\n            return false\n        }\n    } else\
    \ {\n        if day > 31 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    _, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day,\
    \ &year)\n    if err != nil {\n        return false\n    }\n    if month < 1 ||\
    \ month > 12 {\n        return false\n    }\n    if day < 1 {\n        return\
    \ false\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day > 30 {\n            return false\n        }\n    } else\
    \ {\n        if day > 31 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    _, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day,\
    \ &year)\n    if err != nil {\n        return false\n    }\n    if month < 1 ||\
    \ month > 12 {\n        return false\n    }\n    if day < 1 {\n        return\
    \ false\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12 {\n        if day > 31 {\n        \
    \    return false\n        }\n    } else if month == 4 || month == 6 || month\
    \ == 9 || month == 11 {\n        if day > 30 {\n            return false\n   \
    \     }\n    } else if month == 2 {\n        if day > 29 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    switch month {\n    case 1, 3, 5, 7, 8,\
    \ 10, 12:\n        if day > 31 {\n            return false\n        }\n    case\
    \ 4, 6, 9, 11:\n        if day > 30 {\n            return false\n        }\n \
    \   case 2:\n        if day > 29 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) != 10 {\n        return false\n    }\n    if\
    \ date[2] != '-' || date[5] != '-' {\n        return false\n    }\n    month :=\
    \ date[0:2]\n    day := date[3:5]\n    year := date[6:10]\n    if month < \"01\"\
    \ || month > \"12\" {\n        return false\n    }\n    if day < \"01\" || day\
    \ > \"31\" {\n        return false\n    }\n    if year < \"1000\" || year > \"\
    9999\" {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp86hk3zxr_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    var month, day, year int\n    var err error\n    _, err\
    \ = fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if err != nil {\n\
    \        return false\n    }\n    if month < 1 || month > 12 {\n        return\
    \ false\n    }\n    if day < 1 {\n        return false\n    }\n    if month ==\
    \ 2 {\n        if day > 29 {\n            return false\n        }\n    } else\
    \ if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day >\
    \ 30 {\n            return false\n        }\n    } else {\n        if day > 31\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    switch month {\n    case 1, 3, 5, 7, 8,\
    \ 10, 12:\n        if day > 31 {\n            return false\n        }\n    case\
    \ 4, 6, 9, 11:\n        if day > 30 {\n            return false\n        }\n \
    \   case 2:\n        if day > 29 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if\
    \ len(date) != 10 {\n        return false\n    }\n    if date[2] != '-' || date[5]\
    \ != '-' {\n        return false\n    }\n    month := date[0:2]\n    day := date[3:5]\n\
    \    year := date[6:10]\n    if month < \"01\" || month > \"12\" {\n        return\
    \ false\n    }\n    if day < \"01\" || day > \"31\" {\n        return false\n\
    \    }\n    if year < \"0001\" || year > \"9999\" {\n        return false\n  \
    \  }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate :=\
    \ valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected:\
    \ true },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n    \
    \ { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"\
    06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected:\
    \ true },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n    \
    \ { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpy0isifkq_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmpdf4u0zg0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmpdf4u0zg0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) != 10 {\n        return false\n    }\n    if\
    \ date[2] != '-' || date[5] != '-' {\n        return false\n    }\n    month :=\
    \ date[0:2]\n    day := date[3:5]\n    year := date[6:10]\n    if month[0] ==\
    \ '0' {\n        month = month[1:2]\n    }\n    if day[0] == '0' {\n        day\
    \ = day[1:2]\n    }\n    if year[0] == '0' {\n        year = year[1:4]\n    }\n\
    \    if month == \"1\" || month == \"3\" || month == \"5\" || month == \"7\" ||\
    \ month == \"8\" || month == \"10\" || month == \"12\" {\n        if day < \"\
    1\" || day > \"31\" {\n            return false\n        }\n    } else if month\
    \ == \"4\" || month == \"6\" || month == \"9\" || month == \"11\" {\n        if\
    \ day < \"1\" || day > \"30\" {\n            return false\n        }\n    } else\
    \ if month == \"2\" {\n        if day < \"1\" || day > \"29\" {\n            return\
    \ false\n        }\n    } else {\n        return false\n    }\n    if month <\
    \ \"1\" || month > \"12\" {\n        return false\n    }\n    if year < \"1\"\
    \ || year > \"9999\" {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmplv73m4fw_test.go:86: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmplv73m4fw_test.go:86:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__8\
    \ (0.00s)\n        tmplv73m4fw_test.go:86: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__10 (0.00s)\n        tmplv73m4fw_test.go:86:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    var month, day, year int\n    _, err := fmt.Sscanf(date,\
    \ \"%d-%d-%d\", &month, &day, &year)\n    if err != nil {\n        return false\n\
    \    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if\
    \ day < 1 {\n        return false\n    }\n    if month == 2 {\n        if day\
    \ > 29 {\n            return false\n        }\n    } else if month == 4 || month\
    \ == 6 || month == 9 || month == 11 {\n        if day > 30 {\n            return\
    \ false\n        }\n    } else {\n        if day > 31 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 1 || month == 3 || month ==\
    \ 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day\
    \ > 31 {\n            return false\n        }\n    } else if month == 4 || month\
    \ == 6 || month == 9 || month == 11 {\n        if day > 30 {\n            return\
    \ false\n        }\n    } else if month == 2 {\n        if day > 29 {\n      \
    \      return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    _, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day,\
    \ &year)\n    if err != nil {\n        return false\n    }\n    if month < 1 ||\
    \ month > 12 {\n        return false\n    }\n    if day < 1 {\n        return\
    \ false\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day > 30 {\n            return false\n        }\n    } else\
    \ {\n        if day > 31 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if date == \"\" {\n        return false\n    }\n    var\
    \ month, day, year int\n    _, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day,\
    \ &year)\n    if err != nil {\n        return false\n    }\n    if month < 1 ||\
    \ month > 12 {\n        return false\n    }\n    if day < 1 {\n        return\
    \ false\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day > 30 {\n            return false\n        }\n    } else\
    \ {\n        if day > 31 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmpdf4u0zg0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmpdf4u0zg0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    _, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day,\
    \ &year)\n    if err != nil {\n        return false\n    }\n    if month < 1 ||\
    \ month > 12 {\n        return false\n    }\n    if day < 1 {\n        return\
    \ false\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day > 30 {\n            return false\n        }\n    } else\
    \ {\n        if day > 31 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    _, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day,\
    \ &year)\n    if err != nil {\n        return false\n    }\n    if month < 1 ||\
    \ month > 12 {\n        return false\n    }\n    if day < 1 {\n        return\
    \ false\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day > 30 {\n            return false\n        }\n    } else\
    \ {\n        if day > 31 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if month ==\
    \ 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n\
    \    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n     \
    \   if day < 1 || day > 30 {\n            return false\n        }\n    } else\
    \ {\n        if day < 1 || day > 31 {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ days, months, years int\n    fmt.Sscanf(date, \"%d-%d-%d\", &months, &days,\
    \ &years)\n    if months < 1 || months > 12 {\n        return false\n    }\n \
    \   if days < 1 {\n        return false\n    }\n    if months == 2 {\n       \
    \ if days > 29 {\n            return false\n        }\n    } else if months ==\
    \ 4 || months == 6 || months == 9 || months == 11 {\n        if days > 30 {\n\
    \            return false\n        }\n    } else {\n        if days > 31 {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    _, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day,\
    \ &year)\n    if err != nil {\n        return false\n    }\n    if month < 1 ||\
    \ month > 12 {\n        return false\n    }\n    if day < 1 {\n        return\
    \ false\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day > 30 {\n            return false\n        }\n    } else\
    \ {\n        if day > 31 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmpdf4u0zg0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmpdf4u0zg0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    switch month {\n    case 1, 3, 5, 7, 8,\
    \ 10, 12:\n        if day > 31 {\n            return false\n        }\n    case\
    \ 4, 6, 9, 11:\n        if day > 30 {\n            return false\n        }\n \
    \   case 2:\n        if day > 29 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmpdf4u0zg0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmpdf4u0zg0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ months = map[string]int{\n        \"01\": 31,\n        \"02\": 28,\n       \
    \ \"03\": 31,\n        \"04\": 30,\n        \"05\": 31,\n        \"06\": 30,\n\
    \        \"07\": 31,\n        \"08\": 31,\n        \"09\": 30,\n        \"10\"\
    : 31,\n        \"11\": 30,\n        \"12\": 31,\n    }\n    var month, day, year\
    \ string\n    var i int\n    for i = 0; i < len(date); i++ {\n        if date[i]\
    \ == '-' {\n            break\n        }\n        month += string(date[i])\n \
    \   }\n    for i = i + 1; i < len(date); i++ {\n        if date[i] == '-' {\n\
    \            break\n        }\n        day += string(date[i])\n    }\n    for\
    \ i = i + 1; i < len(date); i++ {\n        year += string(date[i])\n    }\n  \
    \  if _, ok := months[month]; !ok {\n        return false\n    }\n    if len(day)\
    \ == 0 || len(year) == 0 {\n        return false\n    }\n    if len(day) > 2 ||\
    \ len(year) > 4 {\n        return false\n    }\n    if months[month] < int(day[0]-'0')*10\
    \ + int(day[1]-'0') {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.valid_date({0x51ef08, 0x9})\n\t/tmp/tmpz79lq4gx_test.go:59\
    \ +0x4d3\ncommand-line-arguments_test.TestValid_Date(0x0?)\n\t/tmp/tmpz79lq4gx_test.go:74\
    \ +0x8a\ntesting.tRunner(0xc0001a01a0, 0x528fe0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if month ==\
    \ 2 {\n        if day < 1 || day > 29 {\n            return false\n        }\n\
    \    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n     \
    \   if day < 1 || day > 30 {\n            return false\n        }\n    } else\
    \ {\n        if day < 1 || day > 31 {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    _, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day,\
    \ &year)\n    if err != nil {\n        return false\n    }\n    if month < 1 ||\
    \ month > 12 {\n        return false\n    }\n    if month == 2 {\n        if day\
    \ < 1 || day > 29 {\n            return false\n        }\n    } else if month\
    \ == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day\
    \ > 30 {\n            return false\n        }\n    } else {\n        if day <\
    \ 1 || day > 31 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075020
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmpdf4u0zg0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmpdf4u0zg0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    var month, day, year int\n    var err error\n    _, err\
    \ = fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if err != nil {\n\
    \        return false\n    }\n    if month < 1 || month > 12 {\n        return\
    \ false\n    }\n    if day < 1 {\n        return false\n    }\n    if month ==\
    \ 2 {\n        if day > 29 {\n            return false\n        }\n    } else\
    \ if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day >\
    \ 30 {\n            return false\n        }\n    } else {\n        if day > 31\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmpdf4u0zg0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmpdf4u0zg0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    _, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day,\
    \ &year)\n    if err != nil {\n        return false\n    }\n    if month < 1 ||\
    \ month > 12 {\n        return false\n    }\n    if day < 1 {\n        return\
    \ false\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day > 30 {\n            return false\n        }\n    } else\
    \ {\n        if day > 31 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    _, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day,\
    \ &year)\n    if err != nil {\n        return false\n    }\n    if month < 1 ||\
    \ month > 12 {\n        return false\n    }\n    if day < 1 {\n        return\
    \ false\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day > 30 {\n            return false\n        }\n    } else\
    \ {\n        if day > 31 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpblcvgqj6_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpblcvgqj6_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpblcvgqj6_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpblcvgqj6_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpblcvgqj6_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpblcvgqj6_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpblcvgqj6_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpblcvgqj6_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpblcvgqj6_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpblcvgqj6_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpblcvgqj6_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    if\
    \ len(date) != 10 {\n        return false\n    }\n    if date[2] != '-' || date[5]\
    \ != '-' {\n        return false\n    }\n    month := date[0:2]\n    day := date[3:5]\n\
    \    year := date[6:10]\n    if month[0] < '0' || month[0] > '9' || month[1] <\
    \ '0' || month[1] > '9' {\n        return false\n    }\n    if day[0] < '0' ||\
    \ day[0] > '9' || day[1] < '0' || day[1] > '9' {\n        return false\n    }\n\
    \    if year[0] < '0' || year[0] > '9' || year[1] < '0' || year[1] > '9' || year[2]\
    \ < '0' || year[2] > '9' || year[3] < '0' || year[3] > '9' {\n        return false\n\
    \    }\n    m, _ := strconv.Atoi(month)\n    d, _ := strconv.Atoi(day)\n    y,\
    \ _ := strconv.Atoi(year)\n    if m < 1 || m > 12 {\n        return false\n  \
    \  }\n    if m == 2 {\n        if d < 1 || d > 29 {\n            return false\n\
    \        }\n    } else if m == 4 || m == 6 || m == 9 || m == 11 {\n        if\
    \ d < 1 || d > 30 {\n            return false\n        }\n    } else {\n     \
    \   if d < 1 || d > 31 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj1j29euo_test.go:37:13: undefined: strconv

    /tmp/tmpj1j29euo_test.go:38:13: undefined: strconv

    /tmp/tmpj1j29euo_test.go:39:13: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    month,\
    \ day, year := 0, 0, 0\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075020
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if date == \"\" {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075020
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmpdf4u0zg0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmpdf4u0zg0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if date == \"\" {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075020
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    _, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day,\
    \ &year)\n    if err != nil {\n        return false\n    }\n    if month < 1 ||\
    \ month > 12 {\n        return false\n    }\n    if day < 1 {\n        return\
    \ false\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day > 30 {\n            return false\n        }\n    } else\
    \ {\n        if day > 31 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmp19zad22t_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmp19zad22t_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    _, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day,\
    \ &year)\n    if err != nil {\n        return false\n    }\n    if month < 1 ||\
    \ month > 12 {\n        return false\n    }\n    if day < 1 {\n        return\
    \ false\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day > 30 {\n            return false\n        }\n    } else\
    \ {\n        if day > 31 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    _, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day,\
    \ &year)\n    if err != nil {\n        return false\n    }\n    if month < 1 ||\
    \ month > 12 {\n        return false\n    }\n    if day < 1 {\n        return\
    \ false\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day > 30 {\n            return false\n        }\n    } else\
    \ {\n        if day > 31 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    _, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day,\
    \ &year)\n    if err != nil {\n        return false\n    }\n    if month < 1 ||\
    \ month > 12 {\n        return false\n    }\n    if day < 1 {\n        return\
    \ false\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day > 30 {\n            return false\n        }\n    } else\
    \ {\n        if day > 31 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__0\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__3 (0.00s)\n        tmpdf4u0zg0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__4\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestValid_Date/test_num__8 (0.00s)\n        tmpdf4u0zg0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestValid_Date/test_num__10\
    \ (0.00s)\n        tmpdf4u0zg0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n \
    \ candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    if len(date) == 0 {\n        return false\n    }\n    var\
    \ month, day, year int\n    _, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day,\
    \ &year)\n    if err != nil {\n        return false\n    }\n    if month < 1 ||\
    \ month > 12 {\n        return false\n    }\n    if day < 1 {\n        return\
    \ false\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day > 30 {\n            return false\n        }\n    } else\
    \ {\n        if day > 31 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\nfunc valid_date(date\
    \ string) bool {\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp_tv7qu5y_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp_tv7qu5y_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
