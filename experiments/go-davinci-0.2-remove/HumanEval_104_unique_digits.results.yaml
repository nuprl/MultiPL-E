language: go_test.go
name: HumanEval_104_unique_digits
results:
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if is_unique_digits(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo68kfoyy_test.go:15:12: undefined: is_unique_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var y []int\n    for _, v := range x {\n        if !has_even_digit(v) {\n\
    \            y = append(y, v)\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp9zttdpi_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var ret []int\n    for _, v := range x {\n        if has_even_digit(v) {\n\
    \            continue\n        }\n        ret = append(ret, v)\n    }\n    return\
    \ ret\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpicgclj95_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, n := range x {\n        if has_even_digit(n)\
    \ {\n            continue\n        }\n        result = append(result, n)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd3eqpsel_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if is_unique_digits(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo68kfoyy_test.go:15:12: undefined: is_unique_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if v % 2 == 0 {\n  \
    \          result = append(result, v)\n        }\n    }\n    return result\n}\n\
    \nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpfwh5bykl_test.go:38: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=1422)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n\
    \        tmpfwh5bykl_test.go:38: expected '[]', got '[%!s(int=152) %!s(int=1422)\
    \ %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n       \
    \ tmpfwh5bykl_test.go:38: expected '[%!s(int=111) %!s(int=151)]', got '[]'\n \
    \   --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpfwh5bykl_test.go:38:\
    \ expected '[%!s(int=31) %!s(int=135)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var res []int\n    for _, v := range x {\n        if !has_even_digit(v) {\n\
    \            res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxvnhd6d__test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    // TODO: Implement me\n    return []int{}\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmps5ty7_lp_test.go:33: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmps5ty7_lp_test.go:33:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmps5ty7_lp_test.go:33: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var y []int\n    for _, n := range x {\n        if !has_even_digit(n) {\n\
    \            y = append(y, n)\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbqe5taox_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, i := range x {\n        if has_even_digit(i)\
    \ {\n            continue\n        }\n        result = append(result, i)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbolb_fx1_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, i := range x {\n        if !has_even_digit(i)\
    \ {\n            result = append(result, i)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphl2yhvii_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var res []int\n    for _, v := range x {\n        if !has_even_digit(v) {\n\
    \            res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxvnhd6d__test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var res []int\n    for _, v := range x {\n        if !has_even_digit(v) {\n\
    \            res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxvnhd6d__test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, num := range x {\n        if has_even_digit(num)\
    \ {\n            continue\n        }\n        result = append(result, num)\n \
    \   }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphbdvq547_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, i := range x {\n        if is_unique_digits(i)\
    \ {\n            result = append(result, i)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpui233y10_test.go:15:12: undefined: is_unique_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var res []int\n    for _, v := range x {\n        if !has_even_digit(v) {\n\
    \            res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxvnhd6d__test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var ret []int\n    for _, v := range x {\n        if !has_even_digit(v) {\n\
    \            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgv8_p6nx_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, n := range x {\n        if n < 10 {\n      \
    \      result = append(result, n)\n        } else {\n            if n % 2 == 1\
    \ {\n                result = append(result, n)\n            } else {\n      \
    \          for n > 0 {\n                    if n % 2 == 0 {\n                \
    \        break\n                    }\n                    n /= 10\n         \
    \       }\n                if n == 0 {\n                    result = append(result,\
    \ n)\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpvgtnbb2m_test.go:52: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpvgtnbb2m_test.go:52: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpvgtnbb2m_test.go:52:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmpvgtnbb2m_test.go:52: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if v < 10 {\n      \
    \      result = append(result, v)\n        } else {\n            var digits []int\n\
    \            for v > 0 {\n                digits = append(digits, v % 10)\n  \
    \              v /= 10\n            }\n            var has_even bool\n       \
    \     for _, v := range digits {\n                if v % 2 == 0 {\n          \
    \          has_even = true\n                    break\n                }\n   \
    \         }\n            if !has_even {\n                result = append(result,\
    \ x[i])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi5gvd246_test.go:31:43: undefined: i

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var y []int\n    for _, v := range x {\n        if v % 2 == 0 {\n       \
    \     y = append(y, v)\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmph0lfpqzm_test.go:38: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=1422)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n\
    \        tmph0lfpqzm_test.go:38: expected '[]', got '[%!s(int=152) %!s(int=1422)\
    \ %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n       \
    \ tmph0lfpqzm_test.go:38: expected '[%!s(int=111) %!s(int=151)]', got '[]'\n \
    \   --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmph0lfpqzm_test.go:38:\
    \ expected '[%!s(int=31) %!s(int=135)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    // TODO: Implement this function\n    return []int{}\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpgq60p3yl_test.go:33: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpgq60p3yl_test.go:33:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpgq60p3yl_test.go:33: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, n := range x {\n        if !has_even_digit(n)\
    \ {\n            result = append(result, n)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcm8908wt_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if v < 10 {\n      \
    \      result = append(result, v)\n        } else {\n            if v % 2 == 1\
    \ {\n                result = append(result, v)\n            } else {\n      \
    \          for v > 0 {\n                    if v % 2 == 0 {\n                \
    \        break\n                    }\n                    v /= 10\n         \
    \       }\n                if v == 0 {\n                    result = append(result,\
    \ v)\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpst75udut_test.go:52: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpst75udut_test.go:52: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpst75udut_test.go:52:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmpst75udut_test.go:52: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var y []int\n    for _, v := range x {\n        if !has_even_digit(v) {\n\
    \            y = append(y, v)\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp9zttdpi_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var res []int\n    for _, v := range x {\n        if has_even_digit(v) {\n\
    \            continue\n        }\n        res = append(res, v)\n    }\n    return\
    \ res\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmymgxjva_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    result := make([]int, 0)\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe8dxxwt__test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if v % 2 == 0 {\n  \
    \          continue\n        }\n        result = append(result, v)\n    }\n  \
    \  return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpo2hqnw3z_test.go:39: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpo2hqnw3z_test.go:39: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpo2hqnw3z_test.go:39:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmpo2hqnw3z_test.go:39: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073242
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var res []int\n    for _, v := range x {\n        if !has_even_digit(v) {\n\
    \            res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxvnhd6d__test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var res []int\n    for _, n := range x {\n        if has_even_digit(n) {\n\
    \            continue\n        }\n        res = append(res, n)\n    }\n    return\
    \ res\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjsxkxpy0_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073242
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, i := range x {\n        if !has_even_digit(i)\
    \ {\n            result = append(result, i)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphl2yhvii_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if v < 10 {\n      \
    \      result = append(result, v)\n        } else {\n            if !has_even_digit(v)\
    \ {\n                result = append(result, v)\n            }\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpexi8lhs1_test.go:18:17: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073242
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, n := range x {\n        if !has_even_digit(n)\
    \ {\n            result = append(result, n)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcm8908wt_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if v % 2 == 0 {\n  \
    \          continue\n        }\n        for v > 0 {\n            if v % 2 == 0\
    \ {\n                break\n            }\n            v /= 10\n        }\n  \
    \      if v == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpukpi72j4_test.go:47: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__2\
    \ (0.00s)\n        tmpukpi72j4_test.go:47: expected '[%!s(int=111) %!s(int=151)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n\
    \        tmpukpi72j4_test.go:47: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073242
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var res []int\n    for _, v := range x {\n        if !has_even_digit(v) {\n\
    \            res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxvnhd6d__test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var res []int\n    for _, v := range x {\n        if !has_even_digit(v) {\n\
    \            res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxvnhd6d__test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var y []int\n    for _, v := range x {\n        if !has_even_digit(v) {\n\
    \            y = append(y, v)\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp9zttdpi_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var res []int\n    for _, v := range x {\n        if !has_even_digit(v) {\n\
    \            res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxvnhd6d__test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var y []int\n    for _, v := range x {\n        if v % 2 == 0 {\n       \
    \     y = append(y, v)\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmph0lfpqzm_test.go:38: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=1422)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n\
    \        tmph0lfpqzm_test.go:38: expected '[]', got '[%!s(int=152) %!s(int=1422)\
    \ %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n       \
    \ tmph0lfpqzm_test.go:38: expected '[%!s(int=111) %!s(int=151)]', got '[]'\n \
    \   --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmph0lfpqzm_test.go:38:\
    \ expected '[%!s(int=31) %!s(int=135)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, num := range x {\n        if !has_even_digit(num)\
    \ {\n            result = append(result, num)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2jgcryhy_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073242
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, i := range x {\n        if !has_even_digit(i)\
    \ {\n            result = append(result, i)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphl2yhvii_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if v < 10 {\n      \
    \      result = append(result, v)\n        } else {\n            if v % 2 == 1\
    \ {\n                result = append(result, v)\n            } else {\n      \
    \          for v > 0 {\n                    if v % 2 == 0 {\n                \
    \        break\n                    }\n                    v /= 10\n         \
    \       }\n                if v == 0 {\n                    result = append(result,\
    \ v)\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpst75udut_test.go:52: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpst75udut_test.go:52: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpst75udut_test.go:52:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmpst75udut_test.go:52: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if v < 10 {\n      \
    \      result = append(result, v)\n        } else {\n            if v % 2 == 1\
    \ {\n                result = append(result, v)\n            } else {\n      \
    \          for v > 0 {\n                    if v % 2 == 0 {\n                \
    \        break\n                    }\n                    v /= 10\n         \
    \       }\n                if v == 0 {\n                    result = append(result,\
    \ v)\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpst75udut_test.go:52: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpst75udut_test.go:52: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpst75udut_test.go:52:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmpst75udut_test.go:52: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var y []int\n    for _, v := range x {\n        if !has_even_digit(v) {\n\
    \            y = append(y, v)\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp9zttdpi_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var y []int\n    for _, v := range x {\n        if !has_even_digit(v) {\n\
    \            y = append(y, v)\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp9zttdpi_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if is_unique_digits(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo68kfoyy_test.go:15:12: undefined: is_unique_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var res []int\n    for _, v := range x {\n        if !has_even_digit(v) {\n\
    \            res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxvnhd6d__test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    result := make([]int, 0)\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe8dxxwt__test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if v < 10 {\n      \
    \      result = append(result, v)\n        } else {\n            if v % 2 == 1\
    \ {\n                result = append(result, v)\n            } else {\n      \
    \          var even bool = false\n                for v > 0 {\n              \
    \      if v % 2 == 0 {\n                        even = true\n                \
    \        break\n                    }\n                    v /= 10\n         \
    \       }\n                if !even {\n                    result = append(result,\
    \ v)\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp7gojywsn_test.go:54: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmp7gojywsn_test.go:54: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp7gojywsn_test.go:54:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmp7gojywsn_test.go:54: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073242
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var y []int\n    for _, v := range x {\n        if !has_even_digit(v) {\n\
    \            y = append(y, v)\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp9zttdpi_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var y []int\n    for _, v := range x {\n        if v % 2 == 0 {\n       \
    \     y = append(y, v)\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmph0lfpqzm_test.go:38: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=1422)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n\
    \        tmph0lfpqzm_test.go:38: expected '[]', got '[%!s(int=152) %!s(int=1422)\
    \ %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n       \
    \ tmph0lfpqzm_test.go:38: expected '[%!s(int=111) %!s(int=151)]', got '[]'\n \
    \   --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmph0lfpqzm_test.go:38:\
    \ expected '[%!s(int=31) %!s(int=135)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var y []int\n    for _, v := range x {\n        if v % 2 == 0 {\n       \
    \     y = append(y, v)\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmph0lfpqzm_test.go:38: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=1422)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n\
    \        tmph0lfpqzm_test.go:38: expected '[]', got '[%!s(int=152) %!s(int=1422)\
    \ %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n       \
    \ tmph0lfpqzm_test.go:38: expected '[%!s(int=111) %!s(int=151)]', got '[]'\n \
    \   --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmph0lfpqzm_test.go:38:\
    \ expected '[%!s(int=31) %!s(int=135)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var res []int\n    for _, v := range x {\n        if is_unique(v) {\n   \
    \         res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa6dkixoh_test.go:15:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073242
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, n := range x {\n        if n < 10 {\n      \
    \      result = append(result, n)\n        } else {\n            var digits []int\n\
    \            for n > 0 {\n                digits = append(digits, n % 10)\n  \
    \              n /= 10\n            }\n            var has_even bool\n       \
    \     for _, d := range digits {\n                if d % 2 == 0 {\n          \
    \          has_even = true\n                    break\n                }\n   \
    \         }\n            if !has_even {\n                result = append(result,\
    \ x[i])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphvkr8d9t_test.go:31:43: undefined: i

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073242
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var res []int\n    for _, v := range x {\n        if !has_even_digit(v) {\n\
    \            res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxvnhd6d__test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    y := make([]int, 0)\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            y = append(y, v)\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3aim4g5a_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073242
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, n := range x {\n        if !has_even_digit(n)\
    \ {\n            result = append(result, n)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcm8908wt_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var y []int\n    for _, v := range x {\n        if !has_even_digit(v) {\n\
    \            y = append(y, v)\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp9zttdpi_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    // TODO: implement\n    return nil\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpmruvir4b_test.go:33: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpmruvir4b_test.go:33:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpmruvir4b_test.go:33: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073242
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if v == 0 {\n      \
    \      result = append(result, v)\n            continue\n        }\n        if\
    \ v % 2 == 1 {\n            result = append(result, v)\n            continue\n\
    \        }\n        for v > 0 {\n            if v % 2 == 0 {\n               \
    \ break\n            }\n            v /= 10\n        }\n        if v == 0 {\n\
    \            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp72n_2iz1_test.go:52: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmp72n_2iz1_test.go:52: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp72n_2iz1_test.go:52:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmp72n_2iz1_test.go:52: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073242
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, n := range x {\n        if n < 10 {\n      \
    \      result = append(result, n)\n        } else {\n            if !has_even_digit(n)\
    \ {\n                result = append(result, n)\n            }\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6bbthe8s_test.go:18:17: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073242
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, v := range x {\n        if v % 2 == 0\
    \ {\n            m[v] = true\n        }\n    }\n    y := make([]int, 0)\n    for\
    \ _, v := range x {\n        if !m[v] {\n            y = append(y, v)\n      \
    \  }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpuh4ro0p9_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpuh4ro0p9_test.go:44: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpuh4ro0p9_test.go:44:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmpuh4ro0p9_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073242
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    result := make([]int, 0)\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe8dxxwt__test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var res []int\n    for _, v := range x {\n        if !has_even_digit(v) {\n\
    \            res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxvnhd6d__test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if unique_digits_helper(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyyze8enw_test.go:15:12: undefined: unique_digits_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073242
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var res []int\n    for _, v := range x {\n        if has_even_digit(v) {\n\
    \            continue\n        }\n        res = append(res, v)\n    }\n    return\
    \ res\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmymgxjva_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if v % 2 == 0 {\n  \
    \          continue\n        }\n        if has_even_digit(v) {\n            continue\n\
    \        }\n        result = append(result, v)\n    }\n    return result\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp77ewhf4l_test.go:18:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073242
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kehm8p8_test.go:15:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\nfunc unique_digits(x []int) []int {\n\
    \    var result []int\n    for _, v := range x {\n        if !has_even_digit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8ylf48p_test.go:15:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073241
