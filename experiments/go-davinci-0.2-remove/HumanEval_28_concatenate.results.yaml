language: go_test.go
name: HumanEval_28_concatenate
results:
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    result := \"\"\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var concatenated string\n    for _, str := range strings\
    \ {\n        concatenated += str\n    }\n    return concatenated\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n\n    for _, s := range strings {\n\
    \        result += s\n    }\n\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var s string\n    for _, str := range strings {\n  \
    \      s += str\n    }\n    return s\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var s string\n    for _, str := range strings {\n  \
    \      s += str\n    }\n    return s\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074383
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, str := range strings {\n\
    \        result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074383
