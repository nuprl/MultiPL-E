language: go_test.go
name: HumanEval_65_circular_shift
results:
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digits []int\n    var digit int\n    var i int\n\
    \    var j int\n\n    for x > 0 {\n        digit = x % 10\n        digits = append(digits,\
    \ digit)\n        x = x / 10\n    }\n\n    if shift > len(digits) {\n        for\
    \ i = len(digits) - 1; i >= 0; i-- {\n            result += fmt.Sprintf(\"%d\"\
    , digits[i])\n        }\n    } else {\n        for i = shift; i < len(digits);\
    \ i++ {\n            result += fmt.Sprintf(\"%d\", digits[i])\n        }\n   \
    \     for j = 0; j < shift; j++ {\n            result += fmt.Sprintf(\"%d\", digits[j])\n\
    \        }\n    }\n\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpihqeqeci_test.go:57: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpihqeqeci_test.go:57:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpihqeqeci_test.go:57: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpihqeqeci_test.go:57: expected '21', got '12'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return\
    \ reverse(digits)\n    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6gbb29is_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digit_count int\n    var digit_index int\n    var\
    \ digit int\n    var digit_string string\n    var i int\n\n    // Count the number\
    \ of digits in x\n    digit_count = 0\n    for i = x; i > 0; i = i / 10 {\n  \
    \      digit_count++\n    }\n\n    // If shift is greater than the number of digits,\
    \ reverse the digits\n    if shift > digit_count {\n        for i = x; i > 0;\
    \ i = i / 10 {\n            digit = i % 10\n            digit_string = fmt.Sprintf(\"\
    %d\", digit)\n            result = digit_string + result\n        }\n    } else\
    \ {\n        // Shift the digits\n        for i = x; i > 0; i = i / 10 {\n   \
    \         digit = i % 10\n            digit_string = fmt.Sprintf(\"%d\", digit)\n\
    \            digit_index = digit_count - shift\n            if digit_index < 0\
    \ {\n                digit_index = digit_index + digit_count\n            }\n\
    \            result = result[:digit_index] + digit_string + result[digit_index:]\n\
    \            digit_count--\n        }\n    }\n\n    return result\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:1] with length 0 [recovered]\n\tpanic: runtime error: slice bounds\
    \ out of range [:1] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.circular_shift(0xc00007e728?, 0x2)\n\t/tmp/tmps2x9acw6_test.go:41\
    \ +0x16b\ncommand-line-arguments_test.TestCircular_Shift(0x0?)\n\t/tmp/tmps2x9acw6_test.go:56\
    \ +0x4b\ntesting.tRunner(0xc0000da1a0, 0x528f50)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert x to string\n    x_str := fmt.Sprintf(\"%d\", x)\n    // Convert\
    \ shift to positive\n    shift = shift % len(x_str)\n    if shift < 0 {\n    \
    \    shift = shift + len(x_str)\n    }\n    // Shift the digits\n    x_str = x_str[shift:]\
    \ + x_str[:shift]\n    return x_str\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpgsjdjt9b_test.go:41: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpgsjdjt9b_test.go:41:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digit int\n    var digit_count int\n\n    // Count\
    \ the number of digits in x\n    for i := x; i > 0; i /= 10 {\n        digit_count++\n\
    \    }\n\n    // If shift > number of digits, return digits reversed\n    if shift\
    \ > digit_count {\n        for i := x; i > 0; i /= 10 {\n            digit = i\
    \ % 10\n            result = fmt.Sprintf(\"%d%s\", digit, result)\n        }\n\
    \        return result\n    }\n\n    // Shift the digits right by shift\n    for\
    \ i := x; i > 0; i /= 10 {\n        digit = i % 10\n        result = fmt.Sprintf(\"\
    %d%s\", digit, result)\n        if len(result) == shift {\n            break\n\
    \        }\n    }\n    for i := x; i > 0; i /= 10 {\n        digit = i % 10\n\
    \        if len(result) == digit_count {\n            break\n        }\n     \
    \   result = fmt.Sprintf(\"%d%s\", digit, result)\n    }\n    return result\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp_7bltxkl_test.go:65: expected '001', got '000'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp_7bltxkl_test.go:65:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmp_7bltxkl_test.go:65: expected '21', got '22'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := fmt.Sprintf(\"%d\", x)\n    if shift > len(s) {\n        return reverse(s)\n\
    \    }\n    return s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94wsce1s_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return\
    \ reverse(digits)\n    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6gbb29is_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digit string\n    var i int\n    var j int\n   \
    \ var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var\
    \ p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u\
    \ int\n    var v int\n    var w int\n    var x_ int\n    var y int\n    var z\
    \ int\n    var aa int\n    var bb int\n    var cc int\n    var dd int\n    var\
    \ ee int\n    var ff int\n    var gg int\n    var hh int\n    var ii int\n   \
    \ var jj int\n    var kk int\n    var ll int\n    var mm int\n    var nn int\n\
    \    var oo int\n    var pp int\n    var qq int\n    var rr int\n    var ss int\n\
    \    var tt int\n    var uu int\n    var vv int\n    var ww int\n    var xx int\n\
    \    var yy int\n    var zz int\n    var aaa int\n    var bbb int\n    var ccc\
    \ int\n    var ddd int\n    var eee int\n    var fff int\n    var ggg int\n  \
    \  var hhh int\n    var iii int\n    var jjj int\n    var kkk int\n    var lll\
    \ int\n    var mmm int\n    var nnn int\n    var ooo int\n    var ppp int\n  \
    \  var qqq int\n    var rrr int\n    var sss int\n    var ttt int\n    var uuu\
    \ int\n    var vvv int\n    var www int\n    var xxx int\n    var yyy int\n  \
    \  var zzz int\n    var aaaa int\n    var bbbb int\n    var cccc int\n    var\
    \ dddd int\n    var eeee int\n    var ffff int\n    var gggg int\n    var hhhh\
    \ int\n    var iiii int\n    var jjjj int\n    var kkkk int\n    var llll int\n\
    \    var mmmm int\n    var nnnn int\n    var oooo int\n    var pppp int\n    var\
    \ qqq\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp_62l1ft_test.go:100:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074709
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var digits []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n\
    \        x /= 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n\
    \    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[0])\n\
    \        digits = digits[1:]\n    }\n    var result string\n    for i := len(digits)\
    \ - 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpq8yzl_48_test.go:48: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digit int\n    var digits []int\n\n    for x > 0\
    \ {\n        digit = x % 10\n        digits = append(digits, digit)\n        x\
    \ = x / 10\n    }\n\n    if shift > len(digits) {\n        for i := len(digits)\
    \ - 1; i >= 0; i-- {\n            result += fmt.Sprintf(\"%d\", digits[i])\n \
    \       }\n    } else {\n        for i := len(digits) - shift; i < len(digits);\
    \ i++ {\n            result += fmt.Sprintf(\"%d\", digits[i])\n        }\n   \
    \     for i := 0; i < len(digits) - shift; i++ {\n            result += fmt.Sprintf(\"\
    %d\", digits[i])\n        }\n    }\n\n    return result\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpw0a0af1p_test.go:55: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpw0a0af1p_test.go:55:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpw0a0af1p_test.go:55: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpw0a0af1p_test.go:55: expected '21', got '12'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift >= len(digits) {\n        return reverse(digits)\n\
    \    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqlr4gdzg_test.go:17:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return\
    \ reverse(digits)\n    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6gbb29is_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx6u7dznj_test.go:16:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074709
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert x to string.\n    x_str := fmt.Sprintf(\"%d\", x)\n    // Get the\
    \ length of the string.\n    x_len := len(x_str)\n    // If shift is greater than\
    \ the length of the string, reverse the string.\n    if shift > x_len {\n    \
    \    x_str = reverse(x_str)\n    } else {\n        // Otherwise, shift the string.\n\
    \        x_str = x_str[x_len - shift:] + x_str[:x_len - shift]\n    }\n    return\
    \ x_str\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6idsjvwv_test.go:18:17: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := fmt.Sprintf(\"%d\", x)\n    if shift > len(s) {\n        return reverse(s)\n\
    \    }\n    return s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94wsce1s_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var digits []int\n    var result string\n\n    for x > 0 {\n        digits\
    \ = append(digits, x % 10)\n        x /= 10\n    }\n\n    if shift > len(digits)\
    \ {\n        for i := len(digits) - 1; i >= 0; i-- {\n            result += fmt.Sprintf(\"\
    %d\", digits[i])\n        }\n    } else {\n        for i := shift; i < len(digits);\
    \ i++ {\n            result += fmt.Sprintf(\"%d\", digits[i])\n        }\n   \
    \     for i := 0; i < shift; i++ {\n            result += fmt.Sprintf(\"%d\",\
    \ digits[i])\n        }\n    }\n\n    return result\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp7sja5563_test.go:53: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7sja5563_test.go:53:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp7sja5563_test.go:53: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp7sja5563_test.go:53: expected '21', got '12'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digits []int\n    var i int\n    var digit int\n\
    \    var reversed bool\n\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n     \
    \   reversed = true\n    }\n\n    for i = 0; i < len(fmt.Sprintf(\"%d\", x));\
    \ i++ {\n        digit = x % 10\n        x = x / 10\n        digits = append(digits,\
    \ digit)\n    }\n\n    if reversed {\n        for i = len(digits) - 1; i >= 0;\
    \ i-- {\n            result += fmt.Sprintf(\"%d\", digits[i])\n        }\n   \
    \ } else {\n        for i = shift; i < len(digits); i++ {\n            result\
    \ += fmt.Sprintf(\"%d\", digits[i])\n        }\n        for i = 0; i < shift;\
    \ i++ {\n            result += fmt.Sprintf(\"%d\", digits[i])\n        }\n   \
    \ }\n\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.circular_shift(0xc, 0x2)\n\t/tmp/tmpt_3tmecb_test.go:37\
    \ +0x38d\ncommand-line-arguments_test.TestCircular_Shift(0x0?)\n\t/tmp/tmpt_3tmecb_test.go:52\
    \ +0x72\ntesting.tRunner(0xc0000da1a0, 0x528f50)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpizwubt5q_test.go:35: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpizwubt5q_test.go:35:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digit int\n    var i int\n    var j int\n    var\
    \ k int\n    var x_copy int\n    var x_copy_copy int\n    var x_copy_copy_copy\
    \ int\n    var x_copy_copy_copy_copy int\n    var x_copy_copy_copy_copy_copy int\n\
    \    var x_copy_copy_copy_copy_copy_copy int\n    var x_copy_copy_copy_copy_copy_copy_copy\
    \ int\n    var x_copy_copy_copy_copy_copy_copy_copy_copy int\n    var x_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ int\n    var x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy int\n    var\
    \ x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy int\n    var x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ int\n    var x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ int\n    var x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ int\n    var x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ int\n    var x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ int\n    var x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ int\n    var x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ int\n    var x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ int\n    var x_copy_copy_copy_copy\nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpervpozgs_test.go:36:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074709
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", reverse(x))\n\
    \    }\n    return fmt.Sprintf(\"%d\", (x % int(pow(10, shift))) * int(pow(10,\
    \ len(fmt.Sprintf(\"%d\", x)) - shift)) + x / int(pow(10, shift)))\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpidl0i3or_test.go:16:34: undefined: reverse

    /tmp/tmpidl0i3or_test.go:18:39: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := fmt.Sprintf(\"%d\", x)\n    if shift > len(s) {\n        return reverse(s)\n\
    \    }\n    return s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94wsce1s_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert the integer to a string.\n    s := fmt.Sprintf(\"%d\", x)\n    //\
    \ If shift is greater than the number of digits, reverse the string.\n    if shift\
    \ > len(s) {\n        s = reverse(s)\n    } else {\n        // Split the string\
    \ into two parts.\n        s1 := s[0:len(s)-shift]\n        s2 := s[len(s)-shift:len(s)]\n\
    \        // Concatenate the two parts in reverse order.\n        s = s2 + s1\n\
    \    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuhrkt81f_test.go:16:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digit int\n    var digit_count int\n    var digit_string\
    \ string\n    var i int\n    var j int\n    var k int\n    var x_copy int\n\n\
    \    x_copy = x\n    for x_copy > 0 {\n        digit_count++\n        x_copy /=\
    \ 10\n    }\n\n    if shift > digit_count {\n        for x > 0 {\n           \
    \ digit = x % 10\n            digit_string = fmt.Sprintf(\"%d\", digit)\n    \
    \        result = digit_string + result\n            x /= 10\n        }\n    }\
    \ else {\n        for i = 0; i < shift; i++ {\n            digit = x % 10\n  \
    \          digit_string = fmt.Sprintf(\"%d\", digit)\n            result = digit_string\
    \ + result\n            x /= 10\n        }\n        for j = 0; j < digit_count\
    \ - shift; j++ {\n            digit = x % 10\n            digit_string = fmt.Sprintf(\"\
    %d\", digit)\n            result = result + digit_string\n            x /= 10\n\
    \        }\n    }\n\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbwzpotde_test.go:18:9: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digit int\n    var i int\n    var j int\n    var\
    \ k int\n    var n int\n    var x_copy int\n\n    // Count the number of digits\
    \ in x.\n    x_copy = x\n    n = 0\n    for x_copy > 0 {\n        x_copy /= 10\n\
    \        n++\n    }\n\n    // If shift > number of digits, return digits reversed.\n\
    \    if shift > n {\n        for i = 0; i < n; i++ {\n            digit = x %\
    \ 10\n            result = fmt.Sprintf(\"%d%s\", digit, result)\n            x\
    \ /= 10\n        }\n        return result\n    }\n\n    // Shift the digits right\
    \ by shift.\n    for i = 0; i < shift; i++ {\n        digit = x % 10\n       \
    \ x /= 10\n    }\n    result = fmt.Sprintf(\"%d\", digit)\n    for j = 0; j <\
    \ n - shift; j++ {\n        digit = x % 10\n        result = fmt.Sprintf(\"%d%s\"\
    , digit, result)\n        x /= 10\n    }\n    for k = 0; k < shift - 1; k++ {\n\
    \        digit = x % 10\n        result = fmt.Sprintf(\"%d%s\", digit, result)\n\
    \        x /= 10\n    }\n\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpsgna9p0u_test.go:75: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpsgna9p0u_test.go:75:\
    \ expected '12', got '01'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpsgna9p0u_test.go:75: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpsgna9p0u_test.go:75: expected '21', got '12'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digit int\n    var num_digits int\n    var i int\n\
    \n    // Count the number of digits in x\n    num_digits = 0\n    for i = x; i\
    \ > 0; i /= 10 {\n        num_digits++\n    }\n\n    // If shift > number of digits,\
    \ reverse the digits\n    if shift > num_digits {\n        for i = x; i > 0; i\
    \ /= 10 {\n            digit = i % 10\n            result = fmt.Sprintf(\"%d%s\"\
    , digit, result)\n        }\n    } else {\n        // Shift the digits right by\
    \ shift\n        for i = x; i > 0; i /= 10 {\n            digit = i % 10\n   \
    \         result = fmt.Sprintf(\"%d%s\", digit, result)\n        }\n        result\
    \ = result[shift:] + result[:shift]\n    }\n\n    return result\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp73xwsj5x_test.go:58: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp73xwsj5x_test.go:58:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    return fmt.Sprintf(\"%d\", x)[len(fmt.Sprintf(\"%d\", x))-shift:]\
    \ + fmt.Sprintf(\"%d\", x)[:len(fmt.Sprintf(\"%d\", x))-shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp2jb_g4b9_test.go:35: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := fmt.Sprintf(\"%d\", x)\n    if shift > len(s) {\n        return reverse(s)\n\
    \    }\n    return s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94wsce1s_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    s := fmt.Sprintf(\"%d\", x)\n    return s[len(s)-shift:] + s[:len(s)-shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpup97jpix_test.go:36: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digits []int\n    for x > 0 {\n        digits =\
    \ append(digits, x % 10)\n        x /= 10\n    }\n    if shift > len(digits) {\n\
    \        for i := len(digits) - 1; i >= 0; i-- {\n            result += fmt.Sprintf(\"\
    %d\", digits[i])\n        }\n    } else {\n        for i := len(digits) - shift;\
    \ i < len(digits); i++ {\n            result += fmt.Sprintf(\"%d\", digits[i])\n\
    \        }\n        for i := 0; i < len(digits) - shift; i++ {\n            result\
    \ += fmt.Sprintf(\"%d\", digits[i])\n        }\n    }\n    return result\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpvw8kei5r_test.go:50: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpvw8kei5r_test.go:50:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpvw8kei5r_test.go:50: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpvw8kei5r_test.go:50: expected '21', got '12'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074711
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift >= len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpdwkkfsot_test.go:35: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpdwkkfsot_test.go:35:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074711
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := fmt.Sprintf(\"%d\", x)\n    if shift > len(s) {\n        return reverse(s)\n\
    \    }\n    return s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94wsce1s_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digit string\n    var i int\n    var j int\n   \
    \ var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var\
    \ p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u\
    \ int\n    var v int\n    var w int\n    var x_str string\n    var x_str_len int\n\
    \    var x_str_rev string\n    var x_str_rev_len int\n    var x_str_rev_sub string\n\
    \    var x_str_rev_sub_len int\n    var x_str_rev_sub_sub string\n    var x_str_rev_sub_sub_len\
    \ int\n    var x_str_rev_sub_sub_sub string\n    var x_str_rev_sub_sub_sub_len\
    \ int\n    var x_str_rev_sub_sub_sub_sub string\n    var x_str_rev_sub_sub_sub_sub_len\
    \ int\n    var x_str_rev_sub_sub_sub_sub_sub string\n    var x_str_rev_sub_sub_sub_sub_sub_len\
    \ int\n    var x_str_rev_sub_sub_sub_sub_sub_sub string\n    var x_str_rev_sub_sub_sub_sub_sub_sub_len\
    \ int\n    var x_str_rev_sub_sub_sub_sub_sub_sub_sub string\n    var x_str_rev_sub_sub_sub_sub_sub_sub_sub_len\
    \ int\n    var x_str_rev_sub_sub_sub_sub_sub_sub_sub_sub string\n    var x_str_rev_sub_sub_sub_sub_sub_sub_sub_sub_len\
    \ int\n    var x_str_rev_sub_sub_sub_sub_sub_sub_sub_sub_sub string\n    var x_str_rev_sub_sub_sub_sub_sub_sub_sub_sub_sub_len\
    \ int\n    var x_str_rev_sub_sub_sub_sub_sub_sub_sub_sub_sub_sub string\n   \n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsp1l5pw8_test.go:53:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var reversed string\n    var i int\n    var digit int\n\
    \    var digit_char string\n\n    // Convert x to string\n    result = fmt.Sprintf(\"\
    %d\", x)\n\n    // If shift > number of digits, reverse the digits\n    if shift\
    \ > len(result) {\n        for i = len(result) - 1; i >= 0; i-- {\n          \
    \  digit_char = string(result[i])\n            reversed += digit_char\n      \
    \  }\n        return reversed\n    }\n\n    // Shift the digits right by shift\n\
    \    for i = 0; i < shift; i++ {\n        digit_char = string(result[len(result)\
    \ - 1])\n        result = digit_char + result[:len(result) - 1]\n    }\n\n   \
    \ return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptara1axv_test.go:15:9: digit declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074712
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return reverse(digits)\n\
    \    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnt_fqg91_test.go:17:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074712
- exit_code: 0
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert x to string\n    s := fmt.Sprintf(\"%d\", x)\n    // Get length\
    \ of string\n    l := len(s)\n    // If shift > length of string, reverse string\
    \ and return\n    if shift > l {\n        r := []rune(s)\n        for i, j :=\
    \ 0, len(r)-1; i < len(r)/2; i, j = i+1, j-1 {\n            r[i], r[j] = r[j],\
    \ r[i]\n        }\n        return string(r)\n    }\n    // Split string into two\
    \ parts\n    s1 := s[:l-shift]\n    s2 := s[l-shift:]\n    // Return concatenation\
    \ of s2 and s1\n    return s2 + s1\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074712
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpizwubt5q_test.go:35: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpizwubt5q_test.go:35:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx6u7dznj_test.go:16:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074709
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digit int\n    var digit_count int\n    var reverse\
    \ bool\n\n    if shift > 0 {\n        for x > 0 {\n            digit = x % 10\n\
    \            x = x / 10\n            digit_count += 1\n            if digit_count\
    \ > shift {\n                result = fmt.Sprintf(\"%d%s\", digit, result)\n \
    \           } else {\n                result = fmt.Sprintf(\"%s%d\", result, digit)\n\
    \            }\n        }\n        if digit_count < shift {\n            reverse\
    \ = true\n        }\n    } else {\n        result = fmt.Sprintf(\"%d\", x)\n \
    \   }\n\n    if reverse {\n        var reversed string\n        for _, r := range\
    \ result {\n            reversed = fmt.Sprintf(\"%c%s\", r, reversed)\n      \
    \  }\n        result = reversed\n    }\n\n    return result\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpskhn3njw_test.go:63: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpskhn3njw_test.go:63:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpskhn3njw_test.go:63: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpskhn3njw_test.go:63: expected '21', got '12'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074712
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var digits []int\n    var result string\n\n    // Get the digits of x\n   \
    \ for x > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n    }\n\
    \n    // Reverse the digits\n    for i, j := 0, len(digits) - 1; i < j; i, j =\
    \ i + 1, j - 1 {\n        digits[i], digits[j] = digits[j], digits[i]\n    }\n\
    \n    // Shift the digits\n    if shift > len(digits) {\n        shift = len(digits)\n\
    \    }\n    digits = append(digits[shift:], digits[:shift]...)\n\n    // Convert\
    \ the digits to a string\n    for _, digit := range digits {\n        result +=\
    \ fmt.Sprintf(\"%d\", digit)\n    }\n\n    return result\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp02gb1h1x_test.go:57: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp02gb1h1x_test.go:57:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074712
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return reverse(digits)\n\
    \    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnt_fqg91_test.go:17:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074712
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var digits []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n\
    \        x /= 10\n    }\n    if shift > len(digits) {\n        for i, j := 0,\
    \ len(digits) - 1; i < j; i, j = i + 1, j - 1 {\n            digits[i], digits[j]\
    \ = digits[j], digits[i]\n        }\n    } else {\n        for i := 0; i < shift;\
    \ i++ {\n            digits = append(digits, digits[0])\n            digits =\
    \ digits[1:]\n        }\n    }\n    var result string\n    for _, digit := range\
    \ digits {\n        result += fmt.Sprintf(\"%d\", digit)\n    }\n    return result\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp96wq259a_test.go:51: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp96wq259a_test.go:51:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp96wq259a_test.go:51: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp96wq259a_test.go:51: expected '21', got '12'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074712
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digits []int\n    var i int\n    var digit int\n\
    \    var digit_count int\n\n    // Get the digits of the number.\n    for i =\
    \ x; i > 0; i /= 10 {\n        digit = i % 10\n        digits = append(digits,\
    \ digit)\n        digit_count++\n    }\n\n    // If shift > number of digits,\
    \ reverse the digits.\n    if shift > digit_count {\n        for i = digit_count\
    \ - 1; i >= 0; i-- {\n            result += fmt.Sprintf(\"%d\", digits[i])\n \
    \       }\n        return result\n    }\n\n    // Shift the digits.\n    for i\
    \ = shift; i < digit_count; i++ {\n        result += fmt.Sprintf(\"%d\", digits[i])\n\
    \    }\n    for i = 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\"\
    , digits[i])\n    }\n\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpjy9rwc2d_test.go:61: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpjy9rwc2d_test.go:61:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpjy9rwc2d_test.go:61: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpjy9rwc2d_test.go:61: expected '21', got '12'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074712
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert the integer to a string.\n    s := fmt.Sprintf(\"%d\", x)\n    //\
    \ If shift is greater than the number of digits, return the digits reversed.\n\
    \    if shift > len(s) {\n        return reverse(s)\n    }\n    // If shift is\
    \ zero, return the digits as is.\n    if shift == 0 {\n        return s\n    }\n\
    \    // Shift the digits right by shift.\n    return s[len(s) - shift:] + s[:len(s)\
    \ - shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5m2wnixz_test.go:16:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074712
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert to string\n    str := fmt.Sprintf(\"%d\", x)\n    // Get length\
    \ of string\n    str_len := len(str)\n    // If shift > number of digits, return\
    \ digits reversed\n    if shift > str_len {\n        return reverse(str)\n   \
    \ }\n    // Get the first shift digits\n    first := str[:shift]\n    // Get the\
    \ last str_len - shift digits\n    last := str[shift:]\n    // Concatenate the\
    \ last digits to the first digits\n    return last + first\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp493qji6r_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074712
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digit int\n    var i int\n    var j int\n    var\
    \ k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p\
    \ int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n\
    \    var v int\n    var w int\n    var x_ int\n    var y int\n    var z int\n\
    \    var aa int\n    var bb int\n    var cc int\n    var dd int\n    var ee int\n\
    \    var ff int\n    var gg int\n    var hh int\n    var ii int\n    var jj int\n\
    \    var kk int\n    var ll int\n    var mm int\n    var nn int\n    var oo int\n\
    \    var pp int\n    var qq int\n    var rr int\n    var ss int\n    var tt int\n\
    \    var uu int\n    var vv int\n    var ww int\n    var xx int\n    var yy int\n\
    \    var zz int\n    var aaa int\n    var bbb int\n    var ccc int\n    var ddd\
    \ int\n    var eee int\n    var fff int\n    var ggg int\n    var hhh int\n  \
    \  var iii int\n    var jjj int\n    var kkk int\n    var lll int\n    var mmm\
    \ int\n    var nnn int\n    var ooo int\n    var ppp int\n    var qqq int\n  \
    \  var rrr int\n    var sss int\n    var ttt int\n    var uuu int\n    var vvv\
    \ int\n    var www int\n    var xxx int\n    var yyy int\n    var zzz int\n  \
    \  var aaaa int\n    var bbbb int\n    var cccc int\n    var dddd int\n    var\
    \ eeee int\n    var ffff int\n    var gggg int\n    var hhhh int\n    var iiii\
    \ int\n    var jjjj int\n    var kkkk int\n    var llll int\n    var mmmm int\n\
    \    var nnnn int\n    var oooo int\n    var pppp int\n    var qqq\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcvr8tx9d_test.go:100:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074712
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digits []int\n    var i int\n    var j int\n   \
    \ var digit int\n\n    // Get the digits of x\n    for x > 0 {\n        digit\
    \ = x % 10\n        digits = append(digits, digit)\n        x = x / 10\n    }\n\
    \n    // Reverse the digits\n    for i, j = 0, len(digits) - 1; i < j; i, j =\
    \ i + 1, j - 1 {\n        digits[i], digits[j] = digits[j], digits[i]\n    }\n\
    \n    // Shift the digits\n    if shift > len(digits) {\n        shift = len(digits)\n\
    \    }\n    for i = 0; i < shift; i++ {\n        digit = digits[len(digits) -\
    \ 1]\n        digits = digits[:len(digits) - 1]\n        digits = append([]int{digit},\
    \ digits...)\n    }\n\n    // Convert the digits to a string\n    for i = 0; i\
    \ < len(digits); i++ {\n        result += fmt.Sprintf(\"%d\", digits[i])\n   \
    \ }\n\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpkd2cg1dk_test.go:65: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var digits []int\n    var result string\n    for x > 0 {\n        digits =\
    \ append(digits, x % 10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++\
    \ {\n        digits = append(digits[1:], digits[0])\n    }\n    for i := len(digits)\
    \ - 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmprn5z73a8_test.go:44: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var digits []int\n    var result []int\n    var result_str string\n\n    //\
    \ Get the digits of x\n    for x > 0 {\n        digits = append(digits, x % 10)\n\
    \        x /= 10\n    }\n\n    // Shift the digits\n    for i := 0; i < shift;\
    \ i++ {\n        result = append(result, digits[len(digits) - 1])\n        digits\
    \ = digits[:len(digits) - 1]\n    }\n\n    // Append the remaining digits\n  \
    \  result = append(result, digits...)\n\n    // Convert to string\n    for i :=\
    \ len(result) - 1; i >= 0; i-- {\n        result_str += fmt.Sprintf(\"%d\", result[i])\n\
    \    }\n\n    return result_str\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.circular_shift(0xc00007e728?, 0x8)\n\t/tmp/tmp8o17rml5_test.go:24\
    \ +0x27b\ncommand-line-arguments_test.TestCircular_Shift(0x0?)\n\t/tmp/tmp8o17rml5_test.go:48\
    \ +0x96\ntesting.tRunner(0xc0000da340, 0x528f50)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  fmt.Printf(\"x: %d\\n\", x)\n    fmt.Printf(\"shift: %d\\n\", shift)\n    digits\
    \ := make([]int, 0)\n    for x > 0 {\n        digits = append(digits, x % 10)\n\
    \        x /= 10\n    }\n    fmt.Printf(\"digits: %v\\n\", digits)\n    if shift\
    \ > len(digits) {\n        for i, j := 0, len(digits) - 1; i < j; i, j = i + 1,\
    \ j - 1 {\n            digits[i], digits[j] = digits[j], digits[i]\n        }\n\
    \    } else {\n        for i := 0; i < shift; i++ {\n            digits = append(digits,\
    \ digits[0])\n            digits = digits[1:]\n        }\n    }\n    fmt.Printf(\"\
    digits: %v\\n\", digits)\n    result := \"\"\n    for _, digit := range digits\
    \ {\n        result += fmt.Sprintf(\"%d\", digit)\n    }\n    return result\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "x: 100\nshift: 2\ndigits: [0 0 1]\ndigits: [1 0 0]\nx: 12\nshift: 2\ndigits:\
    \ [2 1]\ndigits: [2 1]\nx: 97\nshift: 8\ndigits: [7 9]\ndigits: [9 7]\nx: 12\n\
    shift: 1\ndigits: [2 1]\ndigits: [1 2]\nx: 11\nshift: 101\ndigits: [1 1]\ndigits:\
    \ [1 1]\n--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpgkw6q984_test.go:55: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpgkw6q984_test.go:55:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpgkw6q984_test.go:55: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpgkw6q984_test.go:55: expected '21', got '12'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return\
    \ reverse(digits)\n    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6gbb29is_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 0
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert to string\n    s := fmt.Sprintf(\"%d\", x)\n    // Get length of\
    \ string\n    l := len(s)\n    // If shift > length of string, reverse the string\n\
    \    if shift > l {\n        // Reverse the string\n        r := []rune(s)\n \
    \       for i, j := 0, len(r)-1; i < len(r)/2; i, j = i+1, j-1 {\n           \
    \ r[i], r[j] = r[j], r[i]\n        }\n        // Return reversed string\n    \
    \    return string(r)\n    }\n    // Return shifted string\n    return s[l-shift:]\
    \ + s[:l-shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074713
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert to string\n    s := fmt.Sprintf(\"%d\", x)\n    // Reverse string\n\
    \    r := reverse(s)\n    // Shift\n    if shift > len(r) {\n        return r\n\
    \    }\n    return r[:shift] + r[shift:]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl121jqvq_test.go:15:10: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074712
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []rune(fmt.Sprintf(\"%d\", x))\n    if shift > len(digits) {\n  \
    \      shift = len(digits)\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, digits[0])\n        digits = digits[1:]\n    }\n    return\
    \ string(digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp3piywe0l_test.go:40: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp3piywe0l_test.go:40:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpizwubt5q_test.go:35: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpizwubt5q_test.go:35:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return reverse(digits)\n\
    \    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnt_fqg91_test.go:17:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074712
- exit_code: 0
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert to string\n    s := fmt.Sprintf(\"%d\", x)\n    // Get length of\
    \ string\n    l := len(s)\n    // If shift > length of string, reverse the string\n\
    \    if shift > l {\n        // Reverse string\n        r := []rune(s)\n     \
    \   for i, j := 0, len(r)-1; i < len(r)/2; i, j = i+1, j-1 {\n            r[i],\
    \ r[j] = r[j], r[i]\n        }\n        // Return reversed string\n        return\
    \ string(r)\n    }\n    // Return shifted string\n    return s[l-shift:] + s[:l-shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digits []int\n    var i int\n    var digit int\n\
    \    var digit_count int\n\n    // Get the digits of x\n    for i = x; i > 0;\
    \ i /= 10 {\n        digit = i % 10\n        digits = append(digits, digit)\n\
    \    }\n\n    digit_count = len(digits)\n\n    // If shift > number of digits,\
    \ return digits reversed\n    if shift > digit_count {\n        for i = digit_count\
    \ - 1; i >= 0; i-- {\n            result += fmt.Sprintf(\"%d\", digits[i])\n \
    \       }\n        return result\n    }\n\n    // Circular shift the digits\n\
    \    for i = digit_count - shift; i < digit_count; i++ {\n        result += fmt.Sprintf(\"\
    %d\", digits[i])\n    }\n    for i = 0; i < digit_count - shift; i++ {\n     \
    \   result += fmt.Sprintf(\"%d\", digits[i])\n    }\n\n    return result\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpwxbsitp9_test.go:62: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpwxbsitp9_test.go:62:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpwxbsitp9_test.go:62: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpwxbsitp9_test.go:62: expected '21', got '12'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert integer to string\n    s := fmt.Sprintf(\"%d\", x)\n    // Get the\
    \ length of the string\n    l := len(s)\n    // If shift is greater than the length\
    \ of the string, reverse the string\n    if shift > l {\n        s = reverse(s)\n\
    \    } else {\n        // Get the first part of the string\n        s1 := s[0:l-shift]\n\
    \        // Get the second part of the string\n        s2 := s[l-shift:l]\n  \
    \      // Concatenate the two parts\n        s = s2 + s1\n    }\n    return s\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoj60ikph_test.go:18:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074712
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return\
    \ reverse(digits)\n    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6gbb29is_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift >= len(digits) {\n        return reverse(digits)\n\
    \    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqlr4gdzg_test.go:17:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpizwubt5q_test.go:35: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpizwubt5q_test.go:35:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digit int\n    var i int\n    for i = 0; i < shift;\
    \ i++ {\n        digit = x % 10\n        x = x / 10\n        result = fmt.Sprintf(\"\
    %d%s\", digit, result)\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpm8zea64q_test.go:40: expected '001', got '00'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__2 (0.00s)\n        tmpm8zea64q_test.go:40: expected\
    \ '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpm8zea64q_test.go:40: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpm8zea64q_test.go:40: expected '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n        result\
    \ = fmt.Sprintf(\"%d\", x)\n        for i := len(result) - 1; i >= 0; i-- {\n\
    \            result += string(result[i])\n        }\n        return result\n \
    \   }\n    result = fmt.Sprintf(\"%d\", x)\n    for i := 0; i < shift; i++ {\n\
    \        result = result[len(result) - 1:] + result[:len(result) - 1]\n    }\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp71jddyn4_test.go:44: expected '79', got '9779'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp71jddyn4_test.go:44:\
    \ expected '11', got '1111'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074714
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpizwubt5q_test.go:35: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpizwubt5q_test.go:35:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return reverse(digits)\n\
    \    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnt_fqg91_test.go:17:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074712
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpizwubt5q_test.go:35: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpizwubt5q_test.go:35:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    var digits\
    \ []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x /=\
    \ 10\n    }\n    if shift >= len(digits) {\n        for i, j := 0, len(digits)\
    \ - 1; i < j; i, j = i + 1, j - 1 {\n            digits[i], digits[j] = digits[j],\
    \ digits[i]\n        }\n    } else {\n        for i := 0; i < shift; i++ {\n \
    \           digits = append(digits, digits[0])\n            digits = digits[1:]\n\
    \        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n\
    \        result = result * 10 + digits[i]\n    }\n    return fmt.Sprintf(\"%d\"\
    , result)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpme2nnkjg_test.go:54: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpme2nnkjg_test.go:54:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpme2nnkjg_test.go:54: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074714
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return reverse(digits)\n\
    \    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnt_fqg91_test.go:17:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074712
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digit int\n    var i int\n    var j int\n    var\
    \ k int\n    var num_digits int\n    var num_shifts int\n    var reversed bool\n\
    \n    // Determine number of digits in x\n    num_digits = 0\n    for i = x; i\
    \ > 0; i /= 10 {\n        num_digits++\n    }\n\n    // Determine number of shifts\n\
    \    num_shifts = shift % num_digits\n    if num_shifts == 0 {\n        num_shifts\
    \ = num_digits\n    }\n\n    // Determine if digits are reversed\n    reversed\
    \ = false\n    if num_shifts > num_digits / 2 {\n        reversed = true\n   \
    \ }\n\n    // Shift digits\n    for i = x; i > 0; i /= 10 {\n        digit = i\
    \ % 10\n        for j = 0; j < num_shifts; j++ {\n            if reversed {\n\
    \                result = fmt.Sprintf(\"%d%s\", digit, result)\n            }\
    \ else {\n                result = fmt.Sprintf(\"%s%d\", result, digit)\n    \
    \        }\n        }\n        num_shifts--\n    }\n\n    return result\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo3gh3_e_test.go:16:9: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074714
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digits []int\n    var i int\n    var digit int\n\
    \    var digit_count int\n\n    // Get the digits of the number\n    for i = x;\
    \ i > 0; i /= 10 {\n        digit = i % 10\n        digits = append(digits, digit)\n\
    \    }\n\n    digit_count = len(digits)\n\n    // If shift > digit_count, reverse\
    \ the digits\n    if shift > digit_count {\n        for i = digit_count - 1; i\
    \ >= 0; i-- {\n            result += fmt.Sprintf(\"%d\", digits[i])\n        }\n\
    \    } else {\n        // Shift the digits\n        for i = shift; i < digit_count;\
    \ i++ {\n            result += fmt.Sprintf(\"%d\", digits[i])\n        }\n   \
    \     for i = 0; i < shift; i++ {\n            result += fmt.Sprintf(\"%d\", digits[i])\n\
    \        }\n    }\n\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpndd93zp7_test.go:61: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpndd93zp7_test.go:61:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpndd93zp7_test.go:61: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpndd93zp7_test.go:61: expected '21', got '12'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074714
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    var digits\
    \ []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x /=\
    \ 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n\
    \    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[0])\n\
    \        digits = digits[1:]\n    }\n    var result string\n    for i := len(digits)\
    \ - 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp1r6qu9l7_test.go:51: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074714
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpizwubt5q_test.go:35: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpizwubt5q_test.go:35:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpizwubt5q_test.go:35: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpizwubt5q_test.go:35:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var s string\n    if shift > len(fmt.Sprintf(\"%d\", x)) {\n        s = fmt.Sprintf(\"\
    %d\", x)\n        s = reverse(s)\n    } else {\n        s = fmt.Sprintf(\"%d\"\
    , x)\n        s = s[len(s)-shift:] + s[:len(s)-shift]\n    }\n    return s\n}\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_4aw32y_test.go:15:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074714
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digit int\n    var digits []int\n    var reversed_digits\
    \ []int\n    var reversed_result string\n\n    for x > 0 {\n        digit = x\
    \ % 10\n        digits = append(digits, digit)\n        x = x / 10\n    }\n\n\
    \    if shift > len(digits) {\n        for i := len(digits) - 1; i >= 0; i-- {\n\
    \            reversed_digits = append(reversed_digits, digits[i])\n        }\n\
    \        for i := 0; i < len(reversed_digits); i++ {\n            reversed_result\
    \ += fmt.Sprintf(\"%d\", reversed_digits[i])\n        }\n        return reversed_result\n\
    \    }\n\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\"\
    , digits[i])\n    }\n    for i := shift; i < len(digits); i++ {\n        result\
    \ += fmt.Sprintf(\"%d\", digits[i])\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__1\
    \ (0.00s)\n        tmp48p9fkjq_test.go:60: expected '12', got '21'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__2 (0.00s)\n        tmp48p9fkjq_test.go:60: expected\
    \ '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    return fmt.Sprintf(\"%d\", x)[len(fmt.Sprintf(\"%d\", x))-shift:]\
    \ + fmt.Sprintf(\"%d\", x)[:len(fmt.Sprintf(\"%d\", x))-shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp2jb_g4b9_test.go:35: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := fmt.Sprintf(\"%d\", x)\n    if shift >= len(digits) {\n        return\
    \ reverse(digits)\n    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptv9jtkyw_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074714
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift >= len(digits) {\n        return reverse(digits)\n\
    \    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqlr4gdzg_test.go:17:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return reverse(fmt.Sprintf(\"\
    %d\", x))\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\"\
    , x)[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfsmihp46_test.go:13:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074714
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift >= len(digits) {\n        return reverse(digits)\n\
    \    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqlr4gdzg_test.go:17:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := fmt.Sprintf(\"%d\", x)\n    if shift > len(s) {\n        return reverse(s)\n\
    \    }\n    return s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94wsce1s_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return\
    \ reverse(digits)\n    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6gbb29is_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert the integer to a string\n    s := fmt.Sprintf(\"%d\", x)\n    //\
    \ Convert the string to a rune slice\n    r := []rune(s)\n    // Reverse the rune\
    \ slice\n    for i, j := 0, len(r)-1; i < j; i, j = i+1, j-1 {\n        r[i],\
    \ r[j] = r[j], r[i]\n    }\n    // Convert the rune slice back to a string\n \
    \   s = string(r)\n    // If shift > number of digits, return digits reversed\n\
    \    if shift > len(s) {\n        return s\n    }\n    // Return the shifted string\n\
    \    return s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpon3n2br2_test.go:47: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpon3n2br2_test.go:47:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpon3n2br2_test.go:47: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpizwubt5q_test.go:35: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpizwubt5q_test.go:35:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var digits []int\n    var result []int\n    var result_str string\n\n    //\
    \ Extract the digits of x into an array\n    for x > 0 {\n        digits = append(digits,\
    \ x % 10)\n        x /= 10\n    }\n\n    // Reverse the digits\n    for i, j :=\
    \ 0, len(digits) - 1; i < j; i, j = i + 1, j - 1 {\n        digits[i], digits[j]\
    \ = digits[j], digits[i]\n    }\n\n    // Shift the digits\n    if shift > len(digits)\
    \ {\n        shift = len(digits)\n    }\n    result = append(result, digits[len(digits)\
    \ - shift:]...)\n    result = append(result, digits[:len(digits) - shift]...)\n\
    \n    // Reverse the digits again\n    for i, j := 0, len(result) - 1; i < j;\
    \ i, j = i + 1, j - 1 {\n        result[i], result[j] = result[j], result[i]\n\
    \    }\n\n    // Convert the result to a string\n    for _, digit := range result\
    \ {\n        result_str += fmt.Sprintf(\"%d\", digit)\n    }\n\n    return result_str\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpf1le2uyg_test.go:64: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpf1le2uyg_test.go:64:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpf1le2uyg_test.go:64: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx6u7dznj_test.go:16:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074709
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if x == 0 {\n        return \"0\"\n    }\n    digits := []int{}\n    for x\
    \ > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n    }\n   \
    \ if shift > len(digits) {\n        for i := 0; i < len(digits) / 2; i++ {\n \
    \           digits[i], digits[len(digits) - i - 1] = digits[len(digits) - i -\
    \ 1], digits[i]\n        }\n    } else {\n        for i := 0; i < shift; i++ {\n\
    \            digits = append(digits, digits[0])\n            digits = digits[1:]\n\
    \        }\n    }\n    result := \"\"\n    for i := 0; i < len(digits); i++ {\n\
    \        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n    return result\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpfhpyguz2_test.go:54: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpfhpyguz2_test.go:54:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpfhpyguz2_test.go:54: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpfhpyguz2_test.go:54: expected '21', got '12'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift >= len(digits) {\n        return reverse(digits)\n\
    \    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqlr4gdzg_test.go:17:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    return fmt.Sprintf(\"%d\", x)[len(fmt.Sprintf(\"%d\", x))-shift:]\
    \ + fmt.Sprintf(\"%d\", x)[:len(fmt.Sprintf(\"%d\", x))-shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp2jb_g4b9_test.go:35: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var digits []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n\
    \        x /= 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n\
    \    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[0])\n\
    \        digits = digits[1:]\n    }\n    var result string\n    for i := len(digits)\
    \ - 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpq8yzl_48_test.go:48: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    return fmt.Sprintf(\"%d\", x)[len(fmt.Sprintf(\"%d\", x))-shift:]\
    \ + fmt.Sprintf(\"%d\", x)[:len(fmt.Sprintf(\"%d\", x))-shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp2jb_g4b9_test.go:35: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := fmt.Sprintf(\"%d\", x)\n    if shift > len(s) {\n        return reverse(s)\n\
    \    }\n    return s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94wsce1s_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert the integer to a string\n    s := fmt.Sprintf(\"%d\", x)\n    //\
    \ Get the length of the string\n    l := len(s)\n    // If shift > number of digits,\
    \ return digits reversed\n    if shift > l {\n        return reverse(s)\n    }\n\
    \    // Get the first part of the string\n    first := s[:l-shift]\n    // Get\
    \ the second part of the string\n    second := s[l-shift:]\n    // Return the\
    \ second part of the string followed by the first part\n    return second + first\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoi_j98xt_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digit int\n    var i int\n    var j int\n    var\
    \ n int\n    var x_copy int\n\n    x_copy = x\n    n = 0\n    for x_copy > 0 {\n\
    \        x_copy /= 10\n        n++\n    }\n\n    if shift > n {\n        for i\
    \ = 0; i < n; i++ {\n            digit = x % 10\n            result = fmt.Sprintf(\"\
    %d%s\", digit, result)\n            x /= 10\n        }\n    } else {\n       \
    \ for i = 0; i < shift; i++ {\n            digit = x % 10\n            x /= 10\n\
    \        }\n        for j = 0; j < n - shift; j++ {\n            result = fmt.Sprintf(\"\
    %d%s\", digit, result)\n            digit = x % 10\n            x /= 10\n    \
    \    }\n    }\n\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpui7y1wxl_test.go:64: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpui7y1wxl_test.go:64: expected\
    \ '12', got ''\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n       \
    \ tmpui7y1wxl_test.go:64: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpui7y1wxl_test.go:64: expected '21', got '2'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return\
    \ reverse(digits)\n    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6gbb29is_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digit int\n    var digit_count int\n    var i int\n\
    \n    // Count the number of digits in x\n    digit_count = 0\n    for i = x;\
    \ i > 0; i /= 10 {\n        digit_count++\n    }\n\n    // If shift > number of\
    \ digits, reverse the digits\n    if shift > digit_count {\n        for i = x;\
    \ i > 0; i /= 10 {\n            digit = i % 10\n            result = fmt.Sprintf(\"\
    %d%s\", digit, result)\n        }\n    } else {\n        // Shift the digits right\
    \ by shift\n        for i = x; i > 0; i /= 10 {\n            digit = i % 10\n\
    \            result = fmt.Sprintf(\"%d%s\", digit, result)\n        }\n      \
    \  result = result[shift:] + result[:shift]\n    }\n\n    return result\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp4u3qqp08_test.go:58: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp4u3qqp08_test.go:58:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := fmt.Sprintf(\"%d\", x)\n    if shift > len(s) {\n        return reverse(s)\n\
    \    }\n    return s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94wsce1s_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpizwubt5q_test.go:35: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpizwubt5q_test.go:35:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx6u7dznj_test.go:16:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074709
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var digits []int\n    var result string\n\n    // Get the digits of x\n   \
    \ for x > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n    }\n\
    \n    // If shift > number of digits, return digits reversed\n    if shift > len(digits)\
    \ {\n        for i := len(digits) - 1; i >= 0; i-- {\n            result += fmt.Sprintf(\"\
    %d\", digits[i])\n        }\n        return result\n    }\n\n    // Shift the\
    \ digits\n    for i := len(digits) - shift; i < len(digits); i++ {\n        result\
    \ += fmt.Sprintf(\"%d\", digits[i])\n    }\n    for i := 0; i < len(digits) -\
    \ shift; i++ {\n        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n\n  \
    \  return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp_qgftt0d_test.go:57: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp_qgftt0d_test.go:57:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp_qgftt0d_test.go:57: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp_qgftt0d_test.go:57: expected '21', got '12'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpizwubt5q_test.go:35: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpizwubt5q_test.go:35:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var digits []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n\
    \        x /= 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n\
    \    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[0])\n\
    \        digits = digits[1:]\n    }\n    var result string\n    for i := len(digits)\
    \ - 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpq8yzl_48_test.go:48: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx6u7dznj_test.go:16:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074709
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert the integer to a string.\n    s := fmt.Sprintf(\"%d\", x)\n    //\
    \ If shift is greater than the number of digits, reverse the digits.\n    if shift\
    \ > len(s) {\n        s = reverse(s)\n    } else {\n        // Split the string\
    \ into two parts.\n        s1 := s[:len(s) - shift]\n        s2 := s[len(s) -\
    \ shift:]\n        // Join the two parts.\n        s = s2 + s1\n    }\n    return\
    \ s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpojszxdri_test.go:16:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert the integer to a string\n    s := fmt.Sprintf(\"%d\", x)\n    //\
    \ If shift > number of digits, return digits reversed\n    if shift > len(s) {\n\
    \        return reverse(s)\n    }\n    // Split the string into two parts\n  \
    \  first := s[:shift]\n    second := s[shift:]\n    // Reverse the first part\n\
    \    first = reverse(first)\n    // Reverse the second part\n    second = reverse(second)\n\
    \    // Reverse the entire string\n    return reverse(first + second)\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8lga048__test.go:16:16: undefined: reverse

    /tmp/tmp8lga048__test.go:22:13: undefined: reverse

    /tmp/tmp8lga048__test.go:24:14: undefined: reverse

    /tmp/tmp8lga048__test.go:26:12: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := fmt.Sprintf(\"%d\", x)\n    if shift >= len(s) {\n        return reverse(s)\n\
    \    }\n    return s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpps0d8b3g_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert x to string\n    x_str := fmt.Sprintf(\"%d\", x)\n    // Get number\
    \ of digits\n    num_digits := len(x_str)\n    // If shift > number of digits,\
    \ return digits reversed\n    if shift > num_digits {\n        // Reverse string\n\
    \        x_str_rev := \"\"\n        for i := num_digits - 1; i >= 0; i-- {\n \
    \           x_str_rev += string(x_str[i])\n        }\n        return x_str_rev\n\
    \    }\n    // Get the first shift digits\n    x_str_first := x_str[0:shift]\n\
    \    // Get the remaining digits\n    x_str_remain := x_str[shift:num_digits]\n\
    \    // Concatenate the two strings\n    x_str_shifted := x_str_remain + x_str_first\n\
    \    return x_str_shifted\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp9aimbl6i_test.go:51: expected '001', got '010'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift >= len(digits) {\n        return reverse(digits)\n\
    \    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqlr4gdzg_test.go:17:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var digits []int\n    var result []int\n    var result_string string\n\n  \
    \  // Get the digits of x\n    for x > 0 {\n        digits = append(digits, x\
    \ % 10)\n        x /= 10\n    }\n\n    // If shift > number of digits, reverse\
    \ the digits\n    if shift > len(digits) {\n        for i := len(digits) - 1;\
    \ i >= 0; i-- {\n            result = append(result, digits[i])\n        }\n \
    \   } else {\n        // Shift the digits\n        for i := 0; i < len(digits);\
    \ i++ {\n            result = append(result, digits[(i + shift) % len(digits)])\n\
    \        }\n    }\n\n    // Convert result to string\n    for i := 0; i < len(result);\
    \ i++ {\n        result_string += fmt.Sprintf(\"%d\", result[i])\n    }\n\n  \
    \  return result_string\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpyptvj7jt_test.go:59: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpyptvj7jt_test.go:59:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpyptvj7jt_test.go:59: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpyptvj7jt_test.go:59: expected '21', got '12'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, 0)\n    for x > 0 {\n        digits = append(digits,\
    \ x % 10)\n        x /= 10\n    }\n    if shift > len(digits) {\n        shift\
    \ = len(digits)\n    }\n    digits = append(digits[shift:], digits[:shift]...)\n\
    \    result := \"\"\n    for _, digit := range digits {\n        result += fmt.Sprintf(\"\
    %d\", digit)\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp7oz72ttb_test.go:45: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7oz72ttb_test.go:45:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmp7oz72ttb_test.go:45: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return\
    \ reverse(digits)\n    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6gbb29is_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n\n    digits\
    \ := fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return reverse(digits)\n\
    \    }\n\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp142o_7a__test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert the integer to a string.\n    s := fmt.Sprintf(\"%d\", x)\n    //\
    \ If shift > number of digits, return digits reversed.\n    if shift > len(s)\
    \ {\n        for i, j := 0, len(s)-1; i < j; i, j = i+1, j-1 {\n            s[i],\
    \ s[j] = s[j], s[i]\n        }\n        return s\n    }\n    // Shift the digits\
    \ right by shift.\n    return s[len(s)-shift:] + s[:len(s)-shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqnb19zmz_test.go:17:13: cannot assign to s[i] (value of type byte)

    /tmp/tmpqnb19zmz_test.go:17:19: cannot assign to s[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpizwubt5q_test.go:35: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpizwubt5q_test.go:35:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpizwubt5q_test.go:35: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpizwubt5q_test.go:35:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digit int\n    var reversed bool\n\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        reversed = true\n    }\n\n    for x\
    \ > 0 {\n        digit = x % 10\n        x = x / 10\n        result = fmt.Sprintf(\"\
    %d%s\", digit, result)\n    }\n\n    if reversed {\n        return result\n  \
    \  }\n\n    return result[shift:] + result[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpen0_8uxx_test.go:50: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpen0_8uxx_test.go:50:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := fmt.Sprintf(\"%d\", x)\n    if shift > len(s) {\n        return reverse(s)\n\
    \    }\n    return s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94wsce1s_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return\
    \ reverse(digits)\n    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6gbb29is_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx6u7dznj_test.go:16:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074709
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert the integer to a string.\n    s := fmt.Sprintf(\"%d\", x)\n    //\
    \ Get the number of digits in the integer.\n    n := len(s)\n    // If shift >\
    \ number of digits, return digits reversed.\n    if shift > n {\n        return\
    \ reverse(s)\n    }\n    // Split the string into two parts.\n    a := s[:n-shift]\n\
    \    b := s[n-shift:]\n    // Return the two parts reversed and concatenated.\n\
    \    return reverse(b) + reverse(a)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzz85i09v_test.go:18:16: undefined: reverse

    /tmp/tmpzz85i09v_test.go:24:12: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n\n    digits\
    \ := []int{}\n    for x > 0 {\n        digits = append(digits, x % 10)\n     \
    \   x /= 10\n    }\n\n    shift %= len(digits)\n    if shift == 0 {\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    }\n\n    digits = append(digits[shift:], digits[:shift]...)\n\
    \n    result := 0\n    for _, digit := range digits {\n        result = result\
    \ * 10 + digit\n    }\n\n    return fmt.Sprintf(\"%d\", result)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmphp3sjwfz_test.go:54: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmphp3sjwfz_test.go:54:\
    \ expected '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmphp3sjwfz_test.go:54: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmphp3sjwfz_test.go:54: expected '21', got '12'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074717
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpizwubt5q_test.go:35: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpizwubt5q_test.go:35:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpizwubt5q_test.go:35: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpizwubt5q_test.go:35:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert the integer to a string.\n    str := fmt.Sprintf(\"%d\", x)\n  \
    \  // Reverse the string.\n    str = reverse(str)\n    // Get the number of digits.\n\
    \    digits := len(str)\n    // If shift > number of digits, return digits reversed.\n\
    \    if shift > digits {\n        return str\n    }\n    // Get the first shift\
    \ digits.\n    first := str[:shift]\n    // Get the remaining digits.\n    remaining\
    \ := str[shift:]\n    // Reverse the first shift digits.\n    first = reverse(first)\n\
    \    // Reverse the remaining digits.\n    remaining = reverse(remaining)\n  \
    \  // Return the first shift digits + the remaining digits.\n    return first\
    \ + remaining\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg4kdrd2i_test.go:15:11: undefined: reverse

    /tmp/tmpg4kdrd2i_test.go:27:13: undefined: reverse

    /tmp/tmpg4kdrd2i_test.go:29:17: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := fmt.Sprintf(\"%d\", x)\n    if shift >= len(digits) {\n        return\
    \ reverse(digits)\n    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptv9jtkyw_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074714
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var digits []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n\
    \        x /= 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n\
    \    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[0])\n\
    \        digits = digits[1:]\n    }\n    var result string\n    for i := len(digits)\
    \ - 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpq8yzl_48_test.go:48: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var digits []int\n    var result []int\n    var result_str string\n\n    //\
    \ Get the digits of x\n    for x > 0 {\n        digits = append(digits, x % 10)\n\
    \        x /= 10\n    }\n\n    // If shift > number of digits, return digits reversed\n\
    \    if shift > len(digits) {\n        for i := len(digits) - 1; i >= 0; i-- {\n\
    \            result = append(result, digits[i])\n        }\n    } else {\n   \
    \     // Shift the digits right by shift\n        for i := len(digits) - 1; i\
    \ >= 0; i-- {\n            result = append(result, digits[(i + shift) % len(digits)])\n\
    \        }\n    }\n\n    // Convert result to string\n    for i := 0; i < len(result);\
    \ i++ {\n        result_str += fmt.Sprintf(\"%d\", result[i])\n    }\n\n    return\
    \ result_str\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpb7sforh__test.go:59: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074717
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert the integer to a string.\n    s := fmt.Sprintf(\"%d\", x)\n    //\
    \ If the shift is greater than the number of digits, reverse the digits.\n   \
    \ if shift > len(s) {\n        s = reverse(s)\n    } else {\n        // Convert\
    \ the string to a slice of runes.\n        runes := []rune(s)\n        // Shift\
    \ the slice of runes.\n        runes = append(runes[shift:], runes[:shift]...)\n\
    \        // Convert the slice of runes back to a string.\n        s = string(runes)\n\
    \    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptvd1yjpt_test.go:16:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x_str :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift > len(x_str) {\n        return reverse(x_str)\n\
    \    }\n    return x_str[shift:] + x_str[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn7u3u1l2_test.go:17:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return\
    \ reverse(digits)\n    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6gbb29is_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := fmt.Sprintf(\"%d\", x)\n    if shift > len(s) {\n        return reverse(s)\n\
    \    }\n    return s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94wsce1s_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var digits []int\n    var result string\n    for x > 0 {\n        digits =\
    \ append(digits, x % 10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++\
    \ {\n        result += fmt.Sprintf(\"%d\", digits[len(digits) - 1])\n        digits\
    \ = digits[:len(digits) - 1]\n    }\n    for i := len(digits) - 1; i >= 0; i--\
    \ {\n        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n    return result\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.circular_shift(0xc00007e728?, 0x8)\n\t/tmp/tmpmpt7xgsq_test.go:19\
    \ +0x247\ncommand-line-arguments_test.TestCircular_Shift(0x0?)\n\t/tmp/tmpmpt7xgsq_test.go:37\
    \ +0x96\ntesting.tRunner(0xc0000da340, 0x528f50)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074717
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var digits []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n\
    \        x /= 10\n    }\n    if shift > len(digits) {\n        return fmt.Sprintf(\"\
    %v\", digits)\n    }\n    return fmt.Sprintf(\"%v\", append(digits[shift:], digits[:shift]...))\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpotjkf8kx_test.go:40: expected '001', got '[1 0 0]'\n   \
    \ --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpotjkf8kx_test.go:40:\
    \ expected '12', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpotjkf8kx_test.go:40: expected '79', got '[7 9]'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpotjkf8kx_test.go:40: expected '21', got '[1 2]'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpotjkf8kx_test.go:40:\
    \ expected '11', got '[1 1]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074717
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx6u7dznj_test.go:16:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074709
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digits []int\n    var reversed []int\n    var i\
    \ int\n    var j int\n    var k int\n    var digit int\n    var reversed_digit\
    \ int\n\n    // Convert x to an array of digits.\n    for x > 0 {\n        digit\
    \ = x % 10\n        digits = append(digits, digit)\n        x = x / 10\n    }\n\
    \n    // Reverse the digits.\n    for i = len(digits) - 1; i >= 0; i-- {\n   \
    \     reversed = append(reversed, digits[i])\n    }\n\n    // Shift the digits.\n\
    \    if shift > len(digits) {\n        shift = len(digits)\n    }\n    for i =\
    \ 0; i < shift; i++ {\n        reversed_digit = reversed[len(reversed) - 1]\n\
    \        reversed = reversed[:len(reversed) - 1]\n        reversed = append([]int{reversed_digit},\
    \ reversed...)\n    }\n\n    // Convert the digits back to a string.\n    for\
    \ j = 0; j < len(reversed); j++ {\n        k = reversed[j]\n        result = fmt.Sprintf(\"\
    %s%d\", result, k)\n    }\n\n    return result\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmptskld8r2_test.go:69: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074717
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert to string\n    s := fmt.Sprintf(\"%d\", x)\n    // Reverse the string\n\
    \    r := reverse(s)\n    // Shift the string\n    if shift > len(r) {\n     \
    \   return r\n    }\n    return r[shift:] + r[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpndndmiqi_test.go:15:10: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074717
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var digits []int\n    var result []int\n    var result_str string\n    var\
    \ i int\n    var j int\n\n    // Convert the integer to a slice of digits\n  \
    \  for x > 0 {\n        digits = append(digits, x % 10)\n        x = x / 10\n\
    \    }\n\n    // If shift > number of digits, reverse the digits\n    if shift\
    \ > len(digits) {\n        for i = len(digits) - 1; i >= 0; i-- {\n          \
    \  result = append(result, digits[i])\n        }\n    } else {\n        // Shift\
    \ the digits\n        for i = 0; i < len(digits); i++ {\n            j = (i +\
    \ shift) % len(digits)\n            result = append(result, digits[j])\n     \
    \   }\n    }\n\n    // Convert the slice of digits to a string\n    for i = 0;\
    \ i < len(result); i++ {\n        result_str += fmt.Sprintf(\"%d\", result[i])\n\
    \    }\n\n    return result_str\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp6h5pv92b_test.go:62: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp6h5pv92b_test.go:62:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp6h5pv92b_test.go:62: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp6h5pv92b_test.go:62: expected '21', got '12'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert the integer to a string.\n    s := fmt.Sprintf(\"%d\", x)\n    //\
    \ Get the length of the string.\n    l := len(s)\n    // If shift > number of\
    \ digits, return digits reversed.\n    if shift > l {\n        return reverse(s)\n\
    \    }\n    // Get the first part of the string.\n    first := s[0:shift]\n  \
    \  // Get the second part of the string.\n    second := s[shift:l]\n    // Return\
    \ the second part of the string followed by the first part.\n    return second\
    \ + first\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4sduga1s_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074717
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digit int\n    var i int\n    var j int\n    var\
    \ k int\n    var digit_count int\n    var digits []int\n\n    // Count the number\
    \ of digits in x.\n    digit_count = 0\n    for i = x; i > 0; i /= 10 {\n    \
    \    digit_count++\n    }\n\n    // If shift > number of digits, return digits\
    \ reversed.\n    if shift > digit_count {\n        for i = x; i > 0; i /= 10 {\n\
    \            digit = i % 10\n            result = fmt.Sprintf(\"%d%s\", digit,\
    \ result)\n        }\n        return result\n    }\n\n    // Extract the digits\
    \ of x into an array.\n    digits = make([]int, digit_count)\n    for i = x; i\
    \ > 0; i /= 10 {\n        digit = i % 10\n        digits[digit_count - 1] = digit\n\
    \        digit_count--\n    }\n\n    // Shift the digits right by shift.\n   \
    \ for i = 0; i < shift; i++ {\n        digit = digits[digit_count - 1]\n     \
    \   for j = digit_count - 1; j > 0; j-- {\n            digits[j] = digits[j -\
    \ 1]\n        }\n        digits[0] = digit\n    }\n\n    // Convert the array\
    \ of digits to a string.\n    for k = 0; k < len(digits); k++ {\n        result\
    \ = fmt.Sprintf(\"%s%d\", result, digits[k])\n    }\n\n    return result\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014378})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.circular_shift(0xc00007e728?, 0x2)\n\t/tmp/tmptx0v9kqw_test.go:45\
    \ +0x1d0\ncommand-line-arguments_test.TestCircular_Shift(0x0?)\n\t/tmp/tmptx0v9kqw_test.go:67\
    \ +0x4b\ntesting.tRunner(0xc0000da340, 0x528f58)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074718
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx6u7dznj_test.go:16:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074709
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpizwubt5q_test.go:35: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpizwubt5q_test.go:35:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n\n    str := fmt.Sprintf(\"%d\", x)\n    return str[len(str) - shift:]\
    \ + str[:len(str) - shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpyq5owh1a_test.go:37: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074718
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    var digits\
    \ []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x /=\
    \ 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n\
    \    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[i])\n\
    \    }\n    digits = digits[shift:]\n    var result string\n    for i := len(digits)\
    \ - 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpxayc92dd_test.go:51: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift >= len(digits) {\n        return reverse(digits)\n\
    \    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqlr4gdzg_test.go:17:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert the integer to a string.\n    s := fmt.Sprintf(\"%d\", x)\n    //\
    \ Get the number of digits in the integer.\n    n := len(s)\n    // If shift >\
    \ number of digits, reverse the digits.\n    if shift > n {\n        s = reverse(s)\n\
    \    } else {\n        // Shift the digits right by shift.\n        s = s[n-shift:]\
    \ + s[:n-shift]\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq008utqz_test.go:18:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074717
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert the integer to a string\n    s := fmt.Sprintf(\"%d\", x)\n    //\
    \ If shift is greater than the number of digits, reverse the digits\n    if shift\
    \ > len(s) {\n        s = reverse(s)\n    } else {\n        // Shift the digits\
    \ right by shift\n        s = s[len(s)-shift:] + s[:len(s)-shift]\n    }\n   \
    \ return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlt5g6tx_test.go:16:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := fmt.Sprintf(\"%d\", x)\n    if shift > len(s) {\n        return reverse(s)\n\
    \    }\n    return s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94wsce1s_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n\n    s := fmt.Sprintf(\"%d\", x)\n    return s[len(s) - shift:]\
    \ + s[:len(s) - shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpvw3jolsp_test.go:37: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := fmt.Sprintf(\"%d\", x)\n    if shift > len(s) {\n        return reverse(s)\n\
    \    }\n    return s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94wsce1s_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    x_str := fmt.Sprintf(\"%d\", x)\n    return x_str[len(x_str)\
    \ - shift:] + x_str[:len(x_str) - shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp6x654_y1_test.go:36: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074718
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpizwubt5q_test.go:35: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpizwubt5q_test.go:35:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert x to a string\n    x_str := fmt.Sprintf(\"%d\", x)\n    // Get the\
    \ length of the string\n    x_len := len(x_str)\n    // If shift is greater than\
    \ the length of the string, reverse the string\n    if shift > x_len {\n     \
    \   x_str = reverse(x_str)\n    } else {\n        // Otherwise, shift the string\
    \ right by shift\n        x_str = x_str[x_len-shift:] + x_str[:x_len-shift]\n\
    \    }\n    return x_str\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph_nqj3b3_test.go:18:17: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert to string\n    s := fmt.Sprintf(\"%d\", x)\n    // Get length of\
    \ string\n    l := len(s)\n    // If shift is greater than length, reverse string\n\
    \    if shift > l {\n        for i, j := 0, l-1; i < j; i, j = i+1, j-1 {\n  \
    \          s[i], s[j] = s[j], s[i]\n        }\n        return s\n    }\n    //\
    \ Otherwise, shift the digits\n    return s[l-shift:] + s[:l-shift]\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnlr2n6zb_test.go:19:13: cannot assign to s[i] (value of type byte)

    /tmp/tmpnlr2n6zb_test.go:19:19: cannot assign to s[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpizwubt5q_test.go:35: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpizwubt5q_test.go:35:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var digits []int\n    var result string\n\n    for x > 0 {\n        digits\
    \ = append(digits, x % 10)\n        x /= 10\n    }\n\n    if shift > len(digits)\
    \ {\n        for i := len(digits) - 1; i >= 0; i-- {\n            result += fmt.Sprintf(\"\
    %d\", digits[i])\n        }\n    } else {\n        for i := len(digits) - shift;\
    \ i < len(digits); i++ {\n            result += fmt.Sprintf(\"%d\", digits[i])\n\
    \        }\n        for i := 0; i < len(digits) - shift; i++ {\n            result\
    \ += fmt.Sprintf(\"%d\", digits[i])\n        }\n    }\n\n    return result\n}\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp3yj0pxlt_test.go:53: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp3yj0pxlt_test.go:53:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp3yj0pxlt_test.go:53: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp3yj0pxlt_test.go:53: expected '21', got '12'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074719
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := fmt.Sprintf(\"%d\", x)\n    if shift > len(s) {\n        return reverse(s)\n\
    \    }\n    return s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94wsce1s_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert to string\n    s := fmt.Sprintf(\"%d\", x)\n    // Reverse string\n\
    \    r := reverse(s)\n    // Shift right\n    if shift < len(r) {\n        r =\
    \ r[shift:] + r[:shift]\n    }\n    // Reverse string\n    r = reverse(r)\n  \
    \  return r\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_agvpmck_test.go:15:10: undefined: reverse

    /tmp/tmp_agvpmck_test.go:21:9: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074719
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var digits []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n\
    \        x /= 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n\
    \    }\n    for i := 0; i < shift; i++ {\n        digit := digits[len(digits)\
    \ - 1]\n        digits = digits[:len(digits) - 1]\n        digits = append([]int{digit},\
    \ digits...)\n    }\n    var result string\n    for _, digit := range digits {\n\
    \        result += fmt.Sprintf(\"%d\", digit)\n    }\n    return result\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpxt0h8bg7_test.go:49: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpxt0h8bg7_test.go:49:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpxt0h8bg7_test.go:49: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074719
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digits []int\n    var digit int\n    var i int\n\
    \    var j int\n\n    // Get the digits of x\n    for x > 0 {\n        digit =\
    \ x % 10\n        digits = append(digits, digit)\n        x = x / 10\n    }\n\n\
    \    // If shift > number of digits, return digits reversed\n    if shift > len(digits)\
    \ {\n        for i = len(digits) - 1; i >= 0; i-- {\n            result += fmt.Sprintf(\"\
    %d\", digits[i])\n        }\n        return result\n    }\n\n    // Shift the\
    \ digits\n    for i = 0; i < shift; i++ {\n        result += fmt.Sprintf(\"%d\"\
    , digits[i])\n    }\n    for j = 0; j < len(digits) - shift; j++ {\n        result\
    \ += fmt.Sprintf(\"%d\", digits[shift + j])\n    }\n\n    return result\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__1\
    \ (0.00s)\n        tmpuun24igc_test.go:61: expected '12', got '21'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__2 (0.00s)\n        tmpuun24igc_test.go:61: expected\
    \ '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074719
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert x to string\n    str := fmt.Sprintf(\"%d\", x)\n    // Get length\
    \ of string\n    length := len(str)\n    // If shift > length, reverse the string\n\
    \    if shift > length {\n        // Reverse the string\n        for i, j := 0,\
    \ len(str)-1; i < j; i, j = i+1, j-1 {\n            str[i], str[j] = str[j], str[i]\n\
    \        }\n        return str\n    }\n    // Split the string into two parts\n\
    \    // The first part is the last shift digits\n    // The second part is the\
    \ first length - shift digits\n    first := str[length-shift:]\n    second :=\
    \ str[:length-shift]\n    // Concatenate the two parts\n    return first + second\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmsxnf4dw_test.go:20:13: cannot assign to str[i] (value of type byte)

    /tmp/tmpmsxnf4dw_test.go:20:21: cannot assign to str[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074719
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift >= len(digits) {\n        return reverse(digits)\n\
    \    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqlr4gdzg_test.go:17:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpizwubt5q_test.go:35: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpizwubt5q_test.go:35:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpizwubt5q_test.go:35: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpizwubt5q_test.go:35:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert integer to string\n    s := fmt.Sprintf(\"%d\", x)\n    // Get the\
    \ length of the string\n    l := len(s)\n    // If shift is greater than the length\
    \ of the string, reverse the string\n    if shift > l {\n        return reverse(s)\n\
    \    }\n    // Return the string with the first shift characters removed and appended\
    \ to the end\n    return s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphz1imb9g_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074719
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert to string\n    str := fmt.Sprintf(\"%d\", x)\n    // Reverse the\
    \ string\n    reversed := reverse(str)\n    // Shift the string\n    shifted :=\
    \ shift_string(reversed, shift)\n    // Reverse the string\n    return reverse(shifted)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnimektub_test.go:15:17: undefined: reverse

    /tmp/tmpnimektub_test.go:17:16: undefined: shift_string

    /tmp/tmpnimektub_test.go:19:12: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074719
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var digits []int\n    var result string\n    var i int\n\n    // Get the digits\
    \ of x\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x /=\
    \ 10\n    }\n\n    // If shift > number of digits, reverse the digits\n    if\
    \ shift > len(digits) {\n        for i = len(digits) - 1; i >= 0; i-- {\n    \
    \        result += fmt.Sprintf(\"%d\", digits[i])\n        }\n        return result\n\
    \    }\n\n    // Shift the digits\n    for i = len(digits) - shift; i < len(digits);\
    \ i++ {\n        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n    for i =\
    \ 0; i < len(digits) - shift; i++ {\n        result += fmt.Sprintf(\"%d\", digits[i])\n\
    \    }\n\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpmia041f6_test.go:58: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpmia041f6_test.go:58:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpmia041f6_test.go:58: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpmia041f6_test.go:58: expected '21', got '12'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return\
    \ reverse(digits)\n    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6gbb29is_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert x to string\n    s := fmt.Sprintf(\"%d\", x)\n    // Get number\
    \ of digits\n    n := len(s)\n    // If shift > number of digits, return digits\
    \ reversed\n    if shift > n {\n        // Reverse string\n        for i, j :=\
    \ 0, len(s)-1; i < j; i, j = i+1, j-1 {\n            s[i], s[j] = s[j], s[i]\n\
    \        }\n        return s\n    }\n    // Shift digits right by shift\n    return\
    \ s[n-shift:] + s[:n-shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprnnwol8u_test.go:20:13: cannot assign to s[i] (value of type byte)

    /tmp/tmprnnwol8u_test.go:20:19: cannot assign to s[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var digits []int\n    var result []int\n    var result_string string\n\n  \
    \  // Get the digits of x\n    for x > 0 {\n        digits = append(digits, x\
    \ % 10)\n        x /= 10\n    }\n\n    // If shift > number of digits, reverse\
    \ the digits\n    if shift > len(digits) {\n        for i := len(digits) - 1;\
    \ i >= 0; i-- {\n            result = append(result, digits[i])\n        }\n \
    \   } else {\n        // Shift the digits\n        for i := 0; i < len(digits);\
    \ i++ {\n            result = append(result, digits[(i + shift) % len(digits)])\n\
    \        }\n    }\n\n    // Convert the result to a string\n    for i := 0; i\
    \ < len(result); i++ {\n        result_string += fmt.Sprintf(\"%d\", result[i])\n\
    \    }\n\n    return result_string\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpm320o8s3_test.go:59: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpm320o8s3_test.go:59:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpm320o8s3_test.go:59: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpm320o8s3_test.go:59: expected '21', got '12'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074720
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpizwubt5q_test.go:35: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpizwubt5q_test.go:35:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert integer to string\n    s := fmt.Sprintf(\"%d\", x)\n    // Reverse\
    \ the string\n    r := reverse(s)\n    // Shift the digits right by shift\n  \
    \  s = shift_right(r, shift)\n    // Reverse the string\n    r = reverse(s)\n\
    \    return r\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7b4mmdi9_test.go:15:10: undefined: reverse

    /tmp/tmp7b4mmdi9_test.go:17:9: undefined: shift_right

    /tmp/tmp7b4mmdi9_test.go:19:9: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digit string\n    var digits []string\n    var i\
    \ int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n\
    \    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n \
    \   var t int\n    var u int\n    var v int\n    var w int\n    var x_ int\n \
    \   var y int\n    var z int\n\n    if x < 0 {\n        result = \"-\"\n     \
    \   x = -x\n    }\n\n    if x == 0 {\n        result = \"0\"\n    }\n\n    if\
    \ x > 0 {\n        for x > 0 {\n            digit = fmt.Sprintf(\"%d\", x % 10)\n\
    \            digits = append(digits, digit)\n            x = x / 10\n        }\n\
    \n        if shift > len(digits) {\n            for i = len(digits) - 1; i >=\
    \ 0; i-- {\n                result = result + digits[i]\n            }\n     \
    \   } else {\n            for j = len(digits) - 1; j >= 0; j-- {\n           \
    \     result = result + digits[j]\n            }\n\n            for k = 0; k <\
    \ shift; k++ {\n                result = result[1:] + result[0:1]\n          \
    \  }\n        }\n    }\n\n    if x < 0 {\n        for l = len(digits) - 1; l >=\
    \ 0; l-- {\n            result = result + digits[l]\n        }\n\n        for\
    \ m = 0; m < shift; m++ {\n            result = result[1:] + result[0:1]\n   \
    \     }\n    }\n\n    if x == 0 {\n        for n = len(digits) - 1; n >= 0; n--\
    \ {\n            result = result + digits[n]\n        }\n\n        for o = 0;\
    \ o < shift; o++ {\n            result = result[1:] + result[0:1]\n        }\n\
    \    }\n\n    if x > 0 {\n        for p = len(digits) - 1; p >= 0; p-- {\n   \
    \         result = result + digits[p]\n        }\n\n        for q =\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzwzp059h_test.go:91:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074719
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var digits []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n\
    \        x /= 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n\
    \    }\n    digits = append(digits[len(digits) - shift:], digits[:len(digits)\
    \ - shift]...)\n    var result string\n    for _, digit := range digits {\n  \
    \      result += fmt.Sprintf(\"%d\", digit)\n    }\n    return result\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp7d_arv_s_test.go:45: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7d_arv_s_test.go:45:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmp7d_arv_s_test.go:45: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return\
    \ reverse(digits)\n    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6gbb29is_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert the integer to a string.\n    s := fmt.Sprintf(\"%d\", x)\n    //\
    \ If shift is greater than the number of digits, reverse the string.\n    if shift\
    \ > len(s) {\n        s = reverse(s)\n    } else {\n        // Split the string\
    \ into two parts.\n        s1 := s[:len(s) - shift]\n        s2 := s[len(s) -\
    \ shift:]\n        // Concatenate the two parts in reverse order.\n        s =\
    \ s2 + s1\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp99yjpc31_test.go:16:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var digits []int\n    var result string\n    for x > 0 {\n        digits =\
    \ append(digits, x % 10)\n        x /= 10\n    }\n    if shift > len(digits) {\n\
    \        for i := len(digits) - 1; i >= 0; i-- {\n            result += fmt.Sprintf(\"\
    %d\", digits[i])\n        }\n    } else {\n        for i := len(digits) - shift;\
    \ i < len(digits); i++ {\n            result += fmt.Sprintf(\"%d\", digits[i])\n\
    \        }\n        for i := 0; i < len(digits) - shift; i++ {\n            result\
    \ += fmt.Sprintf(\"%d\", digits[i])\n        }\n    }\n    return result\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp80j3oyn6_test.go:50: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp80j3oyn6_test.go:50:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp80j3oyn6_test.go:50: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp80j3oyn6_test.go:50: expected '21', got '12'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074720
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var digits []int\n    var reversed []int\n    var result []int\n    var result_str\
    \ string\n\n    // Get the digits of x\n    for x > 0 {\n        digits = append(digits,\
    \ x % 10)\n        x /= 10\n    }\n\n    // Reverse the digits\n    for i := len(digits)\
    \ - 1; i >= 0; i-- {\n        reversed = append(reversed, digits[i])\n    }\n\n\
    \    // Circular shift the digits\n    if shift > len(digits) {\n        result\
    \ = reversed\n    } else {\n        result = append(reversed[shift:], reversed[:shift]...)\n\
    \    }\n\n    // Convert the result to a string\n    for _, d := range result\
    \ {\n        result_str += fmt.Sprintf(\"%d\", d)\n    }\n\n    return result_str\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpuli0ezwt_test.go:60: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpuli0ezwt_test.go:60:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := fmt.Sprintf(\"%d\", x)\n    if shift > len(s) {\n        return reverse(s)\n\
    \    }\n    return s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94wsce1s_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digit int\n    var i int\n    var num_digits int\n\
    \n    // Count the number of digits in x.\n    num_digits = 0\n    for i = x;\
    \ i > 0; i /= 10 {\n        num_digits++\n    }\n\n    // If shift > number of\
    \ digits, reverse the digits.\n    if shift > num_digits {\n        for i = x;\
    \ i > 0; i /= 10 {\n            digit = i % 10\n            result = fmt.Sprintf(\"\
    %d%s\", digit, result)\n        }\n    } else {\n        // Shift the digits right\
    \ by shift.\n        for i = x; i > 0; i /= 10 {\n            digit = i % 10\n\
    \            result = fmt.Sprintf(\"%d%s\", digit, result)\n        }\n      \
    \  result = result[0:num_digits-shift] + result[num_digits-shift:]\n    }\n\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpt1ybx4ds_test.go:58: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpt1ybx4ds_test.go:58:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpt1ybx4ds_test.go:58: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074720
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    var digits\
    \ []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x /=\
    \ 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n\
    \    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[0])\n\
    \        digits = digits[1:]\n    }\n    var result string\n    for i := len(digits)\
    \ - 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp1r6qu9l7_test.go:51: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074714
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert to string\n    s := fmt.Sprintf(\"%d\", x)\n    // Get length\n\
    \    l := len(s)\n    // If shift > length, reverse string\n    if shift > l {\n\
    \        return reverse(s)\n    }\n    // Shift right\n    return s[l-shift:]\
    \ + s[:l-shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptn9gw4o6_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digit int\n    var i int\n    var j int\n    var\
    \ k int\n    var n int\n    var temp int\n\n    // Count the number of digits\
    \ in x.\n    n = 0\n    temp = x\n    for temp > 0 {\n        temp /= 10\n   \
    \     n++\n    }\n\n    // If shift > number of digits, reverse the digits.\n\
    \    if shift > n {\n        for i = 0; i < n; i++ {\n            digit = x %\
    \ 10\n            x /= 10\n            result += fmt.Sprintf(\"%d\", digit)\n\
    \        }\n        return result\n    }\n\n    // Shift the digits right by shift.\n\
    \    for i = 0; i < shift; i++ {\n        digit = x % 10\n        x /= 10\n  \
    \  }\n    result += fmt.Sprintf(\"%d\", digit)\n    for i = 0; i < n - shift;\
    \ i++ {\n        digit = x % 10\n        x /= 10\n        result += fmt.Sprintf(\"\
    %d\", digit)\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4xv6ea0l_test.go:15:9: j declared but not used

    /tmp/tmp4xv6ea0l_test.go:16:9: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert to string\n    x_str := fmt.Sprintf(\"%d\", x)\n    // Get length\
    \ of string\n    x_len := len(x_str)\n    // If shift > number of digits, return\
    \ digits reversed\n    if shift > x_len {\n        return reverse(x_str)\n   \
    \ }\n    // Split string into two parts\n    x_str_1 := x_str[0:x_len-shift]\n\
    \    x_str_2 := x_str[x_len-shift:x_len]\n    // Concatenate the two parts\n \
    \   return x_str_2 + x_str_1\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n \
    \ candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb9s61be__test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n\n    digits\
    \ := fmt.Sprintf(\"%d\", x)\n    if shift >= len(digits) {\n        return reverse(digits)\n\
    \    }\n\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjb1ekapc_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := fmt.Sprintf(\"%d\", x)\n    if shift > len(s) {\n        return reverse(s)\n\
    \    }\n    return s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94wsce1s_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digits []int\n    var i int\n    var digit int\n\
    \    var reversed bool\n    var reversed_digits []int\n\n    // Get the digits\
    \ of the integer x.\n    for i = 0; x > 0; i++ {\n        digit = x % 10\n   \
    \     digits = append(digits, digit)\n        x = x / 10\n    }\n\n    // If shift\
    \ > number of digits, reverse the digits.\n    if shift > i {\n        reversed\
    \ = true\n        for i = i - 1; i >= 0; i-- {\n            reversed_digits =\
    \ append(reversed_digits, digits[i])\n        }\n        digits = reversed_digits\n\
    \    }\n\n    // Circular shift the digits.\n    for i = 0; i < shift; i++ {\n\
    \        digit = digits[0]\n        digits = digits[1:]\n        digits = append(digits,\
    \ digit)\n    }\n\n    // Convert the digits to a string.\n    for i = 0; i <\
    \ len(digits); i++ {\n        result = fmt.Sprintf(\"%s%d\", result, digits[i])\n\
    \    }\n\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6mngjz_a_test.go:16:9: reversed declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := fmt.Sprintf(\"%d\", x)\n    if shift > len(s) {\n        return reverse(s)\n\
    \    }\n    return s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94wsce1s_test.go:14:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074710
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var digits []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n\
    \        x /= 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n\
    \    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[0])\n\
    \        digits = digits[1:]\n    }\n    var str string\n    for i := len(digits)\
    \ - 1; i >= 0; i-- {\n        str += fmt.Sprintf(\"%d\", digits[i])\n    }\n \
    \   return str\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpq643b3c9_test.go:48: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074721
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert the integer to a string.\n    s := fmt.Sprintf(\"%d\", x)\n    //\
    \ If shift is greater than the number of digits, reverse the digits.\n    if shift\
    \ > len(s) {\n        s = reverse(s)\n    } else {\n        // Split the string\
    \ into two parts.\n        s1 := s[:len(s) - shift]\n        s2 := s[len(s) -\
    \ shift:]\n        // Concatenate the two parts.\n        s = s2 + s1\n    }\n\
    \    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpruprvupe_test.go:16:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if x == 0 {\n        return \"0\"\n    }\n    digits := []int{}\n    for x\
    \ > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n    }\n   \
    \ if shift > len(digits) {\n        shift = len(digits)\n    }\n    for i := 0;\
    \ i < shift; i++ {\n        digits = append(digits, digits[0])\n        digits\
    \ = digits[1:]\n    }\n    result := \"\"\n    for i := len(digits) - 1; i >=\
    \ 0; i-- {\n        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n    return\
    \ result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpn0tcc019_test.go:51: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074721
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return reverse(digits)\n\
    \    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnt_fqg91_test.go:17:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074712
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  var result string\n    var digit string\n    var i int\n    var j int\n   \
    \ var length int\n    var num_digits int\n    var num_shifts int\n    var remainder\
    \ int\n    var reversed bool\n\n    // Convert the integer to a string.\n    result\
    \ = fmt.Sprintf(\"%d\", x)\n    length = len(result)\n    num_digits = length\n\
    \    num_shifts = shift\n    reversed = false\n\n    // If shift is greater than\
    \ the number of digits, reverse the digits.\n    if shift > length {\n       \
    \ num_shifts = shift % length\n        reversed = true\n    }\n\n    // Shift\
    \ the digits.\n    for i = 0; i < num_shifts; i++ {\n        digit = result[length\
    \ - 1:length]\n        result = digit + result[0:length - 1]\n    }\n\n    //\
    \ If shift is greater than the number of digits, reverse the digits.\n    if reversed\
    \ {\n        remainder = shift / length\n        for j = 0; j < remainder; j++\
    \ {\n            result = reverse(result)\n        }\n    }\n\n    return result\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4q_q1dzs_test.go:17:9: num_digits declared but not used

    /tmp/tmp4q_q1dzs_test.go:45:22: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074721
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert the integer to a string.\n    s := fmt.Sprintf(\"%d\", x)\n    //\
    \ Get the length of the string.\n    l := len(s)\n    // If shift > number of\
    \ digits, return digits reversed.\n    if shift > l {\n        return reverse(s)\n\
    \    }\n    // Get the first part of the string.\n    s1 := s[0:shift]\n    //\
    \ Get the second part of the string.\n    s2 := s[shift:l]\n    // Concatenate\
    \ the two parts of the string.\n    return s2 + s1\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn2itnx9h_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074721
- exit_code: 0
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert to string\n    s := fmt.Sprintf(\"%d\", x)\n    // Get length of\
    \ string\n    l := len(s)\n    // If shift > length, return reversed\n    if shift\
    \ > l {\n        var r string\n        for i := l - 1; i >= 0; i-- {\n       \
    \     r += string(s[i])\n        }\n        return r\n    }\n    // Shift digits\n\
    \    return s[l - shift:] + s[:l - shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074721
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert to string\n    s := fmt.Sprintf(\"%d\", x)\n    // Get length of\
    \ string\n    l := len(s)\n    // If shift > length, reverse the string\n    if\
    \ shift > l {\n        s = reverse(s)\n    } else {\n        // Split string\n\
    \        s1 := s[0:l-shift]\n        s2 := s[l-shift:l]\n        // Concatenate\
    \ strings\n        s = s2 + s1\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9ol3bfjm_test.go:18:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074721
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n\n    digits\
    \ := []int{}\n    for x > 0 {\n        digits = append(digits, x % 10)\n     \
    \   x /= 10\n    }\n\n    if shift > len(digits) {\n        shift = len(digits)\n\
    \    }\n\n    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[0])\n\
    \        digits = digits[1:]\n    }\n\n    result := \"\"\n    for i := len(digits)\
    \ - 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n\
    \n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpq7up3c9k_test.go:56: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074721
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    s := fmt.Sprintf(\"%d\", x)\n    return s[len(s)-shift:] + s[:len(s)-shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpup97jpix_test.go:36: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074710
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  // Convert the integer to a string.\n    str := fmt.Sprintf(\"%d\", x)\n  \
    \  // Reverse the string.\n    str = reverse(str)\n    // Shift the string.\n\
    \    str = shift_string(str, shift)\n    // Reverse the string.\n    str = reverse(str)\n\
    \    return str\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0n5omwwc_test.go:15:11: undefined: reverse

    /tmp/tmp0n5omwwc_test.go:17:11: undefined: shift_string

    /tmp/tmp0n5omwwc_test.go:19:11: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074721
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if x < 0 {\n        return \"\"\n    }\n\n    if shift > len(fmt.Sprintf(\"\
    %d\", x)) {\n        return fmt.Sprintf(\"%d\", x)\n    }\n\n    digits := fmt.Sprintf(\"\
    %d\", x)\n    return digits[len(digits) - shift:] + digits[:len(digits) - shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpjl37119w_test.go:41: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074721
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := fmt.Sprintf(\"%d\", x)\n    if shift > len(s) {\n        s = reverse(s)\n\
    \    } else {\n        s = s[len(s)-shift:] + s[:len(s)-shift]\n    }\n    return\
    \ s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_nci17ui_test.go:14:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074721
