language: go_test.go
name: HumanEval_126_is_sorted
results:
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmproav_sv2_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmproav_sv2_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) < 2 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpxg251z2b_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpxg251z2b_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    // TODO: implement me!\n    return false\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__0\
    \ (0.00s)\n        tmpnt09sdji_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__1 (0.00s)\n        tmpnt09sdji_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__3\
    \ (0.00s)\n        tmpnt09sdji_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__4 (0.00s)\n        tmpnt09sdji_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpnt09sdji_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__7 (0.00s)\n        tmpnt09sdji_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpnt09sdji_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpnt09sdji_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst)-1; i++ {\n        if lst[i] > lst[i+1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmp_9fc26u8_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmp_9fc26u8_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n\n    for\
    \ i := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n        \
    \    return false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmptobz697m_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmptobz697m_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__0\
    \ (0.00s)\n        tmpvq1i20e0_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__1 (0.00s)\n        tmpvq1i20e0_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__3\
    \ (0.00s)\n        tmpvq1i20e0_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__4 (0.00s)\n        tmpvq1i20e0_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpvq1i20e0_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__7 (0.00s)\n        tmpvq1i20e0_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpvq1i20e0_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpvq1i20e0_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__0\
    \ (0.00s)\n        tmpyry4t8ry_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__1 (0.00s)\n        tmpyry4t8ry_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__3\
    \ (0.00s)\n        tmpyry4t8ry_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__4 (0.00s)\n        tmpyry4t8ry_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpyry4t8ry_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__7 (0.00s)\n        tmpyry4t8ry_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpyry4t8ry_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpyry4t8ry_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__0\
    \ (0.00s)\n        tmpvq1i20e0_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__1 (0.00s)\n        tmpvq1i20e0_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__3\
    \ (0.00s)\n        tmpvq1i20e0_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__4 (0.00s)\n        tmpvq1i20e0_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpvq1i20e0_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__7 (0.00s)\n        tmpvq1i20e0_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpvq1i20e0_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpvq1i20e0_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    // check if the list is empty\n    if len(lst) == 0 {\n \
    \       return true\n    }\n    // check if the list has only one element\n  \
    \  if len(lst) == 1 {\n        return true\n    }\n    // check if the list is\
    \ sorted\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i +\
    \ 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmprcdk2ia7_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmprcdk2ia7_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__0\
    \ (0.00s)\n        tmpyry4t8ry_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__1 (0.00s)\n        tmpyry4t8ry_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__3\
    \ (0.00s)\n        tmpyry4t8ry_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__4 (0.00s)\n        tmpyry4t8ry_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpyry4t8ry_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__7 (0.00s)\n        tmpyry4t8ry_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpyry4t8ry_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpyry4t8ry_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    for i := 0; i < len(lst) - 1; i++ {\n\
    \        if lst[i] > lst[i + 1] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpz_vz20i9_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpz_vz20i9_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < lst[i-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmp5ijfxqgl_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmp5ijfxqgl_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpi9go1wzz_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpi9go1wzz_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) < 2 {\n        return true\n    }\n\n    for\
    \ i := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n        \
    \    return false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpfskd0zai_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpfskd0zai_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    // check if the list is empty\n    if len(lst) == 0 {\n \
    \       return true\n    }\n    // check if the list has only one element\n  \
    \  if len(lst) == 1 {\n        return true\n    }\n    // check if the list has\
    \ more than one element\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i]\
    \ > lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpcp73j3fx_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpcp73j3fx_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmproav_sv2_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmproav_sv2_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpi9go1wzz_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpi9go1wzz_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) < 2 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpxg251z2b_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpxg251z2b_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpi9go1wzz_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpi9go1wzz_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__0\
    \ (0.00s)\n        tmpvq1i20e0_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__1 (0.00s)\n        tmpvq1i20e0_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__3\
    \ (0.00s)\n        tmpvq1i20e0_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__4 (0.00s)\n        tmpvq1i20e0_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpvq1i20e0_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__7 (0.00s)\n        tmpvq1i20e0_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpvq1i20e0_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpvq1i20e0_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst)-1; i++ {\n        if lst[i] > lst[i+1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpfu4c31v4_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpfu4c31v4_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__0\
    \ (0.00s)\n        tmpxx89g6mz_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__1 (0.00s)\n        tmpxx89g6mz_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__3\
    \ (0.00s)\n        tmpxx89g6mz_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__4 (0.00s)\n        tmpxx89g6mz_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpxx89g6mz_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__7 (0.00s)\n        tmpxx89g6mz_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpxx89g6mz_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpxx89g6mz_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] >= lst[i + 1] {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpjkwsq8cp_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] >= lst[i + 1] {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpunevac34_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmproav_sv2_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmproav_sv2_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpi9go1wzz_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpi9go1wzz_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpi9go1wzz_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpi9go1wzz_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpi9go1wzz_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpi9go1wzz_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst)-1; i++ {\n        if lst[i] > lst[i+1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpfu4c31v4_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpfu4c31v4_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] >= lst[i + 1] {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpunevac34_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpi9go1wzz_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpi9go1wzz_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpi9go1wzz_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpi9go1wzz_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    // TODO: Implement me\n    return false\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__0\
    \ (0.00s)\n        tmp5w3e9bys_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__1 (0.00s)\n        tmp5w3e9bys_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__3\
    \ (0.00s)\n        tmp5w3e9bys_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__4 (0.00s)\n        tmp5w3e9bys_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp5w3e9bys_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__7 (0.00s)\n        tmp5w3e9bys_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp5w3e9bys_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmp5w3e9bys_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpi9go1wzz_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpi9go1wzz_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    for i\
    \ := 1; i < len(lst); i++ {\n        if lst[i] < lst[i-1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmp915bkt0z_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmp915bkt0z_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__0\
    \ (0.00s)\n        tmpxx89g6mz_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__1 (0.00s)\n        tmpxx89g6mz_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__3\
    \ (0.00s)\n        tmpxx89g6mz_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__4 (0.00s)\n        tmpxx89g6mz_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpxx89g6mz_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__7 (0.00s)\n        tmpxx89g6mz_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpxx89g6mz_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpxx89g6mz_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst)-1; i++ {\n        if lst[i] > lst[i+1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpfu4c31v4_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpfu4c31v4_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpi9go1wzz_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpi9go1wzz_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpi9go1wzz_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpi9go1wzz_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] >= lst[i + 1] {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpjkwsq8cp_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpi9go1wzz_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpi9go1wzz_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__0\
    \ (0.00s)\n        tmphvzayg1w_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__1 (0.00s)\n        tmphvzayg1w_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__3\
    \ (0.00s)\n        tmphvzayg1w_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__4 (0.00s)\n        tmphvzayg1w_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmphvzayg1w_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__7 (0.00s)\n        tmphvzayg1w_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmphvzayg1w_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmphvzayg1w_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst)-1; i++ {\n        if lst[i] > lst[i+1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpiqppdm4__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpiqppdm4__test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < lst[i-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmp5ijfxqgl_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmp5ijfxqgl_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmproav_sv2_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmproav_sv2_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpi9go1wzz_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpi9go1wzz_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst)-1; i++ {\n        if lst[i] > lst[i+1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmp_9fc26u8_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmp_9fc26u8_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__0\
    \ (0.00s)\n        tmpxx89g6mz_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__1 (0.00s)\n        tmpxx89g6mz_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__3\
    \ (0.00s)\n        tmpxx89g6mz_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__4 (0.00s)\n        tmpxx89g6mz_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpxx89g6mz_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__7 (0.00s)\n        tmpxx89g6mz_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpxx89g6mz_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpxx89g6mz_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpi9go1wzz_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpi9go1wzz_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) < 2 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst)-1; i++ {\n        if lst[i] >= lst[i+1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpft3kz1up_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074971
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpi9go1wzz_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpi9go1wzz_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__0\
    \ (0.00s)\n        tmpyry4t8ry_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__1 (0.00s)\n        tmpyry4t8ry_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__3\
    \ (0.00s)\n        tmpyry4t8ry_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__4 (0.00s)\n        tmpyry4t8ry_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpyry4t8ry_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__7 (0.00s)\n        tmpyry4t8ry_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpyry4t8ry_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpyry4t8ry_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n\n    prev\
    \ := lst[0]\n    for _, num := range lst[1:] {\n        if num < prev {\n    \
    \        return false\n        }\n        prev = num\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpde_bvat7_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpde_bvat7_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074971
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) < 2 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpxg251z2b_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpxg251z2b_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) < 2 {\n        return true\n    }\n\n    for\
    \ i := 1; i < len(lst); i++ {\n        if lst[i] < lst[i-1] {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpzj8catdm_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpzj8catdm_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074971
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    // TODO: Your code here\n    return false\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__0\
    \ (0.00s)\n        tmpp4dwh0z8_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__1 (0.00s)\n        tmpp4dwh0z8_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__3\
    \ (0.00s)\n        tmpp4dwh0z8_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__4 (0.00s)\n        tmpp4dwh0z8_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpp4dwh0z8_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__7 (0.00s)\n        tmpp4dwh0z8_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpp4dwh0z8_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpp4dwh0z8_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074971
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__0\
    \ (0.00s)\n        tmpyry4t8ry_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__1 (0.00s)\n        tmpyry4t8ry_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__3\
    \ (0.00s)\n        tmpyry4t8ry_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__4 (0.00s)\n        tmpyry4t8ry_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpyry4t8ry_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__7 (0.00s)\n        tmpyry4t8ry_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpyry4t8ry_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpyry4t8ry_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__0\
    \ (0.00s)\n        tmphvzayg1w_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__1 (0.00s)\n        tmphvzayg1w_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__3\
    \ (0.00s)\n        tmphvzayg1w_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__4 (0.00s)\n        tmphvzayg1w_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmphvzayg1w_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__7 (0.00s)\n        tmphvzayg1w_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmphvzayg1w_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmphvzayg1w_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpi9go1wzz_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpi9go1wzz_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmproav_sv2_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmproav_sv2_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__0\
    \ (0.00s)\n        tmpy64w3788_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__1 (0.00s)\n        tmpy64w3788_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__3\
    \ (0.00s)\n        tmpy64w3788_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__4 (0.00s)\n        tmpy64w3788_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpy64w3788_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__7 (0.00s)\n        tmpy64w3788_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpy64w3788_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpy64w3788_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074971
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst)-1; i++ {\n        if lst[i] > lst[i+1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmp_9fc26u8_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmp_9fc26u8_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__0\
    \ (0.00s)\n        tmpyry4t8ry_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__1 (0.00s)\n        tmpyry4t8ry_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__3\
    \ (0.00s)\n        tmpyry4t8ry_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__4 (0.00s)\n        tmpyry4t8ry_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpyry4t8ry_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__7 (0.00s)\n        tmpyry4t8ry_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpyry4t8ry_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpyry4t8ry_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpi9go1wzz_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpi9go1wzz_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] >= lst[i + 1] {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpjkwsq8cp_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst)-1; i++ {\n        if lst[i] > lst[i+1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpiqppdm4__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpiqppdm4__test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpi9go1wzz_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpi9go1wzz_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__0\
    \ (0.00s)\n        tmpyry4t8ry_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__1 (0.00s)\n        tmpyry4t8ry_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__3\
    \ (0.00s)\n        tmpyry4t8ry_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__4 (0.00s)\n        tmpyry4t8ry_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmpyry4t8ry_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__7 (0.00s)\n        tmpyry4t8ry_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpyry4t8ry_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpyry4t8ry_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst)-1; i++ {\n        if lst[i] > lst[i+1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpfu4c31v4_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpfu4c31v4_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpi9go1wzz_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpi9go1wzz_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpm0xsppr__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpm0xsppr__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] >=\
    \ lst[i + 1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmp19w14ley_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074970
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    for i\
    \ := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpi9go1wzz_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpi9go1wzz_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074970
