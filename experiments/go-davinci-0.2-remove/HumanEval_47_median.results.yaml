language: go_test.go
name: HumanEval_47_median
results:
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - max(l[0],\
    \ max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - max(l[0], max(l[1], max(l[2], max(l[3], l[4])))) - min(l[0], min(l[1],\
    \ min(l[2], min(l[3], l[4]))))) / 2\n    }\n    return 0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwcs6uqsr_test.go:20:45: undefined: max

    /tmp/tmpwcs6uqsr_test.go:20:74: undefined: min

    /tmp/tmpwcs6uqsr_test.go:23:52: undefined: max

    /tmp/tmpwcs6uqsr_test.go:23:92: undefined: min

    /tmp/tmpwcs6uqsr_test.go:26:59: undefined: max

    /tmp/tmpwcs6uqsr_test.go:26:110: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - max(l[0],\
    \ max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - max(l[0], max(l[1], max(l[2], max(l[3], l[4])))) - min(l[0], min(l[1],\
    \ min(l[2], min(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - max(l[0], max(l[1], max(l[2],\
    \ max(l[3], max(l[4], l[5]))))) - min(l[0], min(l[1], min(l[2], min(l[3], min(l[4],\
    \ l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6] - max(\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo7np8kb2_test.go:33:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: Implement this function.\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpblpqls5z_test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpblpqls5z_test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpblpqls5z_test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpblpqls5z_test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpblpqls5z_test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // Sort the list.\n    sort(l)\n\n    // Find the median.\n    if len(l) %\
    \ 2 == 0 {\n        // Even number of elements.\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    } else {\n        // Odd number of elements.\n   \
    \     return float64(l[len(l)/2])\n    }\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph98f3d9e_test.go:11:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: implement this function.\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp9ikkhzc4_test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp9ikkhzc4_test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmp9ikkhzc4_test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmp9ikkhzc4_test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp9ikkhzc4_test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: Implement me!\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpc_50df_4_test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpc_50df_4_test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpc_50df_4_test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpc_50df_4_test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpc_50df_4_test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2 == 0 {\n    \
    \    return float64(l[len(l)/2] + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp91v60r36_test.go:36: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp91v60r36_test.go:36:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp91v60r36_test.go:36: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - max(l[0],\
    \ max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - max(l[0], max(l[1], max(l[2], max(l[3], l[4])))) - min(l[0], min(l[1],\
    \ min(l[2], min(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - max(l[0], max(l[1], max(l[2],\
    \ max(l[3], max(l[4], l[5]))))) - min(l[0], min(l[1], min(l[2], min(l[3], min(l[4],\
    \ l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6] - max(\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo7np8kb2_test.go:33:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: Implement median function.\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpd16cjvr7_test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpd16cjvr7_test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpd16cjvr7_test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpd16cjvr7_test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpd16cjvr7_test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // Sort the list.\n    for i := 0; i < len(l); i++ {\n        for j := i +\
    \ 1; j < len(l); j++ {\n            if l[i] > l[j] {\n                l[i], l[j]\
    \ = l[j], l[i]\n            }\n        }\n    }\n\n    // Find the median.\n \
    \   if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2 - 1])\
    \ / 2\n    } else {\n        return float64(l[len(l)/2])\n    }\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return (float64(l[0]) +\
    \ float64(l[1])) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (float64(l[len(l)/2])\
    \ + float64(l[len(l)/2-1])) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\n\
    func TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmplgh68rrl_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmplgh68rrl_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmplgh68rrl_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - max(l[0],\
    \ max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - max(l[0], max(l[1], max(l[2], max(l[3], l[4])))) - min(l[0], min(l[1],\
    \ min(l[2], min(l[3], l[4]))))) / 2\n    }\n    return 0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwcs6uqsr_test.go:20:45: undefined: max

    /tmp/tmpwcs6uqsr_test.go:20:74: undefined: min

    /tmp/tmpwcs6uqsr_test.go:23:52: undefined: max

    /tmp/tmpwcs6uqsr_test.go:23:92: undefined: min

    /tmp/tmpwcs6uqsr_test.go:26:59: undefined: max

    /tmp/tmpwcs6uqsr_test.go:26:110: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073281
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - max(l[0],\
    \ max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - max(l[0], max(l[1], max(l[2], max(l[3], l[4])))) - min(l[0], min(l[1],\
    \ min(l[2], min(l[3], l[4]))))) / 2\n    }\n    return 0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwcs6uqsr_test.go:20:45: undefined: max

    /tmp/tmpwcs6uqsr_test.go:20:74: undefined: min

    /tmp/tmpwcs6uqsr_test.go:23:52: undefined: max

    /tmp/tmpwcs6uqsr_test.go:23:92: undefined: min

    /tmp/tmpwcs6uqsr_test.go:26:59: undefined: max

    /tmp/tmpwcs6uqsr_test.go:26:110: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073281
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    // Sort the list.\n    for i := 0; i < len(l); i++ {\n     \
    \   for j := i + 1; j < len(l); j++ {\n            if l[i] > l[j] {\n        \
    \        l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n    if len(l)\
    \ % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n\
    \    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073281
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    m\
    \ := len(l) / 2\n    if len(l) % 2 == 0 {\n        return float64(l[m-1] + l[m])\
    \ / 2\n    }\n    return float64(l[m])\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmper85uayv_test.go:20:45: undefined: max

    /tmp/tmper85uayv_test.go:20:74: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073281
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    return\
    \ 0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n\
    \     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwmjseip__test.go:20:45: undefined: max

    /tmp/tmpwmjseip__test.go:20:74: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpxdsx8gee_test.go:30: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpxdsx8gee_test.go:30:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpxdsx8gee_test.go:30: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpxdsx8gee_test.go:30:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpxdsx8gee_test.go:30: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - min(l[0],\
    \ min(l[1], min(l[2], l[3]))) - max(l[0], max(l[1], max(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - min(l[0], min(l[1], min(l[2], min(l[3], l[4])))) - max(l[0], max(l[1],\
    \ max(l[2], max(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - min(l[0], min(l[1], min(l[2],\
    \ min(l[3], min(l[4], l[5]))))) - max(l[0], max(l[1], max(l[2], max(l[3], max(l[4],\
    \ l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6] - min(\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmped1udehk_test.go:33:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1])\
    \ / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmps1mcojf9_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmps1mcojf9_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmps1mcojf9_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: implement this function.\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp9ikkhzc4_test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp9ikkhzc4_test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmp9ikkhzc4_test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmp9ikkhzc4_test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp9ikkhzc4_test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n \
    \       return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0]\
    \ + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n/2] + l[n/2-1])\
    \ / 2\n    }\n    return float64(l[n/2])\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpbi7a78is_test.go:43: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpbi7a78is_test.go:43:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpbi7a78is_test.go:43: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: Implement median function.\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpd16cjvr7_test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpd16cjvr7_test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpd16cjvr7_test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpd16cjvr7_test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpd16cjvr7_test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - min(l[0],\
    \ min(l[1], min(l[2], l[3]))) - max(l[0], max(l[1], max(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - min(l[0], min(l[1], min(l[2], min(l[3], l[4])))) - max(l[0], max(l[1],\
    \ max(l[2], max(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - min(l[0], min(l[1], min(l[2],\
    \ min(l[3], min(l[4], l[5]))))) - max(l[0], max(l[1], max(l[2], max(l[3], max(l[4],\
    \ l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6] - min(\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmped1udehk_test.go:33:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - max(l[0],\
    \ max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - max(l[0], max(l[1], max(l[2], max(l[3], l[4])))) - min(l[0], min(l[1],\
    \ min(l[2], min(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - max(l[0], max(l[1], max(l[2],\
    \ max(l[3], max(l[4], l[5]))))) - min(l[0], min(l[1], min(l[2], min(l[3], min(l[4],\
    \ l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6] - max(\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo7np8kb2_test.go:33:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - max(l[0],\
    \ max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - max(l[0], max(l[1], max(l[2], max(l[3], l[4])))) - min(l[0], min(l[1],\
    \ min(l[2], min(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - max(l[0], max(l[1], max(l[2],\
    \ max(l[3], max(l[4], l[5]))))) - min(l[0], min(l[1], min(l[2], min(l[3], min(l[4],\
    \ l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6] - max(\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo7np8kb2_test.go:33:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n \
    \       return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0]\
    \ + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n/2] + l[n/2-1])\
    \ / 2\n    }\n    return float64(l[n/2])\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpbi7a78is_test.go:43: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpbi7a78is_test.go:43:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpbi7a78is_test.go:43: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - min(l[0],\
    \ min(l[1], min(l[2], l[3]))) - max(l[0], max(l[1], max(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - min(l[0], min(l[1], min(l[2], min(l[3], l[4])))) - max(l[0], max(l[1],\
    \ max(l[2], max(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - min(l[0], min(l[1], min(l[2],\
    \ min(l[3], min(l[4], l[5]))))) - max(l[0], max(l[1], max(l[2], max(l[3], max(l[4],\
    \ l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6] - min(\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmped1udehk_test.go:33:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - min(l[0],\
    \ min(l[1], min(l[2], l[3]))) - max(l[0], max(l[1], max(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - min(l[0], min(l[1], min(l[2], min(l[3], l[4])))) - max(l[0], max(l[1],\
    \ max(l[2], max(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - min(l[0], min(l[1], min(l[2],\
    \ min(l[3], min(l[4], l[5]))))) - max(l[0], max(l[1], max(l[2], max(l[3], max(l[4],\
    \ l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6] - min(\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmped1udehk_test.go:33:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1])\
    \ / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmps1mcojf9_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmps1mcojf9_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmps1mcojf9_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   var m float64\n    if len(l) % 2 == 0 {\n        m = float64(l[len(l)/2] +\
    \ l[len(l)/2 - 1]) / 2\n    } else {\n        m = float64(l[len(l)/2])\n    }\n\
    \    return m\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpr9yoi7qd_test.go:36: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpr9yoi7qd_test.go:36:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpr9yoi7qd_test.go:36: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1])\
    \ / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmps1mcojf9_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmps1mcojf9_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmps1mcojf9_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpd5wf4jyr_test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpd5wf4jyr_test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpd5wf4jyr_test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpd5wf4jyr_test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpd5wf4jyr_test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // Sort the list.\n    for i := 0; i < len(l); i++ {\n        for j := i +\
    \ 1; j < len(l); j++ {\n            if l[i] > l[j] {\n                l[i], l[j]\
    \ = l[j], l[i]\n            }\n        }\n    }\n\n    // Return the median.\n\
    \    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2 - 1])\
    \ / 2\n    } else {\n        return float64(l[len(l)/2])\n    }\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073281
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // Sort the list.\n    for i := 0; i < len(l); i++ {\n        for j := i +\
    \ 1; j < len(l); j++ {\n            if l[i] > l[j] {\n                l[i], l[j]\
    \ = l[j], l[i]\n            }\n        }\n    }\n\n    // Return the median.\n\
    \    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2 - 1])\
    \ / 2\n    } else {\n        return float64(l[len(l)/2])\n    }\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2 == 0 {\n    \
    \    return float64(l[len(l)/2] + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp91v60r36_test.go:36: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp91v60r36_test.go:36:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp91v60r36_test.go:36: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n % 2 == 0 {\n\
    \        return float64(l[n/2] + l[n/2 - 1]) / 2\n    }\n    return float64(l[n/2])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpa6s1_awn_test.go:37: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpa6s1_awn_test.go:37:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpa6s1_awn_test.go:37: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   var m float64\n    if len(l) % 2 == 0 {\n        m = float64(l[len(l)/2] +\
    \ l[len(l)/2 - 1]) / 2\n    } else {\n        m = float64(l[len(l)/2])\n    }\n\
    \    return m\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpr9yoi7qd_test.go:36: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpr9yoi7qd_test.go:36:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpr9yoi7qd_test.go:36: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2 == 0 {\n    \
    \    return float64(l[len(l)/2] + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp91v60r36_test.go:36: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp91v60r36_test.go:36:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp91v60r36_test.go:36: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - min(l[0],\
    \ min(l[1], min(l[2], l[3]))) - max(l[0], max(l[1], max(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - min(l[0], min(l[1], min(l[2], min(l[3], l[4])))) - max(l[0], max(l[1],\
    \ max(l[2], max(l[3], l[4]))))) / 2\n    }\n    return 0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp03b2brnm_test.go:20:45: undefined: min

    /tmp/tmp03b2brnm_test.go:20:74: undefined: max

    /tmp/tmp03b2brnm_test.go:23:52: undefined: min

    /tmp/tmp03b2brnm_test.go:23:92: undefined: max

    /tmp/tmp03b2brnm_test.go:26:59: undefined: min

    /tmp/tmp03b2brnm_test.go:26:110: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073281
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - max(l[0],\
    \ max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - max(l[0], max(l[1], max(l[2], max(l[3], l[4])))) - min(l[0], min(l[1],\
    \ min(l[2], min(l[3], l[4]))))) / 2\n    }\n    return 0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwcs6uqsr_test.go:20:45: undefined: max

    /tmp/tmpwcs6uqsr_test.go:20:74: undefined: min

    /tmp/tmpwcs6uqsr_test.go:23:52: undefined: max

    /tmp/tmpwcs6uqsr_test.go:23:92: undefined: min

    /tmp/tmpwcs6uqsr_test.go:26:59: undefined: max

    /tmp/tmpwcs6uqsr_test.go:26:110: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2 == 0 {\n    \
    \    return float64(l[len(l)/2] + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp91v60r36_test.go:36: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp91v60r36_test.go:36:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp91v60r36_test.go:36: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1])\
    \ / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmps1mcojf9_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmps1mcojf9_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmps1mcojf9_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // Sort the list.\n    for i := 0; i < len(l) - 1; i++ {\n        for j :=\
    \ i + 1; j < len(l); j++ {\n            if l[i] > l[j] {\n                l[i],\
    \ l[j] = l[j], l[i]\n            }\n        }\n    }\n\n    // Find the median.\n\
    \    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2\
    \ - 1]) / 2\n    } else {\n        return float64(l[len(l) / 2])\n    }\n}\n\n\
    func TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073282
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: Write median function.\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpio9kxq1t_test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpio9kxq1t_test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpio9kxq1t_test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpio9kxq1t_test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpio9kxq1t_test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073282
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1])\
    \ / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmps1mcojf9_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmps1mcojf9_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmps1mcojf9_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2 - 1]) / 2\n\
    \    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9izwg99e_test.go:20:45: undefined: max

    /tmp/tmp9izwg99e_test.go:20:74: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073283
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - max(l[0],\
    \ max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - max(l[0], max(l[1], max(l[2], max(l[3], l[4])))) - min(l[0], min(l[1],\
    \ min(l[2], min(l[3], l[4]))))) / 2\n    }\n    return 0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwcs6uqsr_test.go:20:45: undefined: max

    /tmp/tmpwcs6uqsr_test.go:20:74: undefined: min

    /tmp/tmpwcs6uqsr_test.go:23:52: undefined: max

    /tmp/tmpwcs6uqsr_test.go:23:92: undefined: min

    /tmp/tmpwcs6uqsr_test.go:26:59: undefined: max

    /tmp/tmpwcs6uqsr_test.go:26:110: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: implement this function.\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp9ikkhzc4_test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp9ikkhzc4_test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmp9ikkhzc4_test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmp9ikkhzc4_test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp9ikkhzc4_test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - max(l[0],\
    \ max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - max(l[0], max(l[1], max(l[2], max(l[3], l[4])))) - min(l[0], min(l[1],\
    \ min(l[2], min(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - max(l[0], max(l[1], max(l[2],\
    \ max(l[3], max(l[4], l[5]))))) - min(l[0], min(l[1], min(l[2], min(l[3], min(l[4],\
    \ l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6] - max(\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo7np8kb2_test.go:33:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - max(l[0],\
    \ max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3])))) / 2\n \
    \   }\n    return 0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkz362hc6_test.go:20:45: undefined: max

    /tmp/tmpkz362hc6_test.go:20:74: undefined: min

    /tmp/tmpkz362hc6_test.go:23:52: undefined: max

    /tmp/tmpkz362hc6_test.go:23:92: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073283
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // Sort the list.\n    for i := 0; i < len(l); i++ {\n        for j := i +\
    \ 1; j < len(l); j++ {\n            if l[i] > l[j] {\n                l[i], l[j]\
    \ = l[j], l[i]\n            }\n        }\n    }\n\n    // Find the median.\n \
    \   if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2 - 1])\
    \ / 2\n    } else {\n        return float64(l[len(l)/2])\n    }\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2 == 0 {\n    \
    \    return float64(l[len(l)/2] + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp91v60r36_test.go:36: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp91v60r36_test.go:36:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp91v60r36_test.go:36: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - min(l[0],\
    \ min(l[1], min(l[2], l[3]))) - max(l[0], max(l[1], max(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - min(l[0], min(l[1], min(l[2], min(l[3], l[4])))) - max(l[0], max(l[1],\
    \ max(l[2], max(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - min(l[0], min(l[1], min(l[2],\
    \ min(l[3], min(l[4], l[5]))))) - max(l[0], max(l[1], max(l[2], max(l[3], max(l[4],\
    \ l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6] - min(\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmped1udehk_test.go:33:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n \
    \       return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0]\
    \ + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n/2] + l[n/2-1])\
    \ / 2\n    }\n    return float64(l[n/2])\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpbi7a78is_test.go:43: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpbi7a78is_test.go:43:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpbi7a78is_test.go:43: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - max(l[0],\
    \ max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - max(l[0], max(l[1], max(l[2], max(l[3], l[4])))) - min(l[0], min(l[1],\
    \ min(l[2], min(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - max(l[0], max(l[1], max(l[2],\
    \ max(l[3], max(l[4], l[5]))))) - min(l[0], min(l[1], min(l[2], min(l[3], min(l[4],\
    \ l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6] - max(\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo7np8kb2_test.go:33:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - min(l[0],\
    \ min(l[1], min(l[2], l[3]))) - max(l[0], max(l[1], max(l[2], l[3])))) / 2\n \
    \   }\n    return 0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxnnuh2j7_test.go:20:45: undefined: min

    /tmp/tmpxnnuh2j7_test.go:20:74: undefined: max

    /tmp/tmpxnnuh2j7_test.go:23:52: undefined: min

    /tmp/tmpxnnuh2j7_test.go:23:92: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073283
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - max(l[0],\
    \ max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - max(l[0], max(l[1], max(l[2], max(l[3], l[4])))) - min(l[0], min(l[1],\
    \ min(l[2], min(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - max(l[0], max(l[1], max(l[2],\
    \ max(l[3], max(l[4], l[5]))))) - min(l[0], min(l[1], min(l[2], min(l[3], min(l[4],\
    \ l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6] - max(\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo7np8kb2_test.go:33:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpd5wf4jyr_test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpd5wf4jyr_test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpd5wf4jyr_test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpd5wf4jyr_test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpd5wf4jyr_test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2 == 0 {\n    \
    \    return float64(l[len(l)/2] + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp91v60r36_test.go:36: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp91v60r36_test.go:36:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp91v60r36_test.go:36: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        if l[0] > l[1] {\n            l[0],\
    \ l[1] = l[1], l[0]\n        }\n        if l[1] > l[2] {\n            l[1], l[2]\
    \ = l[2], l[1]\n        }\n        if l[0] > l[1] {\n            l[0], l[1] =\
    \ l[1], l[0]\n        }\n        return float64(l[1])\n    }\n    if len(l) ==\
    \ 4 {\n        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n       \
    \ }\n        if l[2] > l[3] {\n            l[2], l[3] = l[3], l[2]\n        }\n\
    \        if l[0] > l[2] {\n            l[0], l[2] = l[2], l[0]\n        }\n  \
    \      if l[1] > l[3] {\n            l[1], l[3] = l[3], l[1]\n        }\n    \
    \    if l[1] > l[2] {\n            l[1], l[2] = l[2], l[1]\n        }\n      \
    \  return float64(l[1] + l[2]) / 2\n    }\n    if len(l) == 5 {\n        if l[0]\
    \ > l[1] {\n            l[0], l[1] = l[1], l[0]\n        }\n        if l[3] >\
    \ l[4] {\n            l[3], l[4] = l[4], l[3]\n        }\n        if l[0] > l[3]\
    \ {\n            l[0], l[3] = l[3], l\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr2p2xmnu_test.go:58:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073282
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - max(l[0],\
    \ max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3])))) / 2\n \
    \   }\n    return 0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkz362hc6_test.go:20:45: undefined: max

    /tmp/tmpkz362hc6_test.go:20:74: undefined: min

    /tmp/tmpkz362hc6_test.go:23:52: undefined: max

    /tmp/tmpkz362hc6_test.go:23:92: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073283
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n\n    // Sort the list.\n    for\
    \ i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n     \
    \       if l[i] > l[j] {\n                l[i], l[j] = l[j], l[i]\n          \
    \  }\n        }\n    }\n\n    // Find the median.\n    if len(l) % 2 == 0 {\n\
    \        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    } else {\n\
    \        return float64(l[len(l) / 2])\n    }\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073283
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - min(l[0],\
    \ min(l[1], min(l[2], l[3]))) - max(l[0], max(l[1], max(l[2], l[3])))) / 2\n \
    \   }\n    return 0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxnnuh2j7_test.go:20:45: undefined: min

    /tmp/tmpxnnuh2j7_test.go:20:74: undefined: max

    /tmp/tmpxnnuh2j7_test.go:23:52: undefined: min

    /tmp/tmpxnnuh2j7_test.go:23:92: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073283
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - max(l[0],\
    \ max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - max(l[0], max(l[1], max(l[2], max(l[3], l[4])))) - min(l[0], min(l[1],\
    \ min(l[2], min(l[3], l[4]))))) / 2\n    }\n    return 0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwcs6uqsr_test.go:20:45: undefined: max

    /tmp/tmpwcs6uqsr_test.go:20:74: undefined: min

    /tmp/tmpwcs6uqsr_test.go:23:52: undefined: max

    /tmp/tmpwcs6uqsr_test.go:23:92: undefined: min

    /tmp/tmpwcs6uqsr_test.go:26:59: undefined: max

    /tmp/tmpwcs6uqsr_test.go:26:110: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073281
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // Sort the list.\n    for i := 0; i < len(l); i++ {\n        for j := i +\
    \ 1; j < len(l); j++ {\n            if l[i] > l[j] {\n                l[i], l[j]\
    \ = l[j], l[i]\n            }\n        }\n    }\n\n    // Find the median.\n \
    \   if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2 - 1])\
    \ / 2\n    } else {\n        return float64(l[len(l)/2])\n    }\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        if l[0] > l[1] {\n            l[0],\
    \ l[1] = l[1], l[0]\n        }\n        if l[1] > l[2] {\n            l[1], l[2]\
    \ = l[2], l[1]\n        }\n        if l[0] > l[1] {\n            l[0], l[1] =\
    \ l[1], l[0]\n        }\n        return float64(l[1])\n    }\n    if len(l) %\
    \ 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1]) / 2\n    }\n \
    \   return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpsblz3uf0_test.go:54: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpsblz3uf0_test.go:54:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpsblz3uf0_test.go:54: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2 == 0 {\n    \
    \    return float64(l[len(l)/2] + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp91v60r36_test.go:36: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp91v60r36_test.go:36:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp91v60r36_test.go:36: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2 == 0 {\n    \
    \    return float64(l[len(l)/2] + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp91v60r36_test.go:36: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp91v60r36_test.go:36:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp91v60r36_test.go:36: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpd5wf4jyr_test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpd5wf4jyr_test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpd5wf4jyr_test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpd5wf4jyr_test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpd5wf4jyr_test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2 == 0 {\n    \
    \    return float64(l[len(l)/2] + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp91v60r36_test.go:36: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp91v60r36_test.go:36:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp91v60r36_test.go:36: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1])\
    \ / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmps1mcojf9_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmps1mcojf9_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmps1mcojf9_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   var m float64\n    // TODO: Implement median.\n    return m\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp0qetlyt__test.go:32: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp0qetlyt__test.go:32:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmp0qetlyt__test.go:32: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmp0qetlyt__test.go:32:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp0qetlyt__test.go:32: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: Implement this function.\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpblpqls5z_test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpblpqls5z_test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpblpqls5z_test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpblpqls5z_test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpblpqls5z_test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1]) / 2\n\
    \    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp60w8p77i_test.go:20:45: undefined: min

    /tmp/tmp60w8p77i_test.go:20:74: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073283
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        if l[0] < l[1] {\n            if l[1]\
    \ < l[2] {\n                return float64(l[1])\n            } else if l[0] <\
    \ l[2] {\n                return float64(l[2])\n            } else {\n       \
    \         return float64(l[0])\n            }\n        } else {\n            if\
    \ l[0] < l[2] {\n                return float64(l[0])\n            } else if l[1]\
    \ < l[2] {\n                return float64(l[2])\n            } else {\n     \
    \           return float64(l[1])\n            }\n        }\n    }\n    if len(l)\
    \ % 2 == 0 {\n        return float64(l[len(l)/2-1] + l[len(l)/2]) / 2\n    } else\
    \ {\n        return float64(l[len(l)/2])\n    }\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp57rvpklp_test.go:62: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp57rvpklp_test.go:62:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp57rvpklp_test.go:62: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    // Sort the list.\n    for i := 0; i < len(l) - 1; i++ {\n \
    \       for j := i + 1; j < len(l); j++ {\n            if l[i] > l[j] {\n    \
    \            l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n    //\
    \ Return median.\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) /\
    \ 2] + l[len(l) / 2 - 1]) / 2\n    } else {\n        return float64(l[len(l) /\
    \ 2])\n    }\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073284
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: implement me!\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp_r4pp84n_test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp_r4pp84n_test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmp_r4pp84n_test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmp_r4pp84n_test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp_r4pp84n_test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: implement\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpyyij4pxa_test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpyyij4pxa_test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpyyij4pxa_test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpyyij4pxa_test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpyyij4pxa_test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n\n    if len(l) == 1 {\n      \
    \  return float64(l[0])\n    }\n\n    if len(l) == 2 {\n        return float64(l[0]\
    \ + l[1]) / 2\n    }\n\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2 - 1]) / 2\n    }\n\n    return float64(l[len(l)/2])\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpw8ax2h8b_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpw8ax2h8b_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpw8ax2h8b_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: Implement this function.\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpblpqls5z_test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpblpqls5z_test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpblpqls5z_test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpblpqls5z_test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpblpqls5z_test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: Implement this function.\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpblpqls5z_test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpblpqls5z_test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpblpqls5z_test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpblpqls5z_test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpblpqls5z_test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - min(l[0],\
    \ min(l[1], min(l[2], l[3]))) - max(l[0], max(l[1], max(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - min(l[0], min(l[1], min(l[2], min(l[3], l[4])))) - max(l[0], max(l[1],\
    \ max(l[2], max(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - min(l[0], min(l[1], min(l[2],\
    \ min(l[3], min(l[4], l[5]))))) - max(l[0], max(l[1], max(l[2], max(l[3], max(l[4],\
    \ l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6] - min(\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmped1udehk_test.go:33:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n \
    \       return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0]\
    \ + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n/2-1] + l[n/2])\
    \ / 2\n    }\n    return float64(l[n/2])\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpovj_d6sb_test.go:43: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpovj_d6sb_test.go:43:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpovj_d6sb_test.go:43: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - min(l[0],\
    \ min(l[1], min(l[2], l[3]))) - max(l[0], max(l[1], max(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - min(l[0], min(l[1], min(l[2], min(l[3], l[4])))) - max(l[0], max(l[1],\
    \ max(l[2], max(l[3], l[4]))))) / 2\n    }\n    return 0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp03b2brnm_test.go:20:45: undefined: min

    /tmp/tmp03b2brnm_test.go:20:74: undefined: max

    /tmp/tmp03b2brnm_test.go:23:52: undefined: min

    /tmp/tmp03b2brnm_test.go:23:92: undefined: max

    /tmp/tmp03b2brnm_test.go:26:59: undefined: min

    /tmp/tmp03b2brnm_test.go:26:110: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2 == 0 {\n    \
    \    return (float64(l[len(l)/2]) + float64(l[len(l)/2-1])) / 2\n    }\n    return\
    \ float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpbndasodl_test.go:36: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpbndasodl_test.go:36:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpbndasodl_test.go:36: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2 == 0 {\n    \
    \    return (float64(l[len(l)/2]) + float64(l[len(l)/2-1])) / 2\n    }\n    return\
    \ float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpbndasodl_test.go:36: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpbndasodl_test.go:36:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpbndasodl_test.go:36: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - min(l[0],\
    \ min(l[1], min(l[2], l[3]))) - max(l[0], max(l[1], max(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - min(l[0], min(l[1], min(l[2], min(l[3], l[4])))) - max(l[0], max(l[1],\
    \ max(l[2], max(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - min(l[0], min(l[1], min(l[2],\
    \ min(l[3], min(l[4], l[5]))))) - max(l[0], max(l[1], max(l[2], max(l[3], max(l[4],\
    \ l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6] - min(\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmped1udehk_test.go:33:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - min(l[0],\
    \ min(l[1], min(l[2], l[3]))) - max(l[0], max(l[1], max(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - min(l[0], min(l[1], min(l[2], min(l[3], l[4])))) - max(l[0], max(l[1],\
    \ max(l[2], max(l[3], l[4]))))) / 2\n    }\n    return 0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp03b2brnm_test.go:20:45: undefined: min

    /tmp/tmp03b2brnm_test.go:20:74: undefined: max

    /tmp/tmp03b2brnm_test.go:23:52: undefined: min

    /tmp/tmp03b2brnm_test.go:23:92: undefined: max

    /tmp/tmp03b2brnm_test.go:26:59: undefined: min

    /tmp/tmp03b2brnm_test.go:26:110: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - min(l[0],\
    \ min(l[1], min(l[2], l[3]))) - max(l[0], max(l[1], max(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - min(l[0], min(l[1], min(l[2], min(l[3], l[4])))) - max(l[0], max(l[1],\
    \ max(l[2], max(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - min(l[0], min(l[1], min(l[2],\
    \ min(l[3], min(l[4], l[5]))))) - max(l[0], max(l[1], max(l[2], max(l[3], max(l[4],\
    \ l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6] - min(\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmped1udehk_test.go:33:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return (float64(l[0]) +\
    \ float64(l[1])) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (float64(l[len(l)/2])\
    \ + float64(l[len(l)/2-1])) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\n\
    func TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmplgh68rrl_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmplgh68rrl_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmplgh68rrl_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2 == 0 {\n    \
    \    return (float64(l[len(l)/2]) + float64(l[len(l)/2-1])) / 2\n    }\n    return\
    \ float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpbndasodl_test.go:36: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpbndasodl_test.go:36:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpbndasodl_test.go:36: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - min(l[0],\
    \ min(l[1], min(l[2], l[3]))) - max(l[0], max(l[1], max(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - min(l[0], min(l[1], min(l[2], min(l[3], l[4])))) - max(l[0], max(l[1],\
    \ max(l[2], max(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - min(l[0], min(l[1], min(l[2],\
    \ min(l[3], min(l[4], l[5]))))) - max(l[0], max(l[1], max(l[2], max(l[3], max(l[4],\
    \ l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6] - min(\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmped1udehk_test.go:33:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - min(l[0],\
    \ min(l[1], min(l[2], l[3]))) - max(l[0], max(l[1], max(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - min(l[0], min(l[1], min(l[2], min(l[3], l[4])))) - max(l[0], max(l[1],\
    \ max(l[2], max(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - min(l[0], min(l[1], min(l[2],\
    \ min(l[3], min(l[4], l[5]))))) - max(l[0], max(l[1], max(l[2], max(l[3], max(l[4],\
    \ l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6] - min(\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmped1udehk_test.go:33:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - min(l[0],\
    \ min(l[1], min(l[2], l[3]))) - max(l[0], max(l[1], max(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - min(l[0], min(l[1], min(l[2], min(l[3], l[4])))) - max(l[0], max(l[1],\
    \ max(l[2], max(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - min(l[0], min(l[1], min(l[2],\
    \ min(l[3], min(l[4], l[5]))))) - max(l[0], max(l[1], max(l[2], max(l[3], max(l[4],\
    \ l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6] - min(\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmped1udehk_test.go:33:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: implement median function\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp4xixmhz__test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp4xixmhz__test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmp4xixmhz__test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmp4xixmhz__test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp4xixmhz__test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - max(l[0],\
    \ max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3])))) / 2\n \
    \   }\n    return 0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkz362hc6_test.go:20:45: undefined: max

    /tmp/tmpkz362hc6_test.go:20:74: undefined: min

    /tmp/tmpkz362hc6_test.go:23:52: undefined: max

    /tmp/tmpkz362hc6_test.go:23:92: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073283
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // Sort the list.\n    for i := 0; i < len(l); i++ {\n        for j := i +\
    \ 1; j < len(l); j++ {\n            if l[i] > l[j] {\n                l[i], l[j]\
    \ = l[j], l[i]\n            }\n        }\n    }\n\n    // Find the median.\n \
    \   if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2 - 1])\
    \ / 2\n    } else {\n        return float64(l[len(l)/2])\n    }\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpyfyp2tvv_test.go:39: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpyfyp2tvv_test.go:39:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpyfyp2tvv_test.go:39: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - max(l[0],\
    \ max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - max(l[0], max(l[1], max(l[2], max(l[3], l[4])))) - min(l[0], min(l[1],\
    \ min(l[2], min(l[3], l[4]))))) / 2\n    }\n    return 0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwcs6uqsr_test.go:20:45: undefined: max

    /tmp/tmpwcs6uqsr_test.go:20:74: undefined: min

    /tmp/tmpwcs6uqsr_test.go:23:52: undefined: max

    /tmp/tmpwcs6uqsr_test.go:23:92: undefined: min

    /tmp/tmpwcs6uqsr_test.go:26:59: undefined: max

    /tmp/tmpwcs6uqsr_test.go:26:110: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: Implement me!\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpc_50df_4_test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpc_50df_4_test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpc_50df_4_test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpc_50df_4_test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpc_50df_4_test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1])\
    \ / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmps1mcojf9_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmps1mcojf9_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmps1mcojf9_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: implement me!\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp_r4pp84n_test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp_r4pp84n_test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmp_r4pp84n_test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmp_r4pp84n_test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp_r4pp84n_test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - min(l[0],\
    \ min(l[1], min(l[2], l[3]))) - max(l[0], max(l[1], max(l[2], l[3])))) / 2\n \
    \   }\n    return 0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxnnuh2j7_test.go:20:45: undefined: min

    /tmp/tmpxnnuh2j7_test.go:20:74: undefined: max

    /tmp/tmpxnnuh2j7_test.go:23:52: undefined: min

    /tmp/tmpxnnuh2j7_test.go:23:92: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073283
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - max(l[0],\
    \ max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - max(l[0], max(l[1], max(l[2], max(l[3], l[4])))) - min(l[0], min(l[1],\
    \ min(l[2], min(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - max(l[0], max(l[1], max(l[2],\
    \ max(l[3], max(l[4], l[5]))))) - min(l[0], min(l[1], min(l[2], min(l[3], min(l[4],\
    \ l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6] - max(\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo7np8kb2_test.go:33:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: Implement.\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpg39q9wao_test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpg39q9wao_test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpg39q9wao_test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpg39q9wao_test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpg39q9wao_test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n\n    if len(l) % 2 == 0 {\n  \
    \      return float64(l[len(l)/2] + l[len(l)/2 - 1]) / 2\n    }\n\n    return\
    \ float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpfxmpfcb2_test.go:38: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpfxmpfcb2_test.go:38:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpfxmpfcb2_test.go:38: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2 == 0 {\n    \
    \    return float64(l[len(l)/2] + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp91v60r36_test.go:36: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp91v60r36_test.go:36:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp91v60r36_test.go:36: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - min(l[0],\
    \ min(l[1], min(l[2], l[3]))) - max(l[0], max(l[1], max(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - min(l[0], min(l[1], min(l[2], min(l[3], l[4])))) - max(l[0], max(l[1],\
    \ max(l[2], max(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - min(l[0], min(l[1], min(l[2],\
    \ min(l[3], min(l[4], l[5]))))) - max(l[0], max(l[1], max(l[2], max(l[3], max(l[4],\
    \ l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6] - min(\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmped1udehk_test.go:33:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   var m float64\n    if len(l) % 2 == 0 {\n        m = float64(l[len(l)/2] +\
    \ l[len(l)/2 - 1]) / 2\n    } else {\n        m = float64(l[len(l)/2])\n    }\n\
    \    return m\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpr9yoi7qd_test.go:36: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpr9yoi7qd_test.go:36:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpr9yoi7qd_test.go:36: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2 == 0 {\n    \
    \    return float64(l[len(l)/2-1]+l[len(l)/2]) / 2\n    }\n    return float64(l[len(l)/2])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp4nev_6_4_test.go:36: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp4nev_6_4_test.go:36:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp4nev_6_4_test.go:36: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   var m float64\n    if len(l) % 2 == 0 {\n        m = float64(l[len(l)/2] +\
    \ l[len(l)/2 - 1]) / 2\n    } else {\n        m = float64(l[len(l)/2])\n    }\n\
    \    return m\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpr9yoi7qd_test.go:36: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpr9yoi7qd_test.go:36:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpr9yoi7qd_test.go:36: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpd5wf4jyr_test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpd5wf4jyr_test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpd5wf4jyr_test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpd5wf4jyr_test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpd5wf4jyr_test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // Sort the list.\n    for i := 0; i < len(l); i++ {\n        for j := i +\
    \ 1; j < len(l); j++ {\n            if l[i] > l[j] {\n                l[i], l[j]\
    \ = l[j], l[i]\n            }\n        }\n    }\n\n    // Return the median.\n\
    \    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2 - 1])\
    \ / 2\n    } else {\n        return float64(l[len(l)/2])\n    }\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073281
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - max(l[0],\
    \ max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - max(l[0], max(l[1], max(l[2], max(l[3], l[4])))) - min(l[0], min(l[1],\
    \ min(l[2], min(l[3], l[4]))))) / 2\n    }\n    return 0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwcs6uqsr_test.go:20:45: undefined: max

    /tmp/tmpwcs6uqsr_test.go:20:74: undefined: min

    /tmp/tmpwcs6uqsr_test.go:23:52: undefined: max

    /tmp/tmpwcs6uqsr_test.go:23:92: undefined: min

    /tmp/tmpwcs6uqsr_test.go:26:59: undefined: max

    /tmp/tmpwcs6uqsr_test.go:26:110: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: implement\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpyyij4pxa_test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpyyij4pxa_test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpyyij4pxa_test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpyyij4pxa_test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpyyij4pxa_test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1])\
    \ / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmps1mcojf9_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmps1mcojf9_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmps1mcojf9_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1])\
    \ / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmps1mcojf9_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmps1mcojf9_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmps1mcojf9_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   var m float64\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n\
    \    if n % 2 == 0 {\n        m = float64(l[n/2] + l[n/2-1]) / 2\n    } else {\n\
    \        m = float64(l[n/2])\n    }\n    return m\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpjy62pigy_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpjy62pigy_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpjy62pigy_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n \
    \       return float64(l[0])\n    }\n    if n % 2 == 0 {\n        return (float64(l[n/2])\
    \ + float64(l[n/2-1])) / 2\n    }\n    return float64(l[n/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpoj40_z7n_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpoj40_z7n_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpoj40_z7n_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // Sort the list.\n    for i := 0; i < len(l); i++ {\n        for j := i +\
    \ 1; j < len(l); j++ {\n            if l[i] > l[j] {\n                l[i], l[j]\
    \ = l[j], l[i]\n            }\n        }\n    }\n\n    // Find the median.\n \
    \   if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2 - 1])\
    \ / 2\n    } else {\n        return float64(l[len(l)/2])\n    }\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073281
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // Sort the list.\n    for i := 1; i < len(l); i++ {\n        for j := i;\
    \ j > 0 && l[j-1] > l[j]; j-- {\n            l[j-1], l[j] = l[j], l[j-1]\n   \
    \     }\n    }\n\n    // Return the median.\n    if len(l) % 2 == 0 {\n      \
    \  return float64(l[len(l)/2-1] + l[len(l)/2]) / 2\n    } else {\n        return\
    \ float64(l[len(l)/2])\n    }\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073284
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - min(l[0],\
    \ min(l[1], min(l[2], l[3]))) - max(l[0], max(l[1], max(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - min(l[0], min(l[1], min(l[2], min(l[3], l[4])))) - max(l[0], max(l[1],\
    \ max(l[2], max(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - min(l[0], min(l[1], min(l[2],\
    \ min(l[3], min(l[4], l[5]))))) - max(l[0], max(l[1], max(l[2], max(l[3], max(l[4],\
    \ l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6] - min(\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmped1udehk_test.go:33:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        if l[0] < l[1] {\n            if l[1]\
    \ < l[2] {\n                return float64(l[1])\n            } else if l[0] <\
    \ l[2] {\n                return float64(l[2])\n            } else {\n       \
    \         return float64(l[0])\n            }\n        } else {\n            if\
    \ l[0] < l[2] {\n                return float64(l[0])\n            } else if l[1]\
    \ < l[2] {\n                return float64(l[2])\n            } else {\n     \
    \           return float64(l[1])\n            }\n        }\n    }\n    if len(l)\
    \ % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2 - 1]) / 2\n    }\
    \ else {\n        return float64(l[len(l)/2])\n    }\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptec2bd1__test.go:62: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptec2bd1__test.go:62:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptec2bd1__test.go:62: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: implement this function.\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp9ikkhzc4_test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp9ikkhzc4_test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmp9ikkhzc4_test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmp9ikkhzc4_test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp9ikkhzc4_test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1])\
    \ / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmps1mcojf9_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmps1mcojf9_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmps1mcojf9_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpyfyp2tvv_test.go:39: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpyfyp2tvv_test.go:39:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpyfyp2tvv_test.go:39: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - max(l[0],\
    \ max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - max(l[0], max(l[1], max(l[2], max(l[3], l[4])))) - min(l[0], min(l[1],\
    \ min(l[2], min(l[3], l[4]))))) / 2\n    }\n    return 0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwcs6uqsr_test.go:20:45: undefined: max

    /tmp/tmpwcs6uqsr_test.go:20:74: undefined: min

    /tmp/tmpwcs6uqsr_test.go:23:52: undefined: max

    /tmp/tmpwcs6uqsr_test.go:23:92: undefined: min

    /tmp/tmpwcs6uqsr_test.go:26:59: undefined: max

    /tmp/tmpwcs6uqsr_test.go:26:110: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: implement this function.\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp9ikkhzc4_test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp9ikkhzc4_test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmp9ikkhzc4_test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmp9ikkhzc4_test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp9ikkhzc4_test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n \
    \       return float64(l[0])\n    }\n    if n % 2 == 0 {\n        return float64(l[n/2]\
    \ + l[n/2 - 1]) / 2\n    }\n    return float64(l[n/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpagbpmkts_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpagbpmkts_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpagbpmkts_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - min(l[0],\
    \ min(l[1], min(l[2], l[3]))) - max(l[0], max(l[1], max(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - min(l[0], min(l[1], min(l[2], min(l[3], l[4])))) - max(l[0], max(l[1],\
    \ max(l[2], max(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - min(l[0], min(l[1], min(l[2],\
    \ min(l[3], min(l[4], l[5]))))) - max(l[0], max(l[1], max(l[2], max(l[3], max(l[4],\
    \ l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6] - min(\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmped1udehk_test.go:33:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2 == 0 {\n    \
    \    return float64(l[len(l)/2-1]+l[len(l)/2])/2\n    }\n    return float64(l[len(l)/2])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp18d019c1_test.go:36: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp18d019c1_test.go:36:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp18d019c1_test.go:36: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - max(l[0],\
    \ max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3])))) / 2\n \
    \   }\n    return 0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkz362hc6_test.go:20:45: undefined: max

    /tmp/tmpkz362hc6_test.go:20:74: undefined: min

    /tmp/tmpkz362hc6_test.go:23:52: undefined: max

    /tmp/tmpkz362hc6_test.go:23:92: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073283
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - max(l[0],\
    \ max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - max(l[0], max(l[1], max(l[2], max(l[3], l[4])))) - min(l[0], min(l[1],\
    \ min(l[2], min(l[3], l[4]))))) / 2\n    }\n    return 0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwcs6uqsr_test.go:20:45: undefined: max

    /tmp/tmpwcs6uqsr_test.go:20:74: undefined: min

    /tmp/tmpwcs6uqsr_test.go:23:52: undefined: max

    /tmp/tmpwcs6uqsr_test.go:23:92: undefined: min

    /tmp/tmpwcs6uqsr_test.go:26:59: undefined: max

    /tmp/tmpwcs6uqsr_test.go:26:110: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: Implement.\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpg39q9wao_test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpg39q9wao_test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpg39q9wao_test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpg39q9wao_test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpg39q9wao_test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    var m float64\n    if len(l) % 2 == 0 {\n        m = float64(l[len(l)/2]\
    \ + l[len(l)/2 - 1]) / 2\n    } else {\n        m = float64(l[len(l)/2])\n   \
    \ }\n    return m\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpv40sidwl_test.go:45: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpv40sidwl_test.go:45:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpv40sidwl_test.go:45: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - max(l[0],\
    \ max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - max(l[0], max(l[1], max(l[2], max(l[3], l[4])))) - min(l[0], min(l[1],\
    \ min(l[2], min(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - max(l[0], max(l[1], max(l[2],\
    \ max(l[3], max(l[4], l[5]))))) - min(l[0], min(l[1], min(l[2], min(l[3], min(l[4],\
    \ l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6] - max(\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo7np8kb2_test.go:33:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n % 2 == 0 {\n\
    \        return (float64(l[n/2-1]) + float64(l[n/2])) / 2\n    }\n    return float64(l[n/2])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpnoerp7_6_test.go:37: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpnoerp7_6_test.go:37:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpnoerp7_6_test.go:37: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   var m float64\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n\
    \    if n % 2 == 0 {\n        m = float64(l[n/2] + l[n/2-1]) / 2\n    } else {\n\
    \        m = float64(l[n/2])\n    }\n    return m\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpjy62pigy_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpjy62pigy_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpjy62pigy_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - max(l[0],\
    \ max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - max(l[0], max(l[1], max(l[2], max(l[3], l[4])))) - min(l[0], min(l[1],\
    \ min(l[2], min(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n        return\
    \ float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - max(l[0], max(l[1], max(l[2],\
    \ max(l[3], max(l[4], l[5]))))) - min(l[0], min(l[1], min(l[2], min(l[3], min(l[4],\
    \ l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1]\
    \ + l[2] + l[3] + l[4] + l[5] + l[6] - max(\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo7np8kb2_test.go:33:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2 == 0 {\n    \
    \    return float64(l[len(l)/2] + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp91v60r36_test.go:36: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp91v60r36_test.go:36:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp91v60r36_test.go:36: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: implement this function.\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp9ikkhzc4_test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp9ikkhzc4_test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmp9ikkhzc4_test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmp9ikkhzc4_test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp9ikkhzc4_test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: implement this function.\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp9ikkhzc4_test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp9ikkhzc4_test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmp9ikkhzc4_test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmp9ikkhzc4_test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp9ikkhzc4_test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - max(l[0],\
    \ max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3])))) / 2\n \
    \   }\n    return 0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkz362hc6_test.go:20:45: undefined: max

    /tmp/tmpkz362hc6_test.go:20:74: undefined: min

    /tmp/tmpkz362hc6_test.go:23:52: undefined: max

    /tmp/tmpkz362hc6_test.go:23:92: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073283
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n \
    \       return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0]\
    \ + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n/2] + l[n/2-1])\
    \ / 2\n    }\n    return float64(l[n/2])\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpbi7a78is_test.go:43: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpbi7a78is_test.go:43:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpbi7a78is_test.go:43: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - max(l[0],\
    \ max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3])))) / 2\n \
    \   }\n    return 0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkz362hc6_test.go:20:45: undefined: max

    /tmp/tmpkz362hc6_test.go:20:74: undefined: min

    /tmp/tmpkz362hc6_test.go:23:52: undefined: max

    /tmp/tmpkz362hc6_test.go:23:92: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073283
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n \
    \       return float64(l[0])\n    }\n    if n % 2 == 0 {\n        return float64(l[n/2-1]+l[n/2])\
    \ / 2\n    }\n    return float64(l[n/2])\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmphdai_rgq_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmphdai_rgq_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmphdai_rgq_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // Sort the list.\n    for i := 0; i < len(l); i++ {\n        for j := i +\
    \ 1; j < len(l); j++ {\n            if l[i] > l[j] {\n                l[i], l[j]\
    \ = l[j], l[i]\n            }\n        }\n    }\n\n    // Find the median.\n \
    \   if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2 - 1])\
    \ / 2\n    } else {\n        return float64(l[len(l)/2])\n    }\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1])\
    \ / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmps1mcojf9_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmps1mcojf9_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmps1mcojf9_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: implement\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpyyij4pxa_test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpyyij4pxa_test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpyyij4pxa_test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpyyij4pxa_test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpyyij4pxa_test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n%2 == 0 {\n\
    \        return float64(l[n/2]+l[n/2-1])/2\n    }\n    return float64(l[n/2])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp1nx1j898_test.go:37: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp1nx1j898_test.go:37:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp1nx1j898_test.go:37: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073285
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n \
    \       return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0]\
    \ + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n/2] + l[n/2\
    \ - 1]) / 2\n    }\n    return float64(l[n/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpmt_f4h8i_test.go:43: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpmt_f4h8i_test.go:43:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpmt_f4h8i_test.go:43: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - max(l[0],\
    \ max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - max(l[0], max(l[1], max(l[2], max(l[3], l[4])))) - min(l[0], min(l[1],\
    \ min(l[2], min(l[3], l[4]))))) / 2\n    }\n    return 0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwcs6uqsr_test.go:20:45: undefined: max

    /tmp/tmpwcs6uqsr_test.go:20:74: undefined: min

    /tmp/tmpwcs6uqsr_test.go:23:52: undefined: max

    /tmp/tmpwcs6uqsr_test.go:23:92: undefined: min

    /tmp/tmpwcs6uqsr_test.go:26:59: undefined: max

    /tmp/tmpwcs6uqsr_test.go:26:110: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2 == 0 {\n    \
    \    return (float64(l[len(l)/2]) + float64(l[len(l)/2-1])) / 2\n    }\n    return\
    \ float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpbndasodl_test.go:36: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpbndasodl_test.go:36:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpbndasodl_test.go:36: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2 == 0 {\n    \
    \    return float64(l[len(l)/2] + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp91v60r36_test.go:36: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp91v60r36_test.go:36:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp91v60r36_test.go:36: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // Sort the list.\n    for i := 0; i < len(l); i++ {\n        for j := i +\
    \ 1; j < len(l); j++ {\n            if l[i] > l[j] {\n                tmp := l[i]\n\
    \                l[i] = l[j]\n                l[j] = tmp\n            }\n    \
    \    }\n    }\n\n    // Find the median.\n    if len(l) % 2 == 0 {\n        return\
    \ float64(l[len(l)/2] + l[len(l)/2 - 1]) / 2\n    } else {\n        return float64(l[len(l)/2])\n\
    \    }\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n\
    \     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073285
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2dt2a2q2_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2dt2a2q2_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2dt2a2q2_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   // TODO: implement\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpyyij4pxa_test.go:31: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpyyij4pxa_test.go:31:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpyyij4pxa_test.go:31: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpyyij4pxa_test.go:31:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpyyij4pxa_test.go:31: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073284
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]\
    \ - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n    }\n    if\
    \ len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3] - max(l[0],\
    \ max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3])))) / 2\n \
    \   }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ + l[4] - max(l[0], max(l[1], max(l[2], max(l[3], l[4])))) - min(l[0], min(l[1],\
    \ min(l[2], min(l[3], l[4]))))) / 2\n    }\n    return 0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwcs6uqsr_test.go:20:45: undefined: max

    /tmp/tmpwcs6uqsr_test.go:20:74: undefined: min

    /tmp/tmpwcs6uqsr_test.go:23:52: undefined: max

    /tmp/tmpwcs6uqsr_test.go:23:92: undefined: min

    /tmp/tmpwcs6uqsr_test.go:26:59: undefined: max

    /tmp/tmpwcs6uqsr_test.go:26:110: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\nfunc median(l []int) float64 {\n \
    \   if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return\
    \ float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1])\
    \ / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmps1mcojf9_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmps1mcojf9_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmps1mcojf9_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073281
