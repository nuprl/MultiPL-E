name: HumanEval_79_decimal_to_binary
language: go_test.go
prompt: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// You will be given a number in decimal form and your task is to convert it\
  \ to\n// binary format. The function should return a string, with each character\
  \ representing a binary\n// number. Each character in the string will be '0' or\
  \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
  \ at the end of the string.\n// The extra characters are there to help with the\
  \ format.\n// Examples:\nfunc decimal_to_binary(decimal int) string {\n"
tests: "func TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n    \
  \ { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
  \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
  \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
  , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"\
    db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n",
  "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\"\
    , decimal)\n}\n", "    // TODO: implement\n    return \"\"\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\",\
    \ decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    var\
    \ result string\n    for decimal > 0 {\n        result = fmt.Sprintf(\"%d%s\"\
    , decimal % 2, result)\n        decimal /= 2\n    }\n    return fmt.Sprintf(\"\
    db%sdb\", result)\n}\n", "    // your code here\n    return \"\"\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    // your code here\n    return \"\
    \"\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"\
    db%bdb\", decimal)\n}\n", "    var result string\n    for decimal > 0 {\n    \
    \    result = fmt.Sprintf(\"%d%s\", decimal % 2, result)\n        decimal /= 2\n\
    \    }\n    return fmt.Sprintf(\"db%sdb\", result)\n}\n", "    return fmt.Sprintf(\"\
    db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n",
  "    var binary string\n    for decimal > 0 {\n        binary = fmt.Sprintf(\"%d%s\"\
    , decimal % 2, binary)\n        decimal /= 2\n    }\n    return fmt.Sprintf(\"\
    db%sdb\", binary)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", " \
    \   var binary string\n    for decimal > 0 {\n        binary = fmt.Sprintf(\"\
    %d%s\", decimal % 2, binary)\n        decimal /= 2\n    }\n    return fmt.Sprintf(\"\
    db%sdb\", binary)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", " \
    \   return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"\
    db%bdb\", decimal)\n}\n", "    if decimal == 0 {\n        return \"db0db\"\n \
    \   }\n    var result string\n    for decimal > 0 {\n        result = fmt.Sprintf(\"\
    %d%s\", decimal % 2, result)\n        decimal /= 2\n    }\n    return fmt.Sprintf(\"\
    db%sdb\", result)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", " \
    \   return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"\
    db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n",
  "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\"\
    , decimal)\n}\n", "    // TODO: implement me\n    return \"\"\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    binary := \"\"\n    for decimal\
    \ > 0 {\n        binary = fmt.Sprintf(\"%d%s\", decimal % 2, binary)\n       \
    \ decimal /= 2\n    }\n    return fmt.Sprintf(\"db%sdb\", binary)\n}\n", "   \
    \ return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\"\
    , decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\",\
    \ decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\",\
    \ decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\",\
    \ decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    //\
    \ your code here\n    return \"\"\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n\
    }\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"\
    db%bdb\", decimal)\n}\n", "    var binary string\n    for decimal > 0 {\n    \
    \    binary = fmt.Sprintf(\"%d%s\", decimal % 2, binary)\n        decimal /= 2\n\
    \    }\n    return fmt.Sprintf(\"db%sdb\", binary)\n}\n", "    return fmt.Sprintf(\"\
    db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n",
  "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    var binary string\n   \
    \ for decimal > 0 {\n        binary = fmt.Sprintf(\"%d%s\", decimal % 2, binary)\n\
    \        decimal /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n", "   \
    \ var result string = \"db\"\n    for decimal > 0 {\n        result = fmt.Sprintf(\"\
    %s%d\", result, decimal % 2)\n        decimal /= 2\n    }\n    return fmt.Sprintf(\"\
    %sdb\", result)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", " \
    \   if decimal == 0 {\n        return \"db0db\"\n    }\n    var binary string\n\
    \    for decimal > 0 {\n        binary = fmt.Sprintf(\"%d%s\", decimal % 2, binary)\n\
    \        decimal /= 2\n    }\n    return fmt.Sprintf(\"db%sdb\", binary)\n}\n",
  "    // your code here\n    return \"\"\n}\n", "    return fmt.Sprintf(\"db%bdb\"\
    , decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    if\
    \ decimal == 0 {\n        return \"db0db\"\n    }\n\n    result := \"db\"\n  \
    \  for decimal > 0 {\n        if decimal % 2 == 0 {\n            result = \"0\"\
    \ + result\n        } else {\n            result = \"1\" + result\n        }\n\
    \        decimal /= 2\n    }\n    return result + \"db\"\n}\n", "    return fmt.Sprintf(\"\
    db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n",
  "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\"\
    , decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\",\
    \ decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\",\
    \ decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    var binary string\n    for decimal\
    \ > 0 {\n        binary = fmt.Sprintf(\"%d%s\", decimal % 2, binary)\n       \
    \ decimal /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\",\
    \ decimal)\n}\n", "    var binary string\n    for decimal > 0 {\n        binary\
    \ = fmt.Sprintf(\"%d%s\", decimal % 2, binary)\n        decimal /= 2\n    }\n\
    \    return fmt.Sprintf(\"db%sdb\", binary)\n}\n", "    return fmt.Sprintf(\"\
    db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n",
  "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\"\
    , decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\",\
    \ decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\",\
    \ decimal)\n}\n", "    // your code here\n    return \"\"\n}\n", "    return fmt.Sprintf(\"\
    db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n",
  "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\"\
    , decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    // TODO: implement\n    return\
    \ \"\"\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\",\
    \ decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    if decimal == 0 {\n        return\
    \ \"db0db\"\n    }\n\n    binary := \"\"\n    for decimal > 0 {\n        binary\
    \ = fmt.Sprintf(\"%d%s\", decimal % 2, binary)\n        decimal /= 2\n    }\n\n\
    \    return fmt.Sprintf(\"db%sdb\", binary)\n}\n", "    // your code here\n  \
    \  return \"\"\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "  \
    \  return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    var binary string\n   \
    \ for decimal > 0 {\n        binary = fmt.Sprintf(\"%d%s\", decimal % 2, binary)\n\
    \        decimal /= 2\n    }\n    return fmt.Sprintf(\"db%sdb\", binary)\n}\n",
  "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    // your code here\n   \
    \ return \"\"\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "   \
    \ return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\"\
    , decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\",\
    \ decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\",\
    \ decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\",\
    \ decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    // your code here\n    return \"\
    \"\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"\
    db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n",
  "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    var binary string = \"\
    db\"\n    for decimal > 0 {\n        binary += string(decimal % 2 + 48)\n    \
    \    decimal /= 2\n    }\n    binary += \"db\"\n    return binary\n}\n", "   \
    \ // TODO: implement\n    return \"\"\n}\n", "    return fmt.Sprintf(\"db%bdb\"\
    , decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\",\
    \ decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\",\
    \ decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\",\
    \ decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    //\
    \ your code here\n    return \"\"\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n\
    }\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"\
    db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n",
  "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    binary := \"\"\n    for\
    \ decimal > 0 {\n        binary = fmt.Sprintf(\"%d%s\", decimal % 2, binary)\n\
    \        decimal /= 2\n    }\n    return fmt.Sprintf(\"db%sdb\", binary)\n}\n",
  "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\"\
    , decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\",\
    \ decimal)\n}\n", "    if decimal == 0 {\n        return \"db0db\"\n    }\n\n\
    \    var binary string\n    for decimal > 0 {\n        binary = fmt.Sprintf(\"\
    %d%s\", decimal % 2, binary)\n        decimal /= 2\n    }\n\n    return fmt.Sprintf(\"\
    db%sdb\", binary)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", " \
    \   return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"\
    db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n",
  "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    // your code here\n   \
    \ return \"\"\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "   \
    \ return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    var result string\n    for\
    \ decimal > 0 {\n        result = fmt.Sprintf(\"%d%s\", decimal % 2, result)\n\
    \        decimal /= 2\n    }\n    return fmt.Sprintf(\"db%sdb\", result)\n}\n",
  "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\"\
    , decimal)\n}\n", "    return fmt.Sprintf(\"%b\", decimal)\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\",\
    \ decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\",\
    \ decimal)\n}\n", "    // Your code here\n    return \"\"\n}\n", "    return fmt.Sprintf(\"\
    db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n",
  "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    var result string\n   \
    \ for decimal > 0 {\n        result = fmt.Sprintf(\"%d%s\", decimal % 2, result)\n\
    \        decimal /= 2\n    }\n    return \"db\" + result + \"db\"\n}\n", "   \
    \ return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    if decimal == 0 {\n    \
    \    return \"db0db\"\n    }\n\n    binary := \"db\"\n    for decimal > 0 {\n\
    \        binary += fmt.Sprintf(\"%d\", decimal % 2)\n        decimal /= 2\n  \
    \  }\n    binary += \"db\"\n\n    return binary\n}\n", "    var result string\n\
    \    for decimal > 0 {\n        result = fmt.Sprintf(\"%d%s\", decimal % 2, result)\n\
    \        decimal /= 2\n    }\n    return fmt.Sprintf(\"db%sdb\", result)\n}\n",
  "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\"\
    , decimal)\n}\n", "    // your code here\n    return \"\"\n}\n", "    return fmt.Sprintf(\"\
    db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n",
  "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%db\"\
    , decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\",\
    \ decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    //\
    \ your code here\n    return \"\"\n}\n", "    var result string\n    for decimal\
    \ > 0 {\n        result = fmt.Sprintf(\"%v%v\", decimal % 2, result)\n       \
    \ decimal /= 2\n    }\n    return fmt.Sprintf(\"db%vdb\", result)\n}\n", "   \
    \ return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\"\
    , decimal)\n}\n", "    var result string\n    for decimal > 0 {\n        result\
    \ = fmt.Sprintf(\"%d%s\", decimal % 2, result)\n        decimal /= 2\n    }\n\
    \    return fmt.Sprintf(\"db%sdb\", result)\n}\n", "    return fmt.Sprintf(\"\
    db%bdb\", decimal)\n}\n", "    var binary string\n    for decimal > 0 {\n    \
    \    binary = fmt.Sprintf(\"%d%s\", decimal % 2, binary)\n        decimal /= 2\n\
    \    }\n    return fmt.Sprintf(\"db%sdb\", binary)\n}\n", "    return fmt.Sprintf(\"\
    db%bdb\", decimal)\n}\n", "    // your code here\n    return \"\"\n}\n", "   \
    \ var binary string\n    for decimal > 0 {\n        binary = fmt.Sprintf(\"%d%s\"\
    , decimal % 2, binary)\n        decimal /= 2\n    }\n    return fmt.Sprintf(\"\
    db%sdb\", binary)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
