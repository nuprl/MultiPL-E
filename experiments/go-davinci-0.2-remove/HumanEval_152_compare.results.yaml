language: go_test.go
name: HumanEval_152_compare
results:
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i, v\
    \ := range game {\n        if v == guess[i] {\n            result = append(result,\
    \ 0)\n        } else {\n            result = append(result, abs(v - guess[i]))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphs_m4_hp_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        result = append(result, abs(game[i] - guess[i]))\n\
    \    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptk8bqaxs_test.go:19:33: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i, v\
    \ := range game {\n        result = append(result, abs(v - guess[i]))\n    }\n\
    \    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4jowgqzd_test.go:19:33: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 0
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i, v\
    \ := range game {\n        result = append(result, v - guess[i])\n    }\n    return\
    \ result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074011
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 0
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i, v\
    \ := range game {\n        result = append(result, v - guess[i])\n    }\n    return\
    \ result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074011
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i, _\
    \ := range game {\n        if game[i] == guess[i] {\n            result = append(result,\
    \ 0)\n        } else {\n            result = append(result, abs(game[i] - guess[i]))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_zwt74k_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i, v\
    \ := range game {\n        if v == guess[i] {\n            result = append(result,\
    \ 0)\n        } else {\n            result = append(result, abs(v - guess[i]))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphs_m4_hp_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i, _\
    \ := range game {\n        if game[i] == guess[i] {\n            result = append(result,\
    \ 0)\n        } else {\n            result = append(result, abs(game[i] - guess[i]))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_zwt74k_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n    \
    \        result[i] = 0\n        } else {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiioid7vt_test.go:22:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i, v\
    \ := range game {\n        if v == guess[i] {\n            result = append(result,\
    \ 0)\n        } else {\n            result = append(result, abs(v - guess[i]))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphs_m4_hp_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 0
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i, v\
    \ := range game {\n        if v > guess[i] {\n            result = append(result,\
    \ v - guess[i])\n        } else {\n            result = append(result, guess[i]\
    \ - v)\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074011
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n    \
    \        result[i] = 0\n        } else {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiioid7vt_test.go:22:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 0
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i, v\
    \ := range game {\n        if v > guess[i] {\n            result = append(result,\
    \ v - guess[i])\n        } else {\n            result = append(result, guess[i]\
    \ - v)\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074011
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i, v\
    \ := range game {\n        if v == guess[i] {\n            result = append(result,\
    \ 0)\n        } else {\n            result = append(result, abs(v - guess[i]))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphs_m4_hp_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n    \
    \        result[i] = 0\n        } else {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiioid7vt_test.go:22:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n    \
    \        result[i] = 0\n        } else {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiioid7vt_test.go:22:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i, v\
    \ := range game {\n        if v == guess[i] {\n            result = append(result,\
    \ 0)\n        } else {\n            result = append(result, abs(v - guess[i]))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphs_m4_hp_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i, v\
    \ := range game {\n        if v == guess[i] {\n            result = append(result,\
    \ 0)\n        } else {\n            result = append(result, abs(v - guess[i]))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphs_m4_hp_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i, _\
    \ := range game {\n        if game[i] == guess[i] {\n            result = append(result,\
    \ 0)\n        } else {\n            result = append(result, abs(game[i] - guess[i]))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_zwt74k_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i, v\
    \ := range game {\n        if v == guess[i] {\n            result = append(result,\
    \ 0)\n        } else {\n            result = append(result, abs(v - guess[i]))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphs_m4_hp_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(game))\n\
    \    for i, v := range game {\n        result[i] = abs(v - guess[i])\n    }\n\
    \    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4o3jih5u_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n    \
    \        result[i] = 0\n        } else {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiioid7vt_test.go:22:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n    \
    \        result[i] = 0\n        } else {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiioid7vt_test.go:22:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i, v\
    \ := range game {\n        if v == guess[i] {\n            result = append(result,\
    \ 0)\n        } else {\n            result = append(result, abs(v - guess[i]))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphs_m4_hp_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n    \
    \        result[i] = 0\n        } else {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiioid7vt_test.go:22:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i, _\
    \ := range game {\n        if game[i] == guess[i] {\n            result = append(result,\
    \ 0)\n        } else {\n            result = append(result, abs(game[i] - guess[i]))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_zwt74k_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    res := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n    \
    \        res[i] = 0\n        } else {\n            res[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return res\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_o259f0__test.go:22:22: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        result = append(result, abs(game[i] - guess[i]))\n\
    \    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptk8bqaxs_test.go:19:33: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i, _\
    \ := range game {\n        if game[i] == guess[i] {\n            result = append(result,\
    \ 0)\n        } else {\n            result = append(result, abs(game[i] - guess[i]))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_zwt74k_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        result = append(result, abs(game[i] - guess[i]))\n\
    \    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptk8bqaxs_test.go:19:33: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var res []int\n    for i := 0;\
    \ i < len(game); i++ {\n        if game[i] == guess[i] {\n            res = append(res,\
    \ 0)\n        } else {\n            res = append(res, abs(game[i] - guess[i]))\n\
    \        }\n    }\n    return res\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnjke2_02_test.go:22:31: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n    \
    \        result[i] = 0\n        } else {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiioid7vt_test.go:22:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        result = append(result, abs(game[i] - guess[i]))\n\
    \    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptk8bqaxs_test.go:19:33: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            result\
    \ = append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc75g0f5z_test.go:22:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
