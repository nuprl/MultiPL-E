language: go_test.go
name: HumanEval_143_words_in_sentence
results:
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpskzwtaji_test.go:20:26: undefined: strings

    /tmp/tmpskzwtaji_test.go:21:12: undefined: is_prime

    /tmp/tmpskzwtaji_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := []string{}\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmui7sh1d_test.go:20:26: undefined: strings

    /tmp/tmpmui7sh1d_test.go:21:12: undefined: is_prime

    /tmp/tmpmui7sh1d_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    word := \"\"\n    for\
    \ _, c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2c1bnmy_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    word := \"\"\n    for\
    \ _, ch := range sentence {\n        if ch == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(ch)\n\
    \        }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvnvc_7jy_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    word := \"\"\n    for\
    \ _, c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2c1bnmy_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var words []string\n    var result string\n    for _,\
    \ word := range sentence {\n        if word == ' ' {\n            words = append(words,\
    \ result)\n            result = \"\"\n        } else {\n            result +=\
    \ string(word)\n        }\n    }\n    words = append(words, result)\n    result\
    \ = \"\"\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgwxkmyo8_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\nfunc\
    \ TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpx8iksq3d_test.go:42: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpx8iksq3d_test.go:42: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpx8iksq3d_test.go:42: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpx8iksq3d_test.go:42:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpx8iksq3d_test.go:42: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpx8iksq3d_test.go:42:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073452
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    word := \"\"\n    for\
    \ _, c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    new_words := make([]string,\
    \ 0)\n    for _, word := range words {\n        if is_prime(len(word)) {\n   \
    \         new_words = append(new_words, word)\n        }\n    }\n    return strings.Join(new_words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmd3f278z_test.go:32:12: undefined: is_prime

    /tmp/tmpmd3f278z_test.go:36:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    word := \"\"\n    for\
    \ _, c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2c1bnmy_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := []string{}\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmui7sh1d_test.go:20:26: undefined: strings

    /tmp/tmpmui7sh1d_test.go:21:12: undefined: is_prime

    /tmp/tmpmui7sh1d_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    var words []string\n    var word\
    \ string\n    for _, c := range sentence {\n        if c == ' ' {\n          \
    \  words = append(words, word)\n            word = \"\"\n        } else {\n  \
    \          word += string(c)\n        }\n    }\n    words = append(words, word)\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb8w0ljcq_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := []string{}\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmui7sh1d_test.go:20:26: undefined: strings

    /tmp/tmpmui7sh1d_test.go:21:12: undefined: is_prime

    /tmp/tmpmui7sh1d_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    var words []string\n    var word\
    \ string\n    for _, c := range sentence {\n        if c == ' ' {\n          \
    \  words = append(words, word)\n            word = \"\"\n        } else {\n  \
    \          word += string(c)\n        }\n    }\n    words = append(words, word)\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb8w0ljcq_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var words []string\n    var word string\n    for _, c\
    \ := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvc7z_a77_test.go:32:12: undefined: is_prime

    /tmp/tmpvc7z_a77_test.go:36:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    word := \"\"\n    for\
    \ _, c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    res := \"\"\n    for _,\
    \ word := range words {\n        if is_prime(len(word)) {\n            res +=\
    \ word + \" \"\n        }\n    }\n    if len(res) > 0 {\n        res = res[:len(res)-1]\n\
    \    }\n    return res\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaavjyvj3_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := []string{}\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmui7sh1d_test.go:20:26: undefined: strings

    /tmp/tmpmui7sh1d_test.go:21:12: undefined: is_prime

    /tmp/tmpmui7sh1d_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\nfunc\
    \ TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpx8iksq3d_test.go:42: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpx8iksq3d_test.go:42: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpx8iksq3d_test.go:42: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpx8iksq3d_test.go:42:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpx8iksq3d_test.go:42: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpx8iksq3d_test.go:42:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073452
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    word := \"\"\n    for\
    \ _, c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2c1bnmy_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    var words []string\n    var word\
    \ string\n    for _, c := range sentence {\n        if c == ' ' {\n          \
    \  words = append(words, word)\n            word = \"\"\n        } else {\n  \
    \          word += string(c)\n        }\n    }\n    words = append(words, word)\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb8w0ljcq_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := []string{}\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmui7sh1d_test.go:20:26: undefined: strings

    /tmp/tmpmui7sh1d_test.go:21:12: undefined: is_prime

    /tmp/tmpmui7sh1d_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    word := \"\"\n    for\
    \ _, c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2c1bnmy_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpskzwtaji_test.go:20:26: undefined: strings

    /tmp/tmpskzwtaji_test.go:21:12: undefined: is_prime

    /tmp/tmpskzwtaji_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    for i := 0; i < len(sentence);\
    \ i++ {\n        if sentence[i] == ' ' {\n            continue\n        }\n  \
    \      j := i\n        for ; j < len(sentence); j++ {\n            if sentence[j]\
    \ == ' ' {\n                break\n            }\n        }\n        words = append(words,\
    \ sentence[i:j])\n        i = j\n    }\n    result := make([]string, 0)\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ = append(result, word)\n        }\n    }\n    return strings.Join(result, \"\
    \ \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyvyo03cx_test.go:35:12: undefined: is_prime

    /tmp/tmpyvyo03cx_test.go:39:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var words []string\n    var word string\n    for _, c\
    \ := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    var result string\n  \
    \  for _, word := range words {\n        if is_prime(len(word)) {\n          \
    \  result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppmc6rkrt_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpskzwtaji_test.go:20:26: undefined: strings

    /tmp/tmpskzwtaji_test.go:21:12: undefined: is_prime

    /tmp/tmpskzwtaji_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := []string{}\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmui7sh1d_test.go:20:26: undefined: strings

    /tmp/tmpmui7sh1d_test.go:21:12: undefined: is_prime

    /tmp/tmpmui7sh1d_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    words := strings.Split(sentence,\
    \ \" \")\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_gyftujf_test.go:20:14: undefined: strings

    /tmp/tmp_gyftujf_test.go:22:12: undefined: is_prime

    /tmp/tmp_gyftujf_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    var words []string\n    var word\
    \ string\n    for _, c := range sentence {\n        if c == ' ' {\n          \
    \  words = append(words, word)\n            word = \"\"\n        } else {\n  \
    \          word += string(c)\n        }\n    }\n    words = append(words, word)\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb8w0ljcq_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var words []string\n    var result string\n    var word\
    \ string\n    var is_prime bool\n    var i int\n\n    words = strings.Split(sentence,\
    \ \" \")\n    for _, word = range words {\n        is_prime = true\n        for\
    \ i = 2; i < len(word); i++ {\n            if len(word) % i == 0 {\n         \
    \       is_prime = false\n                break\n            }\n        }\n  \
    \      if is_prime {\n            result += word + \" \"\n        }\n    }\n \
    \   return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv0cqt21r_test.go:25:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpskzwtaji_test.go:20:26: undefined: strings

    /tmp/tmpskzwtaji_test.go:21:12: undefined: is_prime

    /tmp/tmpskzwtaji_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpskzwtaji_test.go:20:26: undefined: strings

    /tmp/tmpskzwtaji_test.go:21:12: undefined: is_prime

    /tmp/tmpskzwtaji_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var words []string\n    var word string\n    for _, c\
    \ := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    var result string\n  \
    \  for _, word := range words {\n        if is_prime(len(word)) {\n          \
    \  result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppmc6rkrt_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var words []string\n    var word string\n    for _, c\
    \ := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvc7z_a77_test.go:32:12: undefined: is_prime

    /tmp/tmpvc7z_a77_test.go:36:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    result :=\
    \ \"\"\n    for _, word := range words {\n        if is_prime(len(word)) {\n \
    \           result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwmuki3en_test.go:19:14: undefined: strings

    /tmp/tmpwmuki3en_test.go:22:12: undefined: is_prime

    /tmp/tmpwmuki3en_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var words []string\n    var word string\n    for _, c\
    \ := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvc7z_a77_test.go:32:12: undefined: is_prime

    /tmp/tmpvc7z_a77_test.go:36:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var words []string\n    var word string\n    for _, c\
    \ := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvc7z_a77_test.go:32:12: undefined: is_prime

    /tmp/tmpvc7z_a77_test.go:36:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb0j6c9cz_test.go:19:14: undefined: strings

    /tmp/tmpb0j6c9cz_test.go:22:12: undefined: is_prime

    /tmp/tmpb0j6c9cz_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpskzwtaji_test.go:20:26: undefined: strings

    /tmp/tmpskzwtaji_test.go:21:12: undefined: is_prime

    /tmp/tmpskzwtaji_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    words := strings.Split(sentence,\
    \ \" \")\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_gyftujf_test.go:20:14: undefined: strings

    /tmp/tmp_gyftujf_test.go:22:12: undefined: is_prime

    /tmp/tmp_gyftujf_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    word := \"\"\n    for\
    \ _, c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    prime_words := make([]string,\
    \ 0)\n    for _, word := range words {\n        if is_prime(len(word)) {\n   \
    \         prime_words = append(prime_words, word)\n        }\n    }\n    return\
    \ strings.Join(prime_words, \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbd21ukpg_test.go:32:12: undefined: is_prime

    /tmp/tmpbd21ukpg_test.go:36:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    word := \"\"\n    for\
    \ _, c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2c1bnmy_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var words []string\n    var word string\n    for _, c\
    \ := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvc7z_a77_test.go:32:12: undefined: is_prime

    /tmp/tmpvc7z_a77_test.go:36:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := []string{}\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmui7sh1d_test.go:20:26: undefined: strings

    /tmp/tmpmui7sh1d_test.go:21:12: undefined: is_prime

    /tmp/tmpmui7sh1d_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    var words []string\n    var word\
    \ string\n    for _, c := range sentence {\n        if c == ' ' {\n          \
    \  words = append(words, word)\n            word = \"\"\n        } else {\n  \
    \          word += string(c)\n        }\n    }\n    words = append(words, word)\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb8w0ljcq_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpskzwtaji_test.go:20:26: undefined: strings

    /tmp/tmpskzwtaji_test.go:21:12: undefined: is_prime

    /tmp/tmpskzwtaji_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpskzwtaji_test.go:20:26: undefined: strings

    /tmp/tmpskzwtaji_test.go:21:12: undefined: is_prime

    /tmp/tmpskzwtaji_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var words []string\n    for _, word := range sentence\
    \ {\n        if word == ' ' {\n            words = append(words, \"\")\n     \
    \   } else {\n            words[len(words)-1] += string(word)\n        }\n   \
    \ }\n    var result string\n    for _, word := range words {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfsfl_mki_test.go:29:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    word := \"\"\n    for\
    \ _, c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2c1bnmy_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    word := \"\"\n    for\
    \ _, c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2c1bnmy_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    words := strings.Split(sentence,\
    \ \" \")\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result += word + \" \"\n        }\n    }\n    return strings.TrimRight(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr_cownip_test.go:20:14: undefined: strings

    /tmp/tmpr_cownip_test.go:22:12: undefined: is_prime

    /tmp/tmpr_cownip_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    word := \"\"\n    for\
    \ _, c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2c1bnmy_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb0j6c9cz_test.go:19:14: undefined: strings

    /tmp/tmpb0j6c9cz_test.go:22:12: undefined: is_prime

    /tmp/tmpb0j6c9cz_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(word) {\n            result += string(word)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n \
    \ candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkzo4hsy__test.go:21:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\nfunc\
    \ TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpx8iksq3d_test.go:42: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpx8iksq3d_test.go:42: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpx8iksq3d_test.go:42: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpx8iksq3d_test.go:42:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpx8iksq3d_test.go:42: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpx8iksq3d_test.go:42:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073452
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var words []string\n    var word string\n    for _, c\
    \ := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvc7z_a77_test.go:32:12: undefined: is_prime

    /tmp/tmpvc7z_a77_test.go:36:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    result :=\
    \ \"\"\n    for _, word := range words {\n        if is_prime(len(word)) {\n \
    \           result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwmuki3en_test.go:19:14: undefined: strings

    /tmp/tmpwmuki3en_test.go:22:12: undefined: is_prime

    /tmp/tmpwmuki3en_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpskzwtaji_test.go:20:26: undefined: strings

    /tmp/tmpskzwtaji_test.go:21:12: undefined: is_prime

    /tmp/tmpskzwtaji_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := []string{}\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmui7sh1d_test.go:20:26: undefined: strings

    /tmp/tmpmui7sh1d_test.go:21:12: undefined: is_prime

    /tmp/tmpmui7sh1d_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := []string{}\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmui7sh1d_test.go:20:26: undefined: strings

    /tmp/tmpmui7sh1d_test.go:21:12: undefined: is_prime

    /tmp/tmpmui7sh1d_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    var words = strings.Split(sentence,\
    \ \" \")\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmgfh5f3z_test.go:20:17: undefined: strings

    /tmp/tmpmgfh5f3z_test.go:22:12: undefined: is_prime

    /tmp/tmpmgfh5f3z_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    word := \"\"\n    for\
    \ _, c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2c1bnmy_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var words []string\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa__r5byk_test.go:20:26: undefined: strings

    /tmp/tmpa__r5byk_test.go:21:12: undefined: is_prime

    /tmp/tmpa__r5byk_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073452
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(string(word))) {\n            result += string(word)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqjijhnze_test.go:21:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073452
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var words []string\n    var word string\n    for _, c\
    \ := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    var result string\n  \
    \  for _, word := range words {\n        if is_prime(len(word)) {\n          \
    \  result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppmc6rkrt_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    word := \"\"\n    for\
    \ _, c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2c1bnmy_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    word := \"\"\n    for\
    \ _, c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2c1bnmy_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    result :=\
    \ \"\"\n    for _, word := range words {\n        if is_prime(len(word)) {\n \
    \           result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwmuki3en_test.go:19:14: undefined: strings

    /tmp/tmpwmuki3en_test.go:22:12: undefined: is_prime

    /tmp/tmpwmuki3en_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpskzwtaji_test.go:20:26: undefined: strings

    /tmp/tmpskzwtaji_test.go:21:12: undefined: is_prime

    /tmp/tmpskzwtaji_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    var words = strings.Split(sentence,\
    \ \" \")\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result += word + \" \"\n        }\n    }\n    return strings.TrimRight(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4rxzcvm8_test.go:20:17: undefined: strings

    /tmp/tmp4rxzcvm8_test.go:22:12: undefined: is_prime

    /tmp/tmp4rxzcvm8_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073452
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var words []string\n    var word string\n    for _, c\
    \ := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    var result string\n  \
    \  for _, word := range words {\n        if is_prime(len(word)) {\n          \
    \  result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppmc6rkrt_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    result :=\
    \ \"\"\n    for _, word := range words {\n        if is_prime(len(word)) {\n \
    \           result += word + \" \"\n        }\n    }\n    return strings.TrimRight(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1v6gihd2_test.go:19:14: undefined: strings

    /tmp/tmp1v6gihd2_test.go:22:12: undefined: is_prime

    /tmp/tmp1v6gihd2_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073452
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := []string{}\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmui7sh1d_test.go:20:26: undefined: strings

    /tmp/tmpmui7sh1d_test.go:21:12: undefined: is_prime

    /tmp/tmpmui7sh1d_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := []string{}\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmui7sh1d_test.go:20:26: undefined: strings

    /tmp/tmpmui7sh1d_test.go:21:12: undefined: is_prime

    /tmp/tmpmui7sh1d_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    word := \"\"\n    for\
    \ _, c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2c1bnmy_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    word := \"\"\n    for\
    \ _, c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2c1bnmy_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var words []string\n    var word string\n    for _, c\
    \ := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    var result string\n  \
    \  for _, word := range words {\n        if is_prime(len(word)) {\n          \
    \  result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppmc6rkrt_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    word := \"\"\n    for\
    \ _, c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2c1bnmy_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(word) {\n            result += string(word)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n \
    \ candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkzo4hsy__test.go:21:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    if len(sentence) == 0 {\n        return \"\"\n    }\n\
    \    words := make([]string, 0)\n    word := \"\"\n    for _, c := range sentence\
    \ {\n        if c == ' ' {\n            words = append(words, word)\n        \
    \    word = \"\"\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    words = append(words, word)\n    result := \"\"\n    for _, word :=\
    \ range words {\n        if is_prime(len(word)) {\n            result += word\
    \ + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpds2r8l68_test.go:35:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073452
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    words := strings.Split(sentence,\
    \ \" \")\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_gyftujf_test.go:20:14: undefined: strings

    /tmp/tmp_gyftujf_test.go:22:12: undefined: is_prime

    /tmp/tmp_gyftujf_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := []string{}\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmui7sh1d_test.go:20:26: undefined: strings

    /tmp/tmpmui7sh1d_test.go:21:12: undefined: is_prime

    /tmp/tmpmui7sh1d_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var words []string\n    var word string\n    for _, c\
    \ := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvc7z_a77_test.go:32:12: undefined: is_prime

    /tmp/tmpvc7z_a77_test.go:36:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var words []string\n    var result string\n    var is_prime\
    \ bool\n    for _, word := range sentence {\n        if word == ' ' {\n      \
    \      is_prime = true\n            for i := 2; i < len(words); i++ {\n      \
    \          if len(words) % i == 0 {\n                    is_prime = false\n  \
    \                  break\n                }\n            }\n            if is_prime\
    \ {\n                result += words\n            }\n            words = nil\n\
    \        } else {\n            words += string(word)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpswlm2co0_test.go:32:17: invalid operation: result += words (mismatched
    types string and []string)

    /tmp/tmpswlm2co0_test.go:36:13: invalid operation: words += string(word) (mismatched
    types []string and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073452
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(word) {\n            result += string(word)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n \
    \ candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkzo4hsy__test.go:21:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpskzwtaji_test.go:20:26: undefined: strings

    /tmp/tmpskzwtaji_test.go:21:12: undefined: is_prime

    /tmp/tmpskzwtaji_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpskzwtaji_test.go:20:26: undefined: strings

    /tmp/tmpskzwtaji_test.go:21:12: undefined: is_prime

    /tmp/tmpskzwtaji_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpskzwtaji_test.go:20:26: undefined: strings

    /tmp/tmpskzwtaji_test.go:21:12: undefined: is_prime

    /tmp/tmpskzwtaji_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var res []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    res = append(res, word)\n        }\n    }\n    return strings.Join(res, \"\
    \ \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsmm8grzq_test.go:19:14: undefined: strings

    /tmp/tmpsmm8grzq_test.go:22:12: undefined: is_prime

    /tmp/tmpsmm8grzq_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073452
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var words []string\n    for _, word := range sentence\
    \ {\n        if word == ' ' {\n            words = append(words, \"\")\n     \
    \   } else {\n            words[len(words)-1] += string(word)\n        }\n   \
    \ }\n    var result string\n    for _, word := range words {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfsfl_mki_test.go:29:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var words []string\n    var word string\n    for _, c\
    \ := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    var result string\n  \
    \  for _, word := range words {\n        if is_prime(len(word)) {\n          \
    \  result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppmc6rkrt_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    var words []string\n    for i :=\
    \ 0; i < len(sentence); i++ {\n        if sentence[i] == ' ' {\n            words\
    \ = append(words, sentence[:i])\n            sentence = sentence[i+1:]\n     \
    \       i = 0\n        }\n    }\n    words = append(words, sentence)\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpofahup_h_test.go:30:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073452
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := []string{}\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmui7sh1d_test.go:20:26: undefined: strings

    /tmp/tmpmui7sh1d_test.go:21:12: undefined: is_prime

    /tmp/tmpmui7sh1d_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := []string{}\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmui7sh1d_test.go:20:26: undefined: strings

    /tmp/tmpmui7sh1d_test.go:21:12: undefined: is_prime

    /tmp/tmpmui7sh1d_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    result :=\
    \ \"\"\n    for _, word := range words {\n        if is_prime(len(word)) {\n \
    \           result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwmuki3en_test.go:19:14: undefined: strings

    /tmp/tmpwmuki3en_test.go:22:12: undefined: is_prime

    /tmp/tmpwmuki3en_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    for i := 0; i < len(sentence);\
    \ i++ {\n        if sentence[i] == ' ' {\n            continue\n        }\n  \
    \      j := i\n        for ; j < len(sentence); j++ {\n            if sentence[j]\
    \ == ' ' {\n                break\n            }\n        }\n        words = append(words,\
    \ sentence[i:j])\n        i = j\n    }\n    res := make([]string, 0)\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            res\
    \ = append(res, word)\n        }\n    }\n    return strings.Join(res, \" \")\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfrpaxbv5_test.go:35:12: undefined: is_prime

    /tmp/tmpfrpaxbv5_test.go:39:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073452
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var words []string\n    var word string\n    for _, c\
    \ := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvc7z_a77_test.go:32:12: undefined: is_prime

    /tmp/tmpvc7z_a77_test.go:36:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    word := \"\"\n    for\
    \ _, c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2c1bnmy_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := []string{}\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmui7sh1d_test.go:20:26: undefined: strings

    /tmp/tmpmui7sh1d_test.go:21:12: undefined: is_prime

    /tmp/tmpmui7sh1d_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    result :=\
    \ \"\"\n    for _, word := range words {\n        if is_prime(len(word)) {\n \
    \           result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwmuki3en_test.go:19:14: undefined: strings

    /tmp/tmpwmuki3en_test.go:22:12: undefined: is_prime

    /tmp/tmpwmuki3en_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    words := strings.Split(sentence,\
    \ \" \")\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result += word + \" \"\n        }\n    }\n    return strings.Trim(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5hm53rct_test.go:20:14: undefined: strings

    /tmp/tmp5hm53rct_test.go:22:12: undefined: is_prime

    /tmp/tmp5hm53rct_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073452
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := []string{}\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmui7sh1d_test.go:20:26: undefined: strings

    /tmp/tmpmui7sh1d_test.go:21:12: undefined: is_prime

    /tmp/tmpmui7sh1d_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := make([]string, 0)\n    word := \"\"\n    for\
    \ _, c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2c1bnmy_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := []string{}\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmui7sh1d_test.go:20:26: undefined: strings

    /tmp/tmpmui7sh1d_test.go:21:12: undefined: is_prime

    /tmp/tmpmui7sh1d_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    var words []string\n    var word\
    \ string\n    for _, c := range sentence {\n        if c == ' ' {\n          \
    \  words = append(words, word)\n            word = \"\"\n        } else {\n  \
    \          word += string(c)\n        }\n    }\n    words = append(words, word)\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb8w0ljcq_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var words []string\n    var result string\n    for _,\
    \ word := range sentence {\n        if word == ' ' {\n            words = append(words,\
    \ result)\n            result = \"\"\n        } else {\n            result +=\
    \ string(word)\n        }\n    }\n    words = append(words, result)\n    result\
    \ = \"\"\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgwxkmyo8_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := []string{}\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmui7sh1d_test.go:20:26: undefined: strings

    /tmp/tmpmui7sh1d_test.go:21:12: undefined: is_prime

    /tmp/tmpmui7sh1d_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := []string{}\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmui7sh1d_test.go:20:26: undefined: strings

    /tmp/tmpmui7sh1d_test.go:21:12: undefined: is_prime

    /tmp/tmpmui7sh1d_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := []string{}\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmui7sh1d_test.go:20:26: undefined: strings

    /tmp/tmpmui7sh1d_test.go:21:12: undefined: is_prime

    /tmp/tmpmui7sh1d_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(word) {\n            result += string(word)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n \
    \ candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkzo4hsy__test.go:21:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var words []string\n    var result string\n    for _,\
    \ word := range sentence {\n        if word == ' ' {\n            words = append(words,\
    \ result)\n            result = \"\"\n        } else {\n            result +=\
    \ string(word)\n        }\n    }\n    words = append(words, result)\n    result\
    \ = \"\"\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgwxkmyo8_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := []string{}\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmui7sh1d_test.go:20:26: undefined: strings

    /tmp/tmpmui7sh1d_test.go:21:12: undefined: is_prime

    /tmp/tmpmui7sh1d_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    words := strings.Split(sentence, \" \")\n    var result\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbeg_jhb_test.go:19:14: undefined: strings

    /tmp/tmpjbeg_jhb_test.go:22:12: undefined: is_prime

    /tmp/tmpjbeg_jhb_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence)\
    \ <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence\
    \ string) string {\n    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9228b6pa_test.go:21:12: undefined: is_prime

    /tmp/tmp9228b6pa_test.go:21:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmp9228b6pa_test.go:22:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
