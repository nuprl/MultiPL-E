language: go_test.go
name: HumanEval_75_is_multiply_prime
results:
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a == 0 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n       \
    \     return is_multiply_prime(a / i)\n        }\n    }\n    return false\n}\n\
    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpr9jwlpkn_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpr9jwlpkn_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpr9jwlpkn_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpr9jwlpkn_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpr9jwlpkn_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a == 1 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n\
    \        if a % i == 0 {\n            return is_multiply_prime(a / i)\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp6_j1m_7m_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp6_j1m_7m_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp6_j1m_7m_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp6_j1m_7m_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp6_j1m_7m_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 3 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n \
    \       if a % i == 0 {\n            return is_multiply_prime(a / i)\n       \
    \ }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpfskcuw96_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfskcuw96_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__3\
    \ (0.00s)\n        tmpfskcuw96_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmpfskcuw96_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__7\
    \ (0.00s)\n        tmpfskcuw96_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__8 (0.00s)\n        tmpfskcuw96_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    var i int\n    var j int\n    var k int\n    var is_prime bool\n    var is_multiply_prime\
    \ bool\n    var is_prime_array [100]bool\n    var is_prime_array_index int\n \
    \   is_prime_array_index = 0\n    is_multiply_prime = false\n    for i = 2; i\
    \ < 100; i++ {\n        is_prime = true\n        for j = 2; j < i; j++ {\n   \
    \         if i % j == 0 {\n                is_prime = false\n                break\n\
    \            }\n        }\n        if is_prime {\n            is_prime_array[is_prime_array_index]\
    \ = true\n            is_prime_array_index++\n        }\n    }\n    for i = 0;\
    \ i < is_prime_array_index; i++ {\n        for j = 0; j < is_prime_array_index;\
    \ j++ {\n            for k = 0; k < is_prime_array_index; k++ {\n            \
    \    if is_prime_array[i] && is_prime_array[j] && is_prime_array[k] {\n      \
    \              if i * j * k == a {\n                        is_multiply_prime\
    \ = true\n                        break\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return is_multiply_prime\n}\n\nfunc\
    \ TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpyiemvm6z_test.go:73: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmpyiemvm6z_test.go:73:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpyiemvm6z_test.go:73: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpyiemvm6z_test.go:73:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpyiemvm6z_test.go:73: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpgrfk6z94_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmpgrfk6z94_test.go:39:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpgrfk6z94_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpgrfk6z94_test.go:39:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpgrfk6z94_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a == 1 {\n        return false\n    }\n    for i := 2; i <= a; i++ {\n\
    \        if a % i == 0 {\n            a = a / i\n            if a == 1 {\n   \
    \             return true\n            }\n            i = 1\n        }\n    }\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpg5bvh2yo_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmpg5bvh2yo_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpg5bvh2yo_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpg5bvh2yo_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpg5bvh2yo_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a == 0 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n       \
    \     return is_multiply_prime(a / i)\n        }\n    }\n    return false\n}\n\
    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpr9jwlpkn_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpr9jwlpkn_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpr9jwlpkn_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpr9jwlpkn_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpr9jwlpkn_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n \
    \       if a % i == 0 {\n            for j := 2; j < a; j++ {\n              \
    \  if a % j == 0 {\n                    for k := 2; k < a; k++ {\n           \
    \             if a % k == 0 {\n                            if a == i * j * k {\n\
    \                                return true\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpxbzbkif9_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpxbzbkif9_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpxbzbkif9_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n \
    \       if a % i == 0 {\n            for j := 2; j < a; j++ {\n              \
    \  if a % j == 0 {\n                    for k := 2; k < a; k++ {\n           \
    \             if a % k == 0 {\n                            if i * j * k == a {\n\
    \                                return true\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpp2oiuc25_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpp2oiuc25_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpp2oiuc25_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            for j := 2;\
    \ j < a; j++ {\n                if a % j == 0 {\n                    for k :=\
    \ 2; k < a; k++ {\n                        if a % k == 0 {\n                 \
    \           if a == i * j * k {\n                                return true\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n    }\n    return false\n}\n\
    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp8uxgf07u_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp8uxgf07u_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp8uxgf07u_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a == 0 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    var primes = []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    var i int\n   \
    \ for i = 0; i < len(primes); i++ {\n        if a % primes[i] == 0 {\n       \
    \     return is_multiply_prime(a / primes[i])\n        }\n    }\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpjppng0kd_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmpjppng0kd_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpjppng0kd_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpjppng0kd_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpjppng0kd_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n \
    \       if a % i == 0 {\n            if is_prime(i) {\n                if is_prime(a\
    \ / i) {\n                    return true\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvvg9szvt_test.go:19:16: undefined: is_prime

    /tmp/tmpvvg9szvt_test.go:20:20: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n \
    \       if a % i == 0 {\n            for j := 2; j < a; j++ {\n              \
    \  if a % j == 0 {\n                    for k := 2; k < a; k++ {\n           \
    \             if a % k == 0 {\n                            if i * j * k == a {\n\
    \                                return true\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpp2oiuc25_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpp2oiuc25_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpp2oiuc25_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n    if a % 2 == 0 {\n        return\
    \ is_multiply_prime(a / 2)\n    }\n    if a % 3 == 0 {\n        return is_multiply_prime(a\
    \ / 3)\n    }\n    if a % 5 == 0 {\n        return is_multiply_prime(a / 5)\n\
    \    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpcev1coek_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmpcev1coek_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    var i, j, k int\n    for i = 2; i < a; i++ {\n        if a % i == 0 {\n \
    \           for j = 2; j < a; j++ {\n                if a % j == 0 {\n       \
    \             for k = 2; k < a; k++ {\n                        if a % k == 0 {\n\
    \                            if i * j * k == a {\n                           \
    \     return true\n                            }\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpn7tahfyp_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpn7tahfyp_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpn7tahfyp_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n    if a % 2 == 0 {\n        return\
    \ is_multiply_prime(a / 2)\n    }\n    if a % 3 == 0 {\n        return is_multiply_prime(a\
    \ / 3)\n    }\n    if a % 5 == 0 {\n        return is_multiply_prime(a / 5)\n\
    \    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpcev1coek_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmpcev1coek_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n    if a % 2 == 0 {\n        return\
    \ is_multiply_prime(a / 2)\n    }\n    if a % 3 == 0 {\n        return is_multiply_prime(a\
    \ / 3)\n    }\n    if a % 5 == 0 {\n        return is_multiply_prime(a / 5)\n\
    \    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpcev1coek_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmpcev1coek_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    var i, j, k int\n    for i = 2; i < a; i++ {\n        if a % i == 0 {\n \
    \           for j = 2; j < a; j++ {\n                if a % j == 0 {\n       \
    \             for k = 2; k < a; k++ {\n                        if a % k == 0 {\n\
    \                            if i * j * k == a {\n                           \
    \     return true\n                            }\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpn7tahfyp_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpn7tahfyp_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpn7tahfyp_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n \
    \       if a % i == 0 {\n            for j := 2; j < a; j++ {\n              \
    \  if a % j == 0 {\n                    for k := 2; k < a; k++ {\n           \
    \             if a % k == 0 {\n                            if i * j * k == a {\n\
    \                                return true\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpp2oiuc25_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpp2oiuc25_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpp2oiuc25_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpgrfk6z94_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmpgrfk6z94_test.go:39:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpgrfk6z94_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpgrfk6z94_test.go:39:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpgrfk6z94_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n \
    \       if a % i == 0 {\n            for j := 2; j < a; j++ {\n              \
    \  if a % j == 0 {\n                    for k := 2; k < a; k++ {\n           \
    \             if a % k == 0 {\n                            if i * j * k == a {\n\
    \                                return true\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpp2oiuc25_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpp2oiuc25_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpp2oiuc25_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n    if a % 2 == 0 {\n        if\
    \ a % 3 == 0 {\n            return true\n        }\n        if a % 5 == 0 {\n\
    \            return true\n        }\n    }\n    if a % 3 == 0 {\n        if a\
    \ % 5 == 0 {\n            return true\n        }\n    }\n    return false\n}\n\
    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmps5n_4zo3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmps5n_4zo3_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmps5n_4zo3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmps5n_4zo3_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmps5n_4zo3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a == 0 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n       \
    \     return is_multiply_prime(a / i)\n        }\n    }\n    return false\n}\n\
    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpr9jwlpkn_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpr9jwlpkn_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpr9jwlpkn_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpr9jwlpkn_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpr9jwlpkn_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a == 1 {\n        return false\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n       \
    \     return is_multiply_prime(a / i)\n        }\n    }\n    return true\n}\n\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpg6qoqohv_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmpg6qoqohv_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpg6qoqohv_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpg6qoqohv_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpg6qoqohv_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n \
    \       if a % i == 0 {\n            for j := 2; j < a; j++ {\n              \
    \  if a % j == 0 {\n                    for k := 2; k < a; k++ {\n           \
    \             if a % k == 0 {\n                            if i * j * k == a {\n\
    \                                return true\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpp2oiuc25_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpp2oiuc25_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpp2oiuc25_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n \
    \       if a % i == 0 {\n            return is_multiply_prime(a / i)\n       \
    \ }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpmz893_bu_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpmz893_bu_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpmz893_bu_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmpmz893_bu_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpmz893_bu_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a <= 0 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n       \
    \     return is_multiply_prime(a / i)\n        }\n    }\n    return false\n}\n\
    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpftaumwyx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpftaumwyx_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpftaumwyx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpftaumwyx_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpftaumwyx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    var i, j, k int\n    for i = 2; i < a; i++ {\n        if a % i == 0 {\n \
    \           for j = 2; j < a; j++ {\n                if a % j == 0 {\n       \
    \             for k = 2; k < a; k++ {\n                        if a % k == 0 {\n\
    \                            if a == i * j * k {\n                           \
    \     return true\n                            }\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpvo3sn9y0_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpvo3sn9y0_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpvo3sn9y0_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 0
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n\n    for i := 2; i < a; i++ {\n\
    \        if a % i == 0 {\n            b := a / i\n            for j := 2; j <\
    \ b; j++ {\n                if b % j == 0 {\n                    c := b / j\n\
    \                    for k := 2; k < c; k++ {\n                        if c %\
    \ k == 0 {\n                            return false\n                       \
    \ }\n                    }\n                    return true\n                }\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n \
    \       if a % i == 0 {\n            for j := 2; j < a; j++ {\n              \
    \  if a % j == 0 {\n                    for k := 2; k < a; k++ {\n           \
    \             if a % k == 0 {\n                            return true\n     \
    \                   }\n                    }\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__3\
    \ (0.00s)\n        tmpzn5kds84_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmpzn5kds84_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__7\
    \ (0.00s)\n        tmpzn5kds84_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__8 (0.00s)\n        tmpzn5kds84_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n    if a % 2 == 0 {\n        return\
    \ is_multiply_prime(a / 2)\n    }\n    if a % 3 == 0 {\n        return is_multiply_prime(a\
    \ / 3)\n    }\n    if a % 5 == 0 {\n        return is_multiply_prime(a / 5)\n\
    \    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpcev1coek_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmpcev1coek_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a == 1 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n\
    \        if a % i == 0 {\n            if is_prime(i) {\n                if is_prime(a\
    \ / i) {\n                    return true\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmposyc81zo_test.go:19:16: undefined: is_prime

    /tmp/tmposyc81zo_test.go:20:20: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a == 1 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n\
    \        if a % i == 0 {\n            for j := 2; j < a; j++ {\n             \
    \   if a % j == 0 {\n                    for k := 2; k < a; k++ {\n          \
    \              if a % k == 0 {\n                            return true\n    \
    \                    }\n                    }\n                }\n           \
    \ }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__3\
    \ (0.00s)\n        tmpuj4igrrg_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmpuj4igrrg_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__7\
    \ (0.00s)\n        tmpuj4igrrg_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__8 (0.00s)\n        tmpuj4igrrg_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073521
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a == 1 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n\
    \        if a % i == 0 {\n            return is_multiply_prime(a / i)\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp6_j1m_7m_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp6_j1m_7m_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp6_j1m_7m_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp6_j1m_7m_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp6_j1m_7m_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n \
    \       if a % i == 0 {\n            return is_multiply_prime(a / i)\n       \
    \ }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpmz893_bu_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpmz893_bu_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpmz893_bu_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmpmz893_bu_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpmz893_bu_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n\n    for i := 2; i < a; i++ {\n\
    \        if a % i == 0 {\n            for j := 2; j < a; j++ {\n             \
    \   if a % j == 0 {\n                    for k := 2; k < a; k++ {\n          \
    \              if a % k == 0 {\n                            if i * j * k == a\
    \ {\n                                return true\n                           \
    \ }\n                        }\n                    }\n                }\n   \
    \         }\n        }\n    }\n\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpf9yk_mif_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpf9yk_mif_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpf9yk_mif_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073521
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a == 1 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n\
    \        if a % i == 0 {\n            return is_multiply_prime(a / i)\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp6_j1m_7m_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp6_j1m_7m_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp6_j1m_7m_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp6_j1m_7m_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp6_j1m_7m_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n    if a % 2 == 0 {\n        return\
    \ is_multiply_prime(a / 2)\n    }\n    if a % 3 == 0 {\n        return is_multiply_prime(a\
    \ / 3)\n    }\n    if a % 5 == 0 {\n        return is_multiply_prime(a / 5)\n\
    \    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpcev1coek_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmpcev1coek_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    var b, c, d int\n    for b = 2; b < a; b++ {\n        if a % b == 0 {\n \
    \           for c = 2; c < b; c++ {\n                if b % c == 0 {\n       \
    \             for d = 2; d < c; d++ {\n                        if c % d == 0 {\n\
    \                            if a == b * c * d {\n                           \
    \     return true\n                            }\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpne5ghxfw_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpne5ghxfw_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpne5ghxfw_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpne5ghxfw_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__7\
    \ (0.00s)\n        tmpne5ghxfw_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpne5ghxfw_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073521
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    var i, j, k int\n    for i = 2; i < a; i++ {\n        if a % i == 0 {\n \
    \           for j = 2; j < a; j++ {\n                if a % j == 0 {\n       \
    \             for k = 2; k < a; k++ {\n                        if a % k == 0 {\n\
    \                            if a == i * j * k {\n                           \
    \     return true\n                            }\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpvo3sn9y0_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpvo3sn9y0_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpvo3sn9y0_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n    if a % 2 == 0 {\n        return\
    \ is_multiply_prime(a / 2)\n    }\n    if a % 3 == 0 {\n        return is_multiply_prime(a\
    \ / 3)\n    }\n    if a % 5 == 0 {\n        return is_multiply_prime(a / 5)\n\
    \    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpcev1coek_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmpcev1coek_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a == 1 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n\
    \        if a % i == 0 {\n            return is_multiply_prime(a / i)\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp6_j1m_7m_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp6_j1m_7m_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp6_j1m_7m_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp6_j1m_7m_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp6_j1m_7m_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpgrfk6z94_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmpgrfk6z94_test.go:39:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpgrfk6z94_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpgrfk6z94_test.go:39:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpgrfk6z94_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    var result bool = false\n    var i int = 2\n    var j int = 2\n    var k\
    \ int = 2\n    for i < a {\n        for j < a {\n            for k < a {\n   \
    \             if i * j * k == a {\n                    result = true\n       \
    \         }\n                k++\n            }\n            j++\n        }\n\
    \        i++\n    }\n    return result\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmphvgwemo1_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmphvgwemo1_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmphvgwemo1_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmphvgwemo1_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073521
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n    if a % 2 == 0 {\n        if\
    \ a % 3 == 0 {\n            return true\n        }\n        if a % 5 == 0 {\n\
    \            return true\n        }\n    }\n    if a % 3 == 0 {\n        if a\
    \ % 5 == 0 {\n            return true\n        }\n    }\n    return false\n}\n\
    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmps5n_4zo3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmps5n_4zo3_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmps5n_4zo3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmps5n_4zo3_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmps5n_4zo3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n \
    \       if a % i == 0 {\n            for j := 2; j < a; j++ {\n              \
    \  if a % j == 0 {\n                    for k := 2; k < a; k++ {\n           \
    \             if a % k == 0 {\n                            if i * j * k == a {\n\
    \                                return true\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpp2oiuc25_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpp2oiuc25_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpp2oiuc25_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a <= 0 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n       \
    \     return is_multiply_prime(a / i)\n        }\n    }\n    return false\n}\n\
    \nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpftaumwyx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpftaumwyx_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpftaumwyx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpftaumwyx_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpftaumwyx_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpgrfk6z94_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmpgrfk6z94_test.go:39:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpgrfk6z94_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpgrfk6z94_test.go:39:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpgrfk6z94_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            for j := 2;\
    \ j < a; j++ {\n                if a % j == 0 {\n                    for k :=\
    \ 2; k < a; k++ {\n                        if a % k == 0 {\n                 \
    \           return true\n                        }\n                    }\n  \
    \              }\n            }\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__3\
    \ (0.00s)\n        tmpkzedybmk_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmpkzedybmk_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__7\
    \ (0.00s)\n        tmpkzedybmk_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__8 (0.00s)\n        tmpkzedybmk_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073521
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a == 1 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n\
    \        if a % i == 0 {\n            return is_multiply_prime(a / i)\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp6_j1m_7m_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp6_j1m_7m_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp6_j1m_7m_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp6_j1m_7m_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp6_j1m_7m_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    var i, j, k int\n    for i = 2; i < a; i++ {\n        if a % i == 0 {\n \
    \           for j = 2; j < a; j++ {\n                if a % j == 0 {\n       \
    \             for k = 2; k < a; k++ {\n                        if a % k == 0 {\n\
    \                            if i * j * k == a {\n                           \
    \     return true\n                            }\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpn7tahfyp_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpn7tahfyp_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpn7tahfyp_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 3 {\n        return false\n    }\n    if a % 2 == 0 {\n        return\
    \ is_multiply_prime(a / 2)\n    }\n    if a % 3 == 0 {\n        return is_multiply_prime(a\
    \ / 3)\n    }\n    if a % 5 == 0 {\n        return is_multiply_prime(a / 5)\n\
    \    }\n    if a % 7 == 0 {\n        return is_multiply_prime(a / 7)\n    }\n\
    \    if a % 11 == 0 {\n        return is_multiply_prime(a / 11)\n    }\n    if\
    \ a % 13 == 0 {\n        return is_multiply_prime(a / 13)\n    }\n    if a % 17\
    \ == 0 {\n        return is_multiply_prime(a / 17)\n    }\n    if a % 19 == 0\
    \ {\n        return is_multiply_prime(a / 19)\n    }\n    if a % 23 == 0 {\n \
    \       return is_multiply_prime(a / 23)\n    }\n    if a % 29 == 0 {\n      \
    \  return is_multiply_prime(a / 29)\n    }\n    if a % 31 == 0 {\n        return\
    \ is_multiply_prime(a / 31)\n    }\n    if a % 37 == 0 {\n        return is_multiply_prime(a\
    \ / 37)\n    }\n    if a % 41 == 0 {\n        return is_multiply_prime(a / 41)\n\
    \    }\n    if a % 43 == 0 {\n        return is_multiply_prime(a / 43)\n    }\n\
    \    if a % 47 == 0 {\n        return is_multiply_prime(a / 47)\n    }\n    if\
    \ a % 53 == 0 {\n        return is_multiply_prime(a / 53)\n    }\n    if a % 59\
    \ == 0 {\n        return is_multiply_prime(a / 59)\n    }\n    if a % 61 == 0\
    \ {\n        return is_multiply_prime(a / 61)\n    }\n    if a % 67 == 0 {\n \
    \       return\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpve9qglni_test.go:73:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073521
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n    if a % 2 == 0 {\n        return\
    \ is_multiply_prime(a / 2)\n    }\n    if a % 3 == 0 {\n        return is_multiply_prime(a\
    \ / 3)\n    }\n    if a % 5 == 0 {\n        return is_multiply_prime(a / 5)\n\
    \    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpcev1coek_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmpcev1coek_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a == 0 {\n        return false\n    }\n    if a == 1 {\n        return\
    \ true\n    }\n    if a == 2 {\n        return false\n    }\n    if a == 3 {\n\
    \        return true\n    }\n    if a == 4 {\n        return false\n    }\n  \
    \  if a == 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n\
    \    }\n    if a == 7 {\n        return true\n    }\n    if a == 8 {\n       \
    \ return false\n    }\n    if a == 9 {\n        return true\n    }\n    if a ==\
    \ 10 {\n        return true\n    }\n    if a == 11 {\n        return true\n  \
    \  }\n    if a == 12 {\n        return true\n    }\n    if a == 13 {\n       \
    \ return true\n    }\n    if a == 14 {\n        return false\n    }\n    if a\
    \ == 15 {\n        return true\n    }\n    if a == 16 {\n        return false\n\
    \    }\n    if a == 17 {\n        return true\n    }\n    if a == 18 {\n     \
    \   return true\n    }\n    if a == 19 {\n        return true\n    }\n    if a\
    \ == 20 {\n        return true\n    }\n    if a == 21 {\n        return true\n\
    \    }\n    if a == 22 {\n        return false\n    }\n    if a == 23 {\n    \
    \    return true\n    }\n    if a == 24 {\n        return true\n    }\n    if\
    \ a == 25 {\n        return true\n    }\n    if a == 26 {\n        return false\n\
    \    }\n    if a == 27 {\n        return true\n    }\n    if a == 28 {\n     \
    \   return false\n    }\n    if a == 29 {\n        return true\n    }\n    if\
    \ a == 30 {\n        return true\n    }\n    if a == 31 {\n        return true\n\
    \    }\n    if a == 32 {\n        return false\n    }\n    if a == 33 {\n    \
    \    return false\n    }\n    if a == 34 {\n        return false\n    }\n    if\
    \ a == 35 {\n        return true\n    }\n    if a == 36 {\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdxy1ia75_test.go:124:6: expected ''('', found TestIs_Multiply_Prime

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073521
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n \
    \       if a % i == 0 {\n            for j := 2; j < a; j++ {\n              \
    \  if a % j == 0 {\n                    for k := 2; k < a; k++ {\n           \
    \             if a % k == 0 {\n                            if i * j * k == a {\n\
    \                                return true\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpp2oiuc25_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpp2oiuc25_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpp2oiuc25_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n    if a % 2 == 0 {\n        return\
    \ is_multiply_prime(a / 2)\n    }\n    if a % 3 == 0 {\n        return is_multiply_prime(a\
    \ / 3)\n    }\n    if a % 5 == 0 {\n        return is_multiply_prime(a / 5)\n\
    \    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpcev1coek_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmpcev1coek_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n \
    \       if a % i == 0 {\n            for j := 2; j < a; j++ {\n              \
    \  if a % j == 0 {\n                    for k := 2; k < a; k++ {\n           \
    \             if a % k == 0 {\n                            if i * j * k == a {\n\
    \                                return true\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmpp2oiuc25_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpp2oiuc25_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpp2oiuc25_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n    if a % 2 == 0 {\n        return\
    \ is_multiply_prime(a / 2)\n    }\n    if a % 3 == 0 {\n        return is_multiply_prime(a\
    \ / 3)\n    }\n    if a % 5 == 0 {\n        return is_multiply_prime(a / 5)\n\
    \    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpcev1coek_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmpcev1coek_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a == 1 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n\
    \        if a % i == 0 {\n            return is_multiply_prime(a / i)\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp6_j1m_7m_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp6_j1m_7m_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp6_j1m_7m_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp6_j1m_7m_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp6_j1m_7m_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a == 1 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n\
    \        if a % i == 0 {\n            return is_multiply_prime(a / i)\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp6_j1m_7m_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp6_j1m_7m_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp6_j1m_7m_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp6_j1m_7m_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp6_j1m_7m_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n \
    \       if a % i == 0 {\n            if is_prime(i) {\n                if is_prime(a\
    \ / i) {\n                    return true\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvvg9szvt_test.go:19:16: undefined: is_prime

    /tmp/tmpvvg9szvt_test.go:20:20: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n \
    \       if a % i == 0 {\n            if is_prime(i) {\n                for j :=\
    \ 2; j < a; j++ {\n                    if a % j == 0 {\n                     \
    \   if is_prime(j) {\n                            for k := 2; k < a; k++ {\n \
    \                               if a % k == 0 {\n                            \
    \        if is_prime(k) {\n                                        if i * j *\
    \ k == a {\n                                            return true\n        \
    \                                }\n                                    }\n  \
    \                              }\n                            }\n            \
    \            }\n                    }\n                }\n            }\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpha__66oq_test.go:19:16: undefined: is_prime

    /tmp/tmpha__66oq_test.go:22:28: undefined: is_prime

    /tmp/tmpha__66oq_test.go:25:40: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073521
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    if a < 6 {\n        return false\n    }\n    if a % 2 == 0 {\n        return\
    \ is_multiply_prime(a / 2)\n    }\n    if a % 3 == 0 {\n        return is_multiply_prime(a\
    \ / 3)\n    }\n    if a % 5 == 0 {\n        return is_multiply_prime(a / 5)\n\
    \    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpcev1coek_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmpcev1coek_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpcev1coek_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    // Write your code here\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpz02bp176_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpz02bp176_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n\
    \    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp1z37rgcy_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmp1z37rgcy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073520
