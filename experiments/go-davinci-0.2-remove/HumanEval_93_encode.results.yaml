language: go_test.go
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, c := range message {\n        if c >=\
    \ 'a' && c <= 'z' {\n            encoded += string(c - 32)\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            encoded += string(c + 32)\n        } else\
    \ {\n            encoded += string(c)\n        }\n    }\n    return encoded\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpvrbldo_u_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpvrbldo_u_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpvrbldo_u_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpvrbldo_u_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpvrbldo_u_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 'a' + 'A')\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            result += string(c - 'A' + 'a')\n      \
    \  } else {\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbwdr1d40_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpbwdr1d40_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpbwdr1d40_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, c := range message {\n        if c >=\
    \ 'a' && c <= 'z' {\n            encoded += string(c - 'a' + 'A')\n        } else\
    \ if c >= 'A' && c <= 'Z' {\n            encoded += string(c - 'A' + 'a')\n  \
    \      } else if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n\
    \            encoded += string(c + 2)\n        } else if c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U' {\n            encoded += string(c + 2)\n\
    \        } else {\n            encoded += string(c)\n        }\n    }\n    return\
    \ encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpr8emq3tk_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpr8emq3tk_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpr8emq3tk_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpr8emq3tk_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpr8emq3tk_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 'a' + 'A')\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            result += string(c - 'A' + 'a')\n      \
    \  } else {\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbwdr1d40_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpbwdr1d40_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpbwdr1d40_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, letter := range message {\n        if\
    \ letter >= 'a' && letter <= 'z' {\n            encoded += string(letter - 'a'\
    \ + 'A')\n        } else if letter >= 'A' && letter <= 'Z' {\n            encoded\
    \ += string(letter - 'A' + 'a')\n        } else {\n            encoded += string(letter)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmph5r_9qeu_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmph5r_9qeu_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmph5r_9qeu_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmph5r_9qeu_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmph5r_9qeu_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'a' {\n            encoded += \"c\"\n        } else\
    \ if char == 'e' {\n            encoded += \"g\"\n        } else if char == 'i'\
    \ {\n            encoded += \"k\"\n        } else if char == 'o' {\n         \
    \   encoded += \"q\"\n        } else if char == 'u' {\n            encoded +=\
    \ \"y\"\n        } else if char == 'A' {\n            encoded += \"C\"\n     \
    \   } else if char == 'E' {\n            encoded += \"G\"\n        } else if char\
    \ == 'I' {\n            encoded += \"K\"\n        } else if char == 'O' {\n  \
    \          encoded += \"Q\"\n        } else if char == 'U' {\n            encoded\
    \ += \"Y\"\n        } else {\n            encoded += string(char)\n        }\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpwalhfag__test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpwalhfag__test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpwalhfag__test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'a' {\n            encoded += \"c\"\n        } else\
    \ if char == 'e' {\n            encoded += \"g\"\n        } else if char == 'i'\
    \ {\n            encoded += \"k\"\n        } else if char == 'o' {\n         \
    \   encoded += \"q\"\n        } else if char == 'u' {\n            encoded +=\
    \ \"y\"\n        } else if char == 'A' {\n            encoded += \"C\"\n     \
    \   } else if char == 'E' {\n            encoded += \"G\"\n        } else if char\
    \ == 'I' {\n            encoded += \"K\"\n        } else if char == 'O' {\n  \
    \          encoded += \"Q\"\n        } else if char == 'U' {\n            encoded\
    \ += \"Y\"\n        } else {\n            encoded += string(char)\n        }\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpwalhfag__test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpwalhfag__test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpwalhfag__test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, c := range message {\n        if c >=\
    \ 'a' && c <= 'z' {\n            encoded += string(c - 'a' + 'A')\n        } else\
    \ if c >= 'A' && c <= 'Z' {\n            encoded += string(c - 'A' + 'a')\n  \
    \      } else if c == 'a' {\n            encoded += \"c\"\n        } else if c\
    \ == 'e' {\n            encoded += \"g\"\n        } else if c == 'i' {\n     \
    \       encoded += \"k\"\n        } else if c == 'o' {\n            encoded +=\
    \ \"q\"\n        } else if c == 'u' {\n            encoded += \"y\"\n        }\
    \ else if c == 'A' {\n            encoded += \"C\"\n        } else if c == 'E'\
    \ {\n            encoded += \"G\"\n        } else if c == 'I' {\n            encoded\
    \ += \"K\"\n        } else if c == 'O' {\n            encoded += \"Q\"\n     \
    \   } else if c == 'U' {\n            encoded += \"Y\"\n        } else {\n   \
    \         encoded += string(c)\n        }\n    }\n    return encoded\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpxgxvcg38_test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpxgxvcg38_test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpxgxvcg38_test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpxgxvcg38_test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpxgxvcg38_test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'a' {\n            encoded += \"c\"\n        } else\
    \ if char == 'e' {\n            encoded += \"g\"\n        } else if char == 'i'\
    \ {\n            encoded += \"k\"\n        } else if char == 'o' {\n         \
    \   encoded += \"q\"\n        } else if char == 'u' {\n            encoded +=\
    \ \"y\"\n        } else if char == 'A' {\n            encoded += \"C\"\n     \
    \   } else if char == 'E' {\n            encoded += \"G\"\n        } else if char\
    \ == 'I' {\n            encoded += \"K\"\n        } else if char == 'O' {\n  \
    \          encoded += \"Q\"\n        } else if char == 'U' {\n            encoded\
    \ += \"Y\"\n        } else {\n            encoded += string(char)\n        }\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpwalhfag__test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpwalhfag__test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpwalhfag__test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 'a' + 'A')\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            result += string(c - 'A' + 'a')\n      \
    \  } else {\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbwdr1d40_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpbwdr1d40_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpbwdr1d40_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, c := range message {\n        if c >=\
    \ 'a' && c <= 'z' {\n            encoded += string(c - 'a' + 'A')\n        } else\
    \ if c >= 'A' && c <= 'Z' {\n            encoded += string(c - 'A' + 'a')\n  \
    \      } else if c == 'a' {\n            encoded += \"c\"\n        } else if c\
    \ == 'e' {\n            encoded += \"g\"\n        } else if c == 'i' {\n     \
    \       encoded += \"k\"\n        } else if c == 'o' {\n            encoded +=\
    \ \"q\"\n        } else if c == 'u' {\n            encoded += \"y\"\n        }\
    \ else if c == 'A' {\n            encoded += \"C\"\n        } else if c == 'E'\
    \ {\n            encoded += \"G\"\n        } else if c == 'I' {\n            encoded\
    \ += \"K\"\n        } else if c == 'O' {\n            encoded += \"Q\"\n     \
    \   } else if c == 'U' {\n            encoded += \"Y\"\n        } else {\n   \
    \         encoded += string(c)\n        }\n    }\n    return encoded\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpxgxvcg38_test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpxgxvcg38_test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpxgxvcg38_test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpxgxvcg38_test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpxgxvcg38_test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'a' {\n            encoded += \"c\"\n        } else\
    \ if char == 'e' {\n            encoded += \"g\"\n        } else if char == 'i'\
    \ {\n            encoded += \"k\"\n        } else if char == 'o' {\n         \
    \   encoded += \"q\"\n        } else if char == 'u' {\n            encoded +=\
    \ \"y\"\n        } else if char == 'A' {\n            encoded += \"C\"\n     \
    \   } else if char == 'E' {\n            encoded += \"G\"\n        } else if char\
    \ == 'I' {\n            encoded += \"K\"\n        } else if char == 'O' {\n  \
    \          encoded += \"Q\"\n        } else if char == 'U' {\n            encoded\
    \ += \"Y\"\n        } else {\n            encoded += string(char)\n        }\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpwalhfag__test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpwalhfag__test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpwalhfag__test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    // TODO: Implement\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpa0acel5y_test.go:36: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpa0acel5y_test.go:36: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpa0acel5y_test.go:36:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - ('a' - 'A'))\n        } else\
    \ if c >= 'A' && c <= 'Z' {\n            result += string(c + ('a' - 'A'))\n \
    \       } else {\n            result += string(c)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpc041aj2u_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpc041aj2u_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpc041aj2u_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpc041aj2u_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpc041aj2u_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    // TODO: implement\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp2rr_p1nr_test.go:36: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp2rr_p1nr_test.go:36: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmp2rr_p1nr_test.go:36: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmp2rr_p1nr_test.go:36:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmp2rr_p1nr_test.go:36: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            result += string(char + 2 - 'a' + 'A')\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 2 - 'A' + 'a')\n        } else {\n            result += string(char)\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpyq5uq2f8_test.go:45: expected 'tgst', got 'vguv'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpyq5uq2f8_test.go:45: expected 'mWDCSKR', got 'oWFCUKT'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpyq5uq2f8_test.go:45:\
    \ expected 'ygs', got '{gu'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpyq5uq2f8_test.go:45: expected 'tHKS KS C MGSSCGG', got 'vJKU KU C OGUUCIG'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpyq5uq2f8_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'k fQpV mPqY yJcV Vq yTkVg'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n\
    \        } else {\n            result += string(char)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpgzwnmkgf_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpgzwnmkgf_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpgzwnmkgf_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'a' {\n            encoded += \"c\"\n        } else\
    \ if char == 'e' {\n            encoded += \"g\"\n        } else if char == 'i'\
    \ {\n            encoded += \"k\"\n        } else if char == 'o' {\n         \
    \   encoded += \"q\"\n        } else if char == 'u' {\n            encoded +=\
    \ \"y\"\n        } else if char == 'A' {\n            encoded += \"C\"\n     \
    \   } else if char == 'E' {\n            encoded += \"G\"\n        } else if char\
    \ == 'I' {\n            encoded += \"K\"\n        } else if char == 'O' {\n  \
    \          encoded += \"Q\"\n        } else if char == 'U' {\n            encoded\
    \ += \"Y\"\n        } else {\n            encoded += string(char)\n        }\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpwalhfag__test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpwalhfag__test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpwalhfag__test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 'a' + 'A')\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            result += string(c - 'A' + 'a')\n      \
    \  } else {\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbwdr1d40_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpbwdr1d40_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpbwdr1d40_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 'a' + 'A')\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            result += string(c - 'A' + 'a')\n      \
    \  } else {\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbwdr1d40_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpbwdr1d40_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpbwdr1d40_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, c := range message {\n        if c >=\
    \ 'a' && c <= 'z' {\n            encoded += string(c - 'a' + 'A')\n        } else\
    \ if c >= 'A' && c <= 'Z' {\n            encoded += string(c - 'A' + 'a')\n  \
    \      } else if c == 'a' {\n            encoded += \"c\"\n        } else if c\
    \ == 'e' {\n            encoded += \"g\"\n        } else if c == 'i' {\n     \
    \       encoded += \"k\"\n        } else if c == 'o' {\n            encoded +=\
    \ \"q\"\n        } else if c == 'u' {\n            encoded += \"y\"\n        }\
    \ else if c == 'A' {\n            encoded += \"C\"\n        } else if c == 'E'\
    \ {\n            encoded += \"G\"\n        } else if c == 'I' {\n            encoded\
    \ += \"K\"\n        } else if c == 'O' {\n            encoded += \"Q\"\n     \
    \   } else if c == 'U' {\n            encoded += \"Y\"\n        } else {\n   \
    \         encoded += string(c)\n        }\n    }\n    return encoded\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpxgxvcg38_test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpxgxvcg38_test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpxgxvcg38_test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpxgxvcg38_test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpxgxvcg38_test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n\
    \        } else {\n            result += string(char)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpgzwnmkgf_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpgzwnmkgf_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpgzwnmkgf_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 'a' + 'A')\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            result += string(c - 'A' + 'a')\n      \
    \  } else {\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbwdr1d40_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpbwdr1d40_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpbwdr1d40_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, c := range message {\n        switch c\
    \ {\n        case 'a':\n            encoded += \"c\"\n        case 'e':\n    \
    \        encoded += \"g\"\n        case 'i':\n            encoded += \"k\"\n \
    \       case 'o':\n            encoded += \"q\"\n        case 'u':\n         \
    \   encoded += \"y\"\n        case 'A':\n            encoded += \"C\"\n      \
    \  case 'E':\n            encoded += \"G\"\n        case 'I':\n            encoded\
    \ += \"K\"\n        case 'O':\n            encoded += \"Q\"\n        case 'U':\n\
    \            encoded += \"Y\"\n        default:\n            encoded += string(c)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp4rjixtpg_test.go:62: expected 'tgst', got 'TGST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp4rjixtpg_test.go:62: expected 'mWDCSKR', got 'Mydcskr'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp4rjixtpg_test.go:62:\
    \ expected 'ygs', got 'YGS'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp4rjixtpg_test.go:62: expected 'tHKS KS C MGSSCGG', got 'Thks ks c mgsscgg'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp4rjixtpg_test.go:62:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'K DqNt KnQw WhCt tQ WrKtG'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, c := range message {\n        if c >=\
    \ 'a' && c <= 'z' {\n            encoded += string(c - 32)\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            encoded += string(c + 32)\n        } else\
    \ {\n            encoded += string(c)\n        }\n    }\n    return encoded\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpvrbldo_u_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpvrbldo_u_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpvrbldo_u_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpvrbldo_u_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpvrbldo_u_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    // your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmppe6xqbwf_test.go:36: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmppe6xqbwf_test.go:36: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmppe6xqbwf_test.go:36: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmppe6xqbwf_test.go:36:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmppe6xqbwf_test.go:36: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n\
    \        } else {\n            result += string(char)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpgzwnmkgf_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpgzwnmkgf_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpgzwnmkgf_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 'a' + 'A')\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            result += string(c - 'A' + 'a')\n      \
    \  } else {\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbwdr1d40_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpbwdr1d40_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpbwdr1d40_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    // TODO: Implement\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpa0acel5y_test.go:36: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpa0acel5y_test.go:36: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpa0acel5y_test.go:36:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'a' {\n            encoded += \"c\"\n        } else\
    \ if char == 'e' {\n            encoded += \"g\"\n        } else if char == 'i'\
    \ {\n            encoded += \"k\"\n        } else if char == 'o' {\n         \
    \   encoded += \"q\"\n        } else if char == 'u' {\n            encoded +=\
    \ \"y\"\n        } else if char == 'A' {\n            encoded += \"C\"\n     \
    \   } else if char == 'E' {\n            encoded += \"G\"\n        } else if char\
    \ == 'I' {\n            encoded += \"K\"\n        } else if char == 'O' {\n  \
    \          encoded += \"Q\"\n        } else if char == 'U' {\n            encoded\
    \ += \"Y\"\n        } else {\n            encoded += string(char)\n        }\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpwalhfag__test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpwalhfag__test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpwalhfag__test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n\
    \        } else {\n            result += string(char)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpgzwnmkgf_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpgzwnmkgf_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpgzwnmkgf_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    // TODO: Implement\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpa0acel5y_test.go:36: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpa0acel5y_test.go:36: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpa0acel5y_test.go:36:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'a' {\n            encoded += \"c\"\n        } else\
    \ if char == 'e' {\n            encoded += \"g\"\n        } else if char == 'i'\
    \ {\n            encoded += \"k\"\n        } else if char == 'o' {\n         \
    \   encoded += \"q\"\n        } else if char == 'u' {\n            encoded +=\
    \ \"y\"\n        } else if char == 'A' {\n            encoded += \"C\"\n     \
    \   } else if char == 'E' {\n            encoded += \"G\"\n        } else if char\
    \ == 'I' {\n            encoded += \"K\"\n        } else if char == 'O' {\n  \
    \          encoded += \"Q\"\n        } else if char == 'U' {\n            encoded\
    \ += \"Y\"\n        } else {\n            encoded += string(char)\n        }\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpwalhfag__test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpwalhfag__test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpwalhfag__test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 'a' + 'A')\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            result += string(c - 'A' + 'a')\n      \
    \  } else {\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbwdr1d40_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpbwdr1d40_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpbwdr1d40_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    encoded := \"\"\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            encoded += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            encoded += string(c + 32)\n        } else {\n\
    \            encoded += string(c)\n        }\n    }\n    return encoded\n}\n\n\
    func TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpyek0b7h5_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpyek0b7h5_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpyek0b7h5_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpyek0b7h5_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpyek0b7h5_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'a' {\n            encoded += \"c\"\n        } else\
    \ if char == 'e' {\n            encoded += \"g\"\n        } else if char == 'i'\
    \ {\n            encoded += \"k\"\n        } else if char == 'o' {\n         \
    \   encoded += \"q\"\n        } else if char == 'u' {\n            encoded +=\
    \ \"y\"\n        } else if char == 'A' {\n            encoded += \"C\"\n     \
    \   } else if char == 'E' {\n            encoded += \"G\"\n        } else if char\
    \ == 'I' {\n            encoded += \"K\"\n        } else if char == 'O' {\n  \
    \          encoded += \"Q\"\n        } else if char == 'U' {\n            encoded\
    \ += \"Y\"\n        } else {\n            encoded += string(char)\n        }\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpwalhfag__test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpwalhfag__test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpwalhfag__test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, c := range message {\n        if c >=\
    \ 'a' && c <= 'z' {\n            encoded += string(c - 32)\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            encoded += string(c + 32)\n        } else\
    \ {\n            encoded += string(c)\n        }\n    }\n    return encoded\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpvrbldo_u_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpvrbldo_u_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpvrbldo_u_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpvrbldo_u_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpvrbldo_u_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, letter := range message {\n        if\
    \ 'a' <= letter && letter <= 'z' {\n            encoded += string(letter - 'a'\
    \ + 'A')\n        } else if 'A' <= letter && letter <= 'Z' {\n            encoded\
    \ += string(letter - 'A' + 'a')\n        } else {\n            encoded += string(letter)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpjmpyfwfl_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpjmpyfwfl_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpjmpyfwfl_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpjmpyfwfl_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpjmpyfwfl_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 0
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            char = char - 32\n        } else if char\
    \ >= 'A' && char <= 'Z' {\n            char = char + 32\n        }\n        switch\
    \ char {\n        case 'A':\n            char = 'C'\n        case 'E':\n     \
    \       char = 'G'\n        case 'I':\n            char = 'K'\n        case 'O':\n\
    \            char = 'Q'\n        case 'U':\n            char = 'W'\n        case\
    \ 'a':\n            char = 'c'\n        case 'e':\n            char = 'g'\n  \
    \      case 'i':\n            char = 'k'\n        case 'o':\n            char\
    \ = 'q'\n        case 'u':\n            char = 'w'\n        }\n        result\
    \ += string(char)\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, c := range message {\n        if c >=\
    \ 'a' && c <= 'z' {\n            encoded += string(c - 'a' + 'A')\n        } else\
    \ if c >= 'A' && c <= 'Z' {\n            encoded += string(c - 'A' + 'a')\n  \
    \      } else if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n\
    \            encoded += string(c + 2)\n        } else if c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U' {\n            encoded += string(c + 2)\n\
    \        } else {\n            encoded += string(c)\n        }\n    }\n    return\
    \ encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpr8emq3tk_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpr8emq3tk_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpr8emq3tk_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpr8emq3tk_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpr8emq3tk_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    // var encoded string\n    // for _, char := range message {\n    //\
    \     if char >= 'a' && char <= 'z' {\n    //         encoded += string(char -\
    \ 32)\n    //     } else if char >= 'A' && char <= 'Z' {\n    //         encoded\
    \ += string(char + 32)\n    //     } else {\n    //         encoded += string(char)\n\
    \    //     }\n    // }\n    // return encoded\n    return \"\"\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpjkeffk1__test.go:46: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpjkeffk1__test.go:46: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpjkeffk1__test.go:46: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpjkeffk1__test.go:46:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpjkeffk1__test.go:46: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    // return \"\"\n    var result string\n    for _, c := range message\
    \ {\n        if c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n\
    \        } else if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n\
    \        } else {\n            result += string(c)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpxjhgj4h5_test.go:46: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpxjhgj4h5_test.go:46: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpxjhgj4h5_test.go:46:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpxjhgj4h5_test.go:46: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpxjhgj4h5_test.go:46:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'a' {\n            encoded += \"c\"\n        } else\
    \ if char == 'e' {\n            encoded += \"g\"\n        } else if char == 'i'\
    \ {\n            encoded += \"k\"\n        } else if char == 'o' {\n         \
    \   encoded += \"q\"\n        } else if char == 'u' {\n            encoded +=\
    \ \"y\"\n        } else if char == 'A' {\n            encoded += \"C\"\n     \
    \   } else if char == 'E' {\n            encoded += \"G\"\n        } else if char\
    \ == 'I' {\n            encoded += \"K\"\n        } else if char == 'O' {\n  \
    \          encoded += \"Q\"\n        } else if char == 'U' {\n            encoded\
    \ += \"Y\"\n        } else {\n            encoded += string(char)\n        }\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpwalhfag__test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpwalhfag__test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpwalhfag__test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, c := range message {\n        if c >=\
    \ 'a' && c <= 'z' {\n            encoded += string(c - 32)\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            encoded += string(c + 32)\n        } else\
    \ {\n            encoded += string(c)\n        }\n    }\n    return encoded\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpvrbldo_u_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpvrbldo_u_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpvrbldo_u_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpvrbldo_u_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpvrbldo_u_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'a' {\n            encoded += \"c\"\n        } else\
    \ if char == 'e' {\n            encoded += \"g\"\n        } else if char == 'i'\
    \ {\n            encoded += \"k\"\n        } else if char == 'o' {\n         \
    \   encoded += \"q\"\n        } else if char == 'u' {\n            encoded +=\
    \ \"y\"\n        } else if char == 'A' {\n            encoded += \"C\"\n     \
    \   } else if char == 'E' {\n            encoded += \"G\"\n        } else if char\
    \ == 'I' {\n            encoded += \"K\"\n        } else if char == 'O' {\n  \
    \          encoded += \"Q\"\n        } else if char == 'U' {\n            encoded\
    \ += \"Y\"\n        } else {\n            encoded += string(char)\n        }\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpwalhfag__test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpwalhfag__test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpwalhfag__test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    // TODO: Implement\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpa0acel5y_test.go:36: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpa0acel5y_test.go:36: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpa0acel5y_test.go:36:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, c := range message {\n        if c >=\
    \ 'a' && c <= 'z' {\n            encoded += string(c - 32)\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            encoded += string(c + 32)\n        } else\
    \ {\n            encoded += string(c)\n        }\n    }\n    return encoded\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpvrbldo_u_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpvrbldo_u_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpvrbldo_u_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpvrbldo_u_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpvrbldo_u_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 'a' + 'A')\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            result += string(c - 'A' + 'a')\n      \
    \  } else {\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbwdr1d40_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpbwdr1d40_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpbwdr1d40_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, c := range message {\n        if c >=\
    \ 'a' && c <= 'z' {\n            encoded += string(c - 'a' + 'A')\n        } else\
    \ if c >= 'A' && c <= 'Z' {\n            encoded += string(c - 'A' + 'a')\n  \
    \      } else if c == 'a' {\n            encoded += \"c\"\n        } else if c\
    \ == 'e' {\n            encoded += \"g\"\n        } else if c == 'i' {\n     \
    \       encoded += \"k\"\n        } else if c == 'o' {\n            encoded +=\
    \ \"q\"\n        } else if c == 'u' {\n            encoded += \"y\"\n        }\
    \ else if c == 'A' {\n            encoded += \"C\"\n        } else if c == 'E'\
    \ {\n            encoded += \"G\"\n        } else if c == 'I' {\n            encoded\
    \ += \"K\"\n        } else if c == 'O' {\n            encoded += \"Q\"\n     \
    \   } else if c == 'U' {\n            encoded += \"Y\"\n        } else {\n   \
    \         encoded += string(c)\n        }\n    }\n    return encoded\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpxgxvcg38_test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpxgxvcg38_test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpxgxvcg38_test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpxgxvcg38_test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpxgxvcg38_test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    // TODO\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp5hv2zyyw_test.go:36: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp5hv2zyyw_test.go:36: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmp5hv2zyyw_test.go:36: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmp5hv2zyyw_test.go:36:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmp5hv2zyyw_test.go:36: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n\
    \        } else {\n            result += string(char)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpgzwnmkgf_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpgzwnmkgf_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpgzwnmkgf_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n\
    \        } else {\n            result += string(char)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpgzwnmkgf_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpgzwnmkgf_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpgzwnmkgf_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, r := range message {\n        if r >= 'a'\
    \ && r <= 'z' {\n            result += string(r - 32)\n        } else if r >=\
    \ 'A' && r <= 'Z' {\n            result += string(r + 32)\n        } else {\n\
    \            result += string(r)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp3n1ye6yl_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp3n1ye6yl_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp3n1ye6yl_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp3n1ye6yl_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp3n1ye6yl_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n\
    \        } else {\n            result += string(char)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpgzwnmkgf_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpgzwnmkgf_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpgzwnmkgf_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n\
    \        } else {\n            result += string(char)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpgzwnmkgf_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpgzwnmkgf_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpgzwnmkgf_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n\
    \        } else {\n            result += string(char)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpgzwnmkgf_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpgzwnmkgf_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpgzwnmkgf_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'a' {\n            encoded += \"c\"\n        } else\
    \ if char == 'e' {\n            encoded += \"g\"\n        } else if char == 'i'\
    \ {\n            encoded += \"k\"\n        } else if char == 'o' {\n         \
    \   encoded += \"q\"\n        } else if char == 'u' {\n            encoded +=\
    \ \"y\"\n        } else if char == 'A' {\n            encoded += \"C\"\n     \
    \   } else if char == 'E' {\n            encoded += \"G\"\n        } else if char\
    \ == 'I' {\n            encoded += \"K\"\n        } else if char == 'O' {\n  \
    \          encoded += \"Q\"\n        } else if char == 'U' {\n            encoded\
    \ += \"Y\"\n        } else {\n            encoded += string(char)\n        }\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpwalhfag__test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpwalhfag__test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpwalhfag__test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n\
    \        } else {\n            result += string(char)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpgzwnmkgf_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpgzwnmkgf_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpgzwnmkgf_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n\
    \        } else {\n            result += string(char)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpgzwnmkgf_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpgzwnmkgf_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpgzwnmkgf_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n\
    \        } else {\n            result += string(char)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpgzwnmkgf_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpgzwnmkgf_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpgzwnmkgf_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'a' {\n            encoded += \"c\"\n        } else\
    \ if char == 'e' {\n            encoded += \"g\"\n        } else if char == 'i'\
    \ {\n            encoded += \"k\"\n        } else if char == 'o' {\n         \
    \   encoded += \"q\"\n        } else if char == 'u' {\n            encoded +=\
    \ \"y\"\n        } else if char == 'A' {\n            encoded += \"C\"\n     \
    \   } else if char == 'E' {\n            encoded += \"G\"\n        } else if char\
    \ == 'I' {\n            encoded += \"K\"\n        } else if char == 'O' {\n  \
    \          encoded += \"Q\"\n        } else if char == 'U' {\n            encoded\
    \ += \"Y\"\n        } else {\n            encoded += string(char)\n        }\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpwalhfag__test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpwalhfag__test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpwalhfag__test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 'a' + 'A')\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            result += string(c - 'A' + 'a')\n      \
    \  } else {\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbwdr1d40_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpbwdr1d40_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpbwdr1d40_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, c := range message {\n        if c >=\
    \ 'a' && c <= 'z' {\n            encoded += string(c - 32)\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            encoded += string(c + 32)\n        } else\
    \ {\n            encoded += string(c)\n        }\n    }\n    return encoded\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpvrbldo_u_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpvrbldo_u_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpvrbldo_u_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpvrbldo_u_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpvrbldo_u_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    // TODO: Implement\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpa0acel5y_test.go:36: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpa0acel5y_test.go:36: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpa0acel5y_test.go:36:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n\
    \        } else {\n            result += string(char)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpgzwnmkgf_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpgzwnmkgf_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpgzwnmkgf_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    // TODO: Implement\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpa0acel5y_test.go:36: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpa0acel5y_test.go:36: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpa0acel5y_test.go:36:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 'a' + 'A')\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            result += string(c - 'A' + 'a')\n      \
    \  } else {\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbwdr1d40_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpbwdr1d40_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpbwdr1d40_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n\
    \        } else {\n            result += string(char)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpgzwnmkgf_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpgzwnmkgf_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpgzwnmkgf_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'a' {\n            encoded += \"c\"\n        } else\
    \ if char == 'e' {\n            encoded += \"g\"\n        } else if char == 'i'\
    \ {\n            encoded += \"k\"\n        } else if char == 'o' {\n         \
    \   encoded += \"q\"\n        } else if char == 'u' {\n            encoded +=\
    \ \"y\"\n        } else if char == 'A' {\n            encoded += \"C\"\n     \
    \   } else if char == 'E' {\n            encoded += \"G\"\n        } else if char\
    \ == 'I' {\n            encoded += \"K\"\n        } else if char == 'O' {\n  \
    \          encoded += \"Q\"\n        } else if char == 'U' {\n            encoded\
    \ += \"Y\"\n        } else {\n            encoded += string(char)\n        }\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpwalhfag__test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpwalhfag__test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpwalhfag__test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'a' {\n            encoded += \"c\"\n        } else\
    \ if char == 'e' {\n            encoded += \"g\"\n        } else if char == 'i'\
    \ {\n            encoded += \"k\"\n        } else if char == 'o' {\n         \
    \   encoded += \"q\"\n        } else if char == 'u' {\n            encoded +=\
    \ \"y\"\n        } else if char == 'A' {\n            encoded += \"C\"\n     \
    \   } else if char == 'E' {\n            encoded += \"G\"\n        } else if char\
    \ == 'I' {\n            encoded += \"K\"\n        } else if char == 'O' {\n  \
    \          encoded += \"Q\"\n        } else if char == 'U' {\n            encoded\
    \ += \"Y\"\n        } else {\n            encoded += string(char)\n        }\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpwalhfag__test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpwalhfag__test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpwalhfag__test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    // TODO: Implement\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpa0acel5y_test.go:36: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpa0acel5y_test.go:36: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpa0acel5y_test.go:36:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, r := range message {\n        if r >=\
    \ 'a' && r <= 'z' {\n            encoded += string(r - 'a' + 'A')\n        } else\
    \ if r >= 'A' && r <= 'Z' {\n            encoded += string(r - 'A' + 'a')\n  \
    \      } else {\n            encoded += string(r)\n        }\n    }\n    return\
    \ encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpdjpxycxu_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpdjpxycxu_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdjpxycxu_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpdjpxycxu_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdjpxycxu_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 'a' + 'A')\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            result += string(c - 'A' + 'a')\n      \
    \  } else {\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbwdr1d40_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpbwdr1d40_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpbwdr1d40_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'a' {\n            encoded += \"c\"\n        } else\
    \ if char == 'e' {\n            encoded += \"g\"\n        } else if char == 'i'\
    \ {\n            encoded += \"k\"\n        } else if char == 'o' {\n         \
    \   encoded += \"q\"\n        } else if char == 'u' {\n            encoded +=\
    \ \"y\"\n        } else if char == 'A' {\n            encoded += \"C\"\n     \
    \   } else if char == 'E' {\n            encoded += \"G\"\n        } else if char\
    \ == 'I' {\n            encoded += \"K\"\n        } else if char == 'O' {\n  \
    \          encoded += \"Q\"\n        } else if char == 'U' {\n            encoded\
    \ += \"Y\"\n        } else {\n            encoded += string(char)\n        }\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpwalhfag__test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpwalhfag__test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpwalhfag__test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    // TODO: Implement\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpa0acel5y_test.go:36: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpa0acel5y_test.go:36: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpa0acel5y_test.go:36:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, c := range message {\n        if c >=\
    \ 'a' && c <= 'z' {\n            encoded += string(c - 32)\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            encoded += string(c + 32)\n        } else\
    \ {\n            encoded += string(c)\n        }\n    }\n    return encoded\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpvrbldo_u_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpvrbldo_u_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpvrbldo_u_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpvrbldo_u_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpvrbldo_u_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    // your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmppe6xqbwf_test.go:36: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmppe6xqbwf_test.go:36: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmppe6xqbwf_test.go:36: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmppe6xqbwf_test.go:36:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmppe6xqbwf_test.go:36: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    // TODO: Implement\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpa0acel5y_test.go:36: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpa0acel5y_test.go:36: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpa0acel5y_test.go:36:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, c := range message {\n        if c >=\
    \ 'a' && c <= 'z' {\n            encoded += string(c - 'a' + 'A')\n        } else\
    \ if c >= 'A' && c <= 'Z' {\n            encoded += string(c - 'A' + 'a')\n  \
    \      } else if c == 'a' {\n            encoded += \"c\"\n        } else if c\
    \ == 'e' {\n            encoded += \"g\"\n        } else if c == 'i' {\n     \
    \       encoded += \"k\"\n        } else if c == 'o' {\n            encoded +=\
    \ \"q\"\n        } else if c == 'u' {\n            encoded += \"y\"\n        }\
    \ else if c == 'A' {\n            encoded += \"C\"\n        } else if c == 'E'\
    \ {\n            encoded += \"G\"\n        } else if c == 'I' {\n            encoded\
    \ += \"K\"\n        } else if c == 'O' {\n            encoded += \"Q\"\n     \
    \   } else if c == 'U' {\n            encoded += \"Y\"\n        } else {\n   \
    \         encoded += string(c)\n        }\n    }\n    return encoded\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpxgxvcg38_test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpxgxvcg38_test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpxgxvcg38_test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpxgxvcg38_test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpxgxvcg38_test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n\
    \        } else {\n            result += string(char)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpgzwnmkgf_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpgzwnmkgf_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpgzwnmkgf_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 'a' + 'A')\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            result += string(c - 'A' + 'a')\n      \
    \  } else {\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbwdr1d40_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpbwdr1d40_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpbwdr1d40_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, c := range message {\n        if c >=\
    \ 'a' && c <= 'z' {\n            encoded += string(c - 'a' + 'A')\n        } else\
    \ if c >= 'A' && c <= 'Z' {\n            encoded += string(c - 'A' + 'a')\n  \
    \      } else if c == 'a' {\n            encoded += \"c\"\n        } else if c\
    \ == 'e' {\n            encoded += \"g\"\n        } else if c == 'i' {\n     \
    \       encoded += \"k\"\n        } else if c == 'o' {\n            encoded +=\
    \ \"q\"\n        } else if c == 'u' {\n            encoded += \"y\"\n        }\
    \ else if c == 'A' {\n            encoded += \"C\"\n        } else if c == 'E'\
    \ {\n            encoded += \"G\"\n        } else if c == 'I' {\n            encoded\
    \ += \"K\"\n        } else if c == 'O' {\n            encoded += \"Q\"\n     \
    \   } else if c == 'U' {\n            encoded += \"Y\"\n        } else {\n   \
    \         encoded += string(c)\n        }\n    }\n    return encoded\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpxgxvcg38_test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpxgxvcg38_test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpxgxvcg38_test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpxgxvcg38_test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpxgxvcg38_test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, c := range message {\n        if c >=\
    \ 'a' && c <= 'z' {\n            encoded += string(c - 'a' + 'A')\n        } else\
    \ if c >= 'A' && c <= 'Z' {\n            encoded += string(c - 'A' + 'a')\n  \
    \      } else if c == 'a' {\n            encoded += \"c\"\n        } else if c\
    \ == 'e' {\n            encoded += \"g\"\n        } else if c == 'i' {\n     \
    \       encoded += \"k\"\n        } else if c == 'o' {\n            encoded +=\
    \ \"q\"\n        } else if c == 'u' {\n            encoded += \"y\"\n        }\
    \ else if c == 'A' {\n            encoded += \"C\"\n        } else if c == 'E'\
    \ {\n            encoded += \"G\"\n        } else if c == 'I' {\n            encoded\
    \ += \"K\"\n        } else if c == 'O' {\n            encoded += \"Q\"\n     \
    \   } else if c == 'U' {\n            encoded += \"Y\"\n        } else {\n   \
    \         encoded += string(c)\n        }\n    }\n    return encoded\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpxgxvcg38_test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpxgxvcg38_test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpxgxvcg38_test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpxgxvcg38_test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpxgxvcg38_test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        switch\
    \ {\n        case char >= 'a' && char <= 'z':\n            encoded += string(char\
    \ - 32)\n        case char >= 'A' && char <= 'Z':\n            encoded += string(char\
    \ + 32)\n        case char == 'a':\n            encoded += \"c\"\n        case\
    \ char == 'e':\n            encoded += \"g\"\n        case char == 'i':\n    \
    \        encoded += \"k\"\n        case char == 'o':\n            encoded += \"\
    q\"\n        case char == 'u':\n            encoded += \"y\"\n        case char\
    \ == 'A':\n            encoded += \"C\"\n        case char == 'E':\n         \
    \   encoded += \"G\"\n        case char == 'I':\n            encoded += \"K\"\n\
    \        case char == 'O':\n            encoded += \"Q\"\n        case char ==\
    \ 'U':\n            encoded += \"Y\"\n        default:\n            encoded +=\
    \ string(char)\n        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpz8ezsudo_test.go:66: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpz8ezsudo_test.go:66: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz8ezsudo_test.go:66:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpz8ezsudo_test.go:66: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz8ezsudo_test.go:66:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073266
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    // TODO: Implement\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpa0acel5y_test.go:36: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpa0acel5y_test.go:36: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpa0acel5y_test.go:36:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'a' {\n            encoded += \"c\"\n        } else\
    \ if char == 'e' {\n            encoded += \"g\"\n        } else if char == 'i'\
    \ {\n            encoded += \"k\"\n        } else if char == 'o' {\n         \
    \   encoded += \"q\"\n        } else if char == 'u' {\n            encoded +=\
    \ \"y\"\n        } else if char == 'A' {\n            encoded += \"C\"\n     \
    \   } else if char == 'E' {\n            encoded += \"G\"\n        } else if char\
    \ == 'I' {\n            encoded += \"K\"\n        } else if char == 'O' {\n  \
    \          encoded += \"Q\"\n        } else if char == 'U' {\n            encoded\
    \ += \"Y\"\n        } else {\n            encoded += string(char)\n        }\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpwalhfag__test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpwalhfag__test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpwalhfag__test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n\
    \        } else {\n            result += string(char)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpgzwnmkgf_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpgzwnmkgf_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpgzwnmkgf_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 'a' + 'A')\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            result += string(c - 'A' + 'a')\n      \
    \  } else {\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbwdr1d40_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpbwdr1d40_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpbwdr1d40_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    // TODO: Implement\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpa0acel5y_test.go:36: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpa0acel5y_test.go:36: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpa0acel5y_test.go:36:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'a' {\n            encoded += \"c\"\n        } else\
    \ if char == 'e' {\n            encoded += \"g\"\n        } else if char == 'i'\
    \ {\n            encoded += \"k\"\n        } else if char == 'o' {\n         \
    \   encoded += \"q\"\n        } else if char == 'u' {\n            encoded +=\
    \ \"y\"\n        } else if char == 'A' {\n            encoded += \"C\"\n     \
    \   } else if char == 'E' {\n            encoded += \"G\"\n        } else if char\
    \ == 'I' {\n            encoded += \"K\"\n        } else if char == 'O' {\n  \
    \          encoded += \"Q\"\n        } else if char == 'U' {\n            encoded\
    \ += \"Y\"\n        } else {\n            encoded += string(char)\n        }\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpwalhfag__test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpwalhfag__test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpwalhfag__test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'A' || char == 'E' || char == 'I' || char == 'O' ||\
    \ char == 'U' {\n            encoded += string(char + 2)\n        } else if char\
    \ == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u' {\n     \
    \       encoded += string(char - 2)\n        } else {\n            encoded +=\
    \ string(char)\n        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp3wgcilh9_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp3wgcilh9_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp3wgcilh9_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp3wgcilh9_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp3wgcilh9_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073266
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    // TODO: Implement\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpa0acel5y_test.go:36: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpa0acel5y_test.go:36: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpa0acel5y_test.go:36:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'a' {\n            encoded += \"c\"\n        } else\
    \ if char == 'e' {\n            encoded += \"g\"\n        } else if char == 'i'\
    \ {\n            encoded += \"k\"\n        } else if char == 'o' {\n         \
    \   encoded += \"q\"\n        } else if char == 'u' {\n            encoded +=\
    \ \"y\"\n        } else if char == 'A' {\n            encoded += \"C\"\n     \
    \   } else if char == 'E' {\n            encoded += \"G\"\n        } else if char\
    \ == 'I' {\n            encoded += \"K\"\n        } else if char == 'O' {\n  \
    \          encoded += \"Q\"\n        } else if char == 'U' {\n            encoded\
    \ += \"Y\"\n        } else {\n            encoded += string(char)\n        }\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpwalhfag__test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpwalhfag__test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpwalhfag__test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 'a' + 'A')\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            result += string(c - 'A' + 'a')\n      \
    \  } else {\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbwdr1d40_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpbwdr1d40_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpbwdr1d40_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n\
    \        } else {\n            result += string(char)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpgzwnmkgf_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpgzwnmkgf_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpgzwnmkgf_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 'a' + 'A')\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            result += string(c - 'A' + 'a')\n      \
    \  } else {\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbwdr1d40_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpbwdr1d40_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpbwdr1d40_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'a' {\n            encoded += \"c\"\n        } else\
    \ if char == 'e' {\n            encoded += \"g\"\n        } else if char == 'i'\
    \ {\n            encoded += \"k\"\n        } else if char == 'o' {\n         \
    \   encoded += \"q\"\n        } else if char == 'u' {\n            encoded +=\
    \ \"y\"\n        } else if char == 'A' {\n            encoded += \"C\"\n     \
    \   } else if char == 'E' {\n            encoded += \"G\"\n        } else if char\
    \ == 'I' {\n            encoded += \"K\"\n        } else if char == 'O' {\n  \
    \          encoded += \"Q\"\n        } else if char == 'U' {\n            encoded\
    \ += \"Y\"\n        } else {\n            encoded += string(char)\n        }\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpwalhfag__test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpwalhfag__test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpwalhfag__test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    // TODO: Implement\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpa0acel5y_test.go:36: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpa0acel5y_test.go:36: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpa0acel5y_test.go:36:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'a' {\n            encoded += \"c\"\n        } else\
    \ if char == 'e' {\n            encoded += \"g\"\n        } else if char == 'i'\
    \ {\n            encoded += \"k\"\n        } else if char == 'o' {\n         \
    \   encoded += \"q\"\n        } else if char == 'u' {\n            encoded +=\
    \ \"y\"\n        } else if char == 'A' {\n            encoded += \"C\"\n     \
    \   } else if char == 'E' {\n            encoded += \"G\"\n        } else if char\
    \ == 'I' {\n            encoded += \"K\"\n        } else if char == 'O' {\n  \
    \          encoded += \"Q\"\n        } else if char == 'U' {\n            encoded\
    \ += \"Y\"\n        } else {\n            encoded += string(char)\n        }\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpwalhfag__test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpwalhfag__test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpwalhfag__test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, c := range message {\n        if c >=\
    \ 'a' && c <= 'z' {\n            encoded += string(c - 32)\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            encoded += string(c + 32)\n        } else\
    \ {\n            encoded += string(c)\n        }\n    }\n    return encoded\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpvrbldo_u_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpvrbldo_u_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpvrbldo_u_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpvrbldo_u_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpvrbldo_u_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'a' {\n            encoded += \"c\"\n        } else\
    \ if char == 'e' {\n            encoded += \"g\"\n        } else if char == 'i'\
    \ {\n            encoded += \"k\"\n        } else if char == 'o' {\n         \
    \   encoded += \"q\"\n        } else if char == 'u' {\n            encoded +=\
    \ \"y\"\n        } else if char == 'A' {\n            encoded += \"C\"\n     \
    \   } else if char == 'E' {\n            encoded += \"G\"\n        } else if char\
    \ == 'I' {\n            encoded += \"K\"\n        } else if char == 'O' {\n  \
    \          encoded += \"Q\"\n        } else if char == 'U' {\n            encoded\
    \ += \"Y\"\n        } else {\n            encoded += string(char)\n        }\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpwalhfag__test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpwalhfag__test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpwalhfag__test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 'a' + 'A')\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            result += string(c - 'A' + 'a')\n      \
    \  } else {\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbwdr1d40_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpbwdr1d40_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpbwdr1d40_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'a' {\n            encoded += \"c\"\n        } else\
    \ if char == 'e' {\n            encoded += \"g\"\n        } else if char == 'i'\
    \ {\n            encoded += \"k\"\n        } else if char == 'o' {\n         \
    \   encoded += \"q\"\n        } else if char == 'u' {\n            encoded +=\
    \ \"y\"\n        } else if char == 'A' {\n            encoded += \"C\"\n     \
    \   } else if char == 'E' {\n            encoded += \"G\"\n        } else if char\
    \ == 'I' {\n            encoded += \"K\"\n        } else if char == 'O' {\n  \
    \          encoded += \"Q\"\n        } else if char == 'U' {\n            encoded\
    \ += \"Y\"\n        } else {\n            encoded += string(char)\n        }\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpwalhfag__test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpwalhfag__test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpwalhfag__test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n\
    \        } else {\n            result += string(char)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpgzwnmkgf_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpgzwnmkgf_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpgzwnmkgf_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'a' {\n            encoded += \"c\"\n        } else\
    \ if char == 'e' {\n            encoded += \"g\"\n        } else if char == 'i'\
    \ {\n            encoded += \"k\"\n        } else if char == 'o' {\n         \
    \   encoded += \"q\"\n        } else if char == 'u' {\n            encoded +=\
    \ \"y\"\n        } else if char == 'A' {\n            encoded += \"C\"\n     \
    \   } else if char == 'E' {\n            encoded += \"G\"\n        } else if char\
    \ == 'I' {\n            encoded += \"K\"\n        } else if char == 'O' {\n  \
    \          encoded += \"Q\"\n        } else if char == 'U' {\n            encoded\
    \ += \"Y\"\n        } else {\n            encoded += string(char)\n        }\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpwalhfag__test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpwalhfag__test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpwalhfag__test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    // TODO: Implement\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpa0acel5y_test.go:36: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpa0acel5y_test.go:36: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpa0acel5y_test.go:36:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, c := range message {\n        if c >=\
    \ 'a' && c <= 'z' {\n            encoded += string(c - 32)\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            encoded += string(c + 32)\n        } else\
    \ {\n            encoded += string(c)\n        }\n    }\n    return encoded\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpvrbldo_u_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpvrbldo_u_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpvrbldo_u_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpvrbldo_u_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpvrbldo_u_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 'a' + 'A')\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            result += string(c - 'A' + 'a')\n      \
    \  } else {\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbwdr1d40_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpbwdr1d40_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpbwdr1d40_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, c := range message {\n        if c >=\
    \ 'a' && c <= 'z' {\n            encoded += string(c - 'a' + 'A')\n        } else\
    \ if c >= 'A' && c <= 'Z' {\n            encoded += string(c - 'A' + 'a')\n  \
    \      } else if c == 'a' {\n            encoded += \"c\"\n        } else if c\
    \ == 'e' {\n            encoded += \"g\"\n        } else if c == 'i' {\n     \
    \       encoded += \"k\"\n        } else if c == 'o' {\n            encoded +=\
    \ \"q\"\n        } else if c == 'u' {\n            encoded += \"y\"\n        }\
    \ else if c == 'A' {\n            encoded += \"C\"\n        } else if c == 'E'\
    \ {\n            encoded += \"G\"\n        } else if c == 'I' {\n            encoded\
    \ += \"K\"\n        } else if c == 'O' {\n            encoded += \"Q\"\n     \
    \   } else if c == 'U' {\n            encoded += \"Y\"\n        } else {\n   \
    \         encoded += string(c)\n        }\n    }\n    return encoded\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpxgxvcg38_test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpxgxvcg38_test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpxgxvcg38_test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpxgxvcg38_test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpxgxvcg38_test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n\
    \        } else {\n            result += string(char)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpgzwnmkgf_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpgzwnmkgf_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpgzwnmkgf_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, c := range message {\n        if c >=\
    \ 'a' && c <= 'z' {\n            encoded += string(c - 'a' + 'A')\n        } else\
    \ if c >= 'A' && c <= 'Z' {\n            encoded += string(c - 'A' + 'a')\n  \
    \      } else if c == 'a' {\n            encoded += \"c\"\n        } else if c\
    \ == 'e' {\n            encoded += \"g\"\n        } else if c == 'i' {\n     \
    \       encoded += \"k\"\n        } else if c == 'o' {\n            encoded +=\
    \ \"q\"\n        } else if c == 'u' {\n            encoded += \"y\"\n        }\
    \ else if c == 'A' {\n            encoded += \"C\"\n        } else if c == 'E'\
    \ {\n            encoded += \"G\"\n        } else if c == 'I' {\n            encoded\
    \ += \"K\"\n        } else if c == 'O' {\n            encoded += \"Q\"\n     \
    \   } else if c == 'U' {\n            encoded += \"Y\"\n        } else {\n   \
    \         encoded += string(c)\n        }\n    }\n    return encoded\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpxgxvcg38_test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpxgxvcg38_test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpxgxvcg38_test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpxgxvcg38_test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpxgxvcg38_test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'a' {\n            encoded += \"c\"\n        } else\
    \ if char == 'e' {\n            encoded += \"g\"\n        } else if char == 'i'\
    \ {\n            encoded += \"k\"\n        } else if char == 'o' {\n         \
    \   encoded += \"q\"\n        } else if char == 'u' {\n            encoded +=\
    \ \"y\"\n        } else if char == 'A' {\n            encoded += \"C\"\n     \
    \   } else if char == 'E' {\n            encoded += \"G\"\n        } else if char\
    \ == 'I' {\n            encoded += \"K\"\n        } else if char == 'O' {\n  \
    \          encoded += \"Q\"\n        } else if char == 'U' {\n            encoded\
    \ += \"Y\"\n        } else {\n            encoded += string(char)\n        }\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpwalhfag__test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpwalhfag__test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpwalhfag__test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 'a' + 'A')\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            result += string(c - 'A' + 'a')\n      \
    \  } else {\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbwdr1d40_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpbwdr1d40_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpbwdr1d40_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'a' {\n            encoded += \"c\"\n        } else\
    \ if char == 'e' {\n            encoded += \"g\"\n        } else if char == 'i'\
    \ {\n            encoded += \"k\"\n        } else if char == 'o' {\n         \
    \   encoded += \"q\"\n        } else if char == 'u' {\n            encoded +=\
    \ \"y\"\n        } else if char == 'A' {\n            encoded += \"C\"\n     \
    \   } else if char == 'E' {\n            encoded += \"G\"\n        } else if char\
    \ == 'I' {\n            encoded += \"K\"\n        } else if char == 'O' {\n  \
    \          encoded += \"Q\"\n        } else if char == 'U' {\n            encoded\
    \ += \"Y\"\n        } else {\n            encoded += string(char)\n        }\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpwalhfag__test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpwalhfag__test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpwalhfag__test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'a' {\n            encoded += \"c\"\n        } else\
    \ if char == 'e' {\n            encoded += \"g\"\n        } else if char == 'i'\
    \ {\n            encoded += \"k\"\n        } else if char == 'o' {\n         \
    \   encoded += \"q\"\n        } else if char == 'u' {\n            encoded +=\
    \ \"y\"\n        } else if char == 'A' {\n            encoded += \"C\"\n     \
    \   } else if char == 'E' {\n            encoded += \"G\"\n        } else if char\
    \ == 'I' {\n            encoded += \"K\"\n        } else if char == 'O' {\n  \
    \          encoded += \"Q\"\n        } else if char == 'U' {\n            encoded\
    \ += \"Y\"\n        } else {\n            encoded += string(char)\n        }\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpwalhfag__test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpwalhfag__test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpwalhfag__test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'a' {\n            encoded += \"c\"\n        } else\
    \ if char == 'e' {\n            encoded += \"g\"\n        } else if char == 'i'\
    \ {\n            encoded += \"k\"\n        } else if char == 'o' {\n         \
    \   encoded += \"q\"\n        } else if char == 'u' {\n            encoded +=\
    \ \"y\"\n        } else if char == 'A' {\n            encoded += \"C\"\n     \
    \   } else if char == 'E' {\n            encoded += \"G\"\n        } else if char\
    \ == 'I' {\n            encoded += \"K\"\n        } else if char == 'O' {\n  \
    \          encoded += \"Q\"\n        } else if char == 'U' {\n            encoded\
    \ += \"Y\"\n        } else {\n            encoded += string(char)\n        }\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpwalhfag__test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpwalhfag__test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpwalhfag__test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'a' {\n            encoded += \"c\"\n        } else\
    \ if char == 'e' {\n            encoded += \"g\"\n        } else if char == 'i'\
    \ {\n            encoded += \"k\"\n        } else if char == 'o' {\n         \
    \   encoded += \"q\"\n        } else if char == 'u' {\n            encoded +=\
    \ \"y\"\n        } else if char == 'A' {\n            encoded += \"C\"\n     \
    \   } else if char == 'E' {\n            encoded += \"G\"\n        } else if char\
    \ == 'I' {\n            encoded += \"K\"\n        } else if char == 'O' {\n  \
    \          encoded += \"Q\"\n        } else if char == 'U' {\n            encoded\
    \ += \"Y\"\n        } else {\n            encoded += string(char)\n        }\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpwalhfag__test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpwalhfag__test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpwalhfag__test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwalhfag__test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 'a' + 'A')\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            result += string(c - 'A' + 'a')\n      \
    \  } else {\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbwdr1d40_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpbwdr1d40_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpbwdr1d40_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n\
    \        } else {\n            result += string(char)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpgzwnmkgf_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpgzwnmkgf_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpgzwnmkgf_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n\
    \        } else {\n            result += string(char)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpgzwnmkgf_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpgzwnmkgf_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpgzwnmkgf_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 32)\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp61hz7607_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp61hz7607_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp61hz7607_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp61hz7607_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 'a' + 'A')\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            result += string(c - 'A' + 'a')\n      \
    \  } else {\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbwdr1d40_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpbwdr1d40_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpbwdr1d40_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n\
    \        } else {\n            result += string(char)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpgzwnmkgf_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpgzwnmkgf_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpgzwnmkgf_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpgzwnmkgf_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, c := range message {\n        if c >=\
    \ 'a' && c <= 'z' {\n            encoded += string(c - 32)\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            encoded += string(c + 32)\n        } else\
    \ {\n            encoded += string(c)\n        }\n    }\n    return encoded\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpvrbldo_u_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpvrbldo_u_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpvrbldo_u_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpvrbldo_u_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpvrbldo_u_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, r := range message {\n        if r >=\
    \ 'a' && r <= 'z' {\n            encoded += string(r - 32)\n        } else if\
    \ r >= 'A' && r <= 'Z' {\n            encoded += string(r + 32)\n        } else\
    \ if r == 'a' {\n            encoded += \"c\"\n        } else if r == 'e' {\n\
    \            encoded += \"g\"\n        } else if r == 'i' {\n            encoded\
    \ += \"k\"\n        } else if r == 'o' {\n            encoded += \"q\"\n     \
    \   } else if r == 'u' {\n            encoded += \"y\"\n        } else if r ==\
    \ 'A' {\n            encoded += \"C\"\n        } else if r == 'E' {\n        \
    \    encoded += \"G\"\n        } else if r == 'I' {\n            encoded += \"\
    K\"\n        } else if r == 'O' {\n            encoded += \"Q\"\n        } else\
    \ if r == 'U' {\n            encoded += \"Y\"\n        } else {\n            encoded\
    \ += string(r)\n        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpg_bt6zl0_test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpg_bt6zl0_test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpg_bt6zl0_test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpg_bt6zl0_test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpg_bt6zl0_test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073266
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, char := range message {\n        if char\
    \ >= 'a' && char <= 'z' {\n            encoded += string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char + 32)\n\
    \        } else if char == 'A' || char == 'E' || char == 'I' || char == 'O' ||\
    \ char == 'U' {\n            encoded += string(char + 2)\n        } else if char\
    \ == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u' {\n     \
    \       encoded += string(char - 2)\n        } else {\n            encoded +=\
    \ string(char)\n        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp3wgcilh9_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp3wgcilh9_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp3wgcilh9_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp3wgcilh9_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp3wgcilh9_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073266
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 'a' + 'A')\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            result += string(c - 'A' + 'a')\n      \
    \  } else {\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbwdr1d40_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpbwdr1d40_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpbwdr1d40_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 'a' + 'A')\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            result += string(c - 'A' + 'a')\n      \
    \  } else {\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbwdr1d40_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpbwdr1d40_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpbwdr1d40_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var result string\n    for _, c := range message {\n        if c >= 'a'\
    \ && c <= 'z' {\n            result += string(c - 'a' + 'A')\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            result += string(c - 'A' + 'a')\n      \
    \  } else {\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbwdr1d40_test.go:45: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpbwdr1d40_test.go:45: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpbwdr1d40_test.go:45: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpbwdr1d40_test.go:45:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    // TODO: implement\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp2rr_p1nr_test.go:36: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp2rr_p1nr_test.go:36: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmp2rr_p1nr_test.go:36: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmp2rr_p1nr_test.go:36:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmp2rr_p1nr_test.go:36: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpagr3jkdr_test.go:35: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpagr3jkdr_test.go:35: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpagr3jkdr_test.go:35:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpagr3jkdr_test.go:35: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, c := range message {\n        if c >=\
    \ 'a' && c <= 'z' {\n            encoded += string(c - 'a' + 'A')\n        } else\
    \ if c >= 'A' && c <= 'Z' {\n            encoded += string(c - 'A' + 'a')\n  \
    \      } else if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n\
    \            encoded += string(c + 2)\n        } else if c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U' {\n            encoded += string(c + 2)\n\
    \        } else {\n            encoded += string(c)\n        }\n    }\n    return\
    \ encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpr8emq3tk_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpr8emq3tk_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpr8emq3tk_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpr8emq3tk_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpr8emq3tk_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    // TODO: Implement\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpa0acel5y_test.go:36: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpa0acel5y_test.go:36: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpa0acel5y_test.go:36:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpa0acel5y_test.go:36: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    // TODO: Implement\n    return message\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp0mbvqhnb_test.go:36: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp0mbvqhnb_test.go:36: expected 'mWDCSKR', got 'Mudasir'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp0mbvqhnb_test.go:36:\
    \ expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp0mbvqhnb_test.go:36: expected 'tHKS KS C MGSSCGG', got 'This is a message'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp0mbvqhnb_test.go:36:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DoNt KnOw WhAt tO WrItE'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073266
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunc encode(message string) string\
    \ {\n    var encoded string\n    for _, c := range message {\n        if c >=\
    \ 'a' && c <= 'z' {\n            encoded += string(c - 'a' + 'A')\n        } else\
    \ if c >= 'A' && c <= 'Z' {\n            encoded += string(c - 'A' + 'a')\n  \
    \      } else if c == 'a' {\n            encoded += \"c\"\n        } else if c\
    \ == 'e' {\n            encoded += \"g\"\n        } else if c == 'i' {\n     \
    \       encoded += \"k\"\n        } else if c == 'o' {\n            encoded +=\
    \ \"q\"\n        } else if c == 'u' {\n            encoded += \"y\"\n        }\
    \ else if c == 'A' {\n            encoded += \"C\"\n        } else if c == 'E'\
    \ {\n            encoded += \"G\"\n        } else if c == 'I' {\n            encoded\
    \ += \"K\"\n        } else if c == 'O' {\n            encoded += \"Q\"\n     \
    \   } else if c == 'U' {\n            encoded += \"Y\"\n        } else {\n   \
    \         encoded += string(c)\n        }\n    }\n    return encoded\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpxgxvcg38_test.go:65: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpxgxvcg38_test.go:65: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpxgxvcg38_test.go:65:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpxgxvcg38_test.go:65: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpxgxvcg38_test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073265
