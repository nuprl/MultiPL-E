language: go_test.go
name: HumanEval_140_fix_spaces
results:
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev rune\n    for _, c := range text {\n        if c == ' ' {\n    \
    \        if prev == ' ' {\n                result += \"-\"\n            } else\
    \ {\n                result += \"_\"\n            }\n        } else {\n      \
    \      result += string(c)\n        }\n        prev = c\n    }\n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpmid0zr9b_test.go:46: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpmid0zr9b_test.go:46: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpmid0zr9b_test.go:46:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count == 1 {\n              \
    \  result += \"_\"\n            } else if space_count > 2 {\n                result\
    \ += \"-\"\n            }\n        } else {\n            space_count = 0\n   \
    \         result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpd7b2d1dd_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n\
    \        tmpd7b2d1dd_test.go:47: expected 'Exa-mple', got 'Exa_-mple'\n    ---\
    \ FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpd7b2d1dd_test.go:47: expected\
    \ '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if !prev_space {\n                result\
    \ += \"_\"\n                prev_space = true\n                space_count = 1\n\
    \            } else {\n                space_count++\n                if space_count\
    \ > 2 {\n                    result += \"-\"\n                    space_count\
    \ = 0\n                }\n            }\n        } else {\n            result\
    \ += string(c)\n            prev_space = false\n        }\n    }\n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpp2658u5g_test.go:53: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n\
    \        tmpp2658u5g_test.go:53: expected 'Exa-mple', got 'Exa_-mple'\n    ---\
    \ FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpp2658u5g_test.go:53: expected\
    \ '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prevChar byte\n    var prevPrevChar byte\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if prevChar == ' ' && prevPrevChar\
    \ == ' ' {\n                result += \"-\"\n            } else {\n          \
    \      result += \"_\"\n            }\n        } else {\n            result +=\
    \ string(text[i])\n        }\n        prevPrevChar = prevChar\n        prevChar\
    \ = text[i]\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpsxnalqzw_test.go:48: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpsxnalqzw_test.go:48:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if !prev_space {\n                space_count\
    \ = 1\n                prev_space = true\n            } else {\n             \
    \   space_count++\n            }\n            if space_count > 2 {\n         \
    \       result += \"-\"\n            } else {\n                result += \"_\"\
    \n            }\n        } else {\n            result += string(c)\n         \
    \   prev_space = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp7qyxv0xm_test.go:53: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp7qyxv0xm_test.go:53:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var space_count int\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            space_count++\n            if\
    \ space_count > 2 {\n                if prev_char != '-' {\n                 \
    \   result += \"-\"\n                }\n            } else {\n               \
    \ result += \"_\"\n            }\n        } else {\n            space_count =\
    \ 0\n            result += string(text[i])\n        }\n        prev_char = text[i]\n\
    \    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpvt7e5yv3_test.go:51: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpvt7e5yv3_test.go:51:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result []byte\n\
    \    var space_count int = 0\n    for i := 0; i < len(text); i++ {\n        if\
    \ text[i] == ' ' {\n            space_count++\n            if space_count > 2\
    \ {\n                continue\n            }\n        } else {\n            space_count\
    \ = 0\n        }\n        if space_count == 1 {\n            result = append(result,\
    \ '_')\n        } else if space_count == 2 {\n            result = append(result,\
    \ '-')\n        } else {\n            result = append(result, text[i])\n     \
    \   }\n    }\n    return string(result)\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpc88cvx57_test.go:51: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpc88cvx57_test.go:51: expected 'Exa-mple', got 'Exa_-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpc88cvx57_test.go:51:\
    \ expected '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if !prev_space {\n                prev_space\
    \ = true\n                space_count = 1\n            } else {\n            \
    \    space_count++\n            }\n            if space_count > 2 {\n        \
    \        result += \"-\"\n            } else {\n                result += \"_\"\
    \n            }\n        } else {\n            prev_space = false\n          \
    \  space_count = 0\n            result += string(c)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpd1fjm1ku_test.go:54: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpd1fjm1ku_test.go:54:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, ch := range text {\n        if ch\
    \ == ' ' {\n            if prev_space {\n                result += \"-\"\n   \
    \         } else {\n                result += \"_\"\n            }\n         \
    \   prev_space = true\n        } else {\n            result += string(ch)\n  \
    \          prev_space = false\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp1v8kt129_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp1v8kt129_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp1v8kt129_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var prev_prev_char byte\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if prev_char == ' ' && prev_prev_char\
    \ == ' ' {\n                result += \"-\"\n            } else {\n          \
    \      result += \"_\"\n            }\n        } else {\n            result +=\
    \ string(text[i])\n        }\n        prev_prev_char = prev_char\n        prev_char\
    \ = text[i]\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp2s36_6sb_test.go:48: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp2s36_6sb_test.go:48:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char rune\n    var count int\n\n    for _, char := range text {\n\
    \        if char == ' ' {\n            if prev_char == ' ' {\n               \
    \ count++\n            } else {\n                count = 1\n            }\n  \
    \          if count > 2 {\n                result += \"-\"\n            } else\
    \ {\n                result += \"_\"\n            }\n        } else {\n      \
    \      count = 0\n            result += string(char)\n        }\n        prev_char\
    \ = char\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp6adlt_jb_test.go:54: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp6adlt_jb_test.go:54:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count == 1 {\n              \
    \  result += \"_\"\n            } else if space_count > 2 {\n                result\
    \ += \"-\"\n            }\n        } else {\n            space_count = 0\n   \
    \         result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpd7b2d1dd_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n\
    \        tmpd7b2d1dd_test.go:47: expected 'Exa-mple', got 'Exa_-mple'\n    ---\
    \ FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpd7b2d1dd_test.go:47: expected\
    \ '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var spaces int\n    for _, c := range text {\n        if c == ' ' {\n   \
    \         spaces++\n            if spaces > 2 {\n                result += \"\
    -\"\n                spaces = 0\n            }\n        } else {\n           \
    \ if spaces > 0 {\n                result += \"_\"\n                spaces = 0\n\
    \            }\n            result += string(c)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmpzmr401wt_test.go:49: expected 'Mudasir_Hanif_', got 'Mudasir_Hanif'\n\
    \    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmpzmr401wt_test.go:49:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow_Yellow_Dirty_Fellow'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, char := range text {\n        if char ==\
    \ ' ' {\n            space_count++\n            if space_count == 1 {\n      \
    \          result += \"_\"\n            } else if space_count > 2 {\n        \
    \        result += \"-\"\n            }\n        } else {\n            space_count\
    \ = 0\n            result += string(char)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpwcsx2i49_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n\
    \        tmpwcsx2i49_test.go:47: expected 'Exa-mple', got 'Exa_-mple'\n    ---\
    \ FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpwcsx2i49_test.go:47: expected\
    \ '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, ch := range text\
    \ {\n        if ch == ' ' {\n            if prev_space {\n                space_count++\n\
    \            } else {\n                prev_space = true\n                space_count\
    \ = 1\n            }\n        } else {\n            if prev_space {\n        \
    \        if space_count > 2 {\n                    result += \"-\"\n         \
    \       } else {\n                    result += \"_\"\n                }\n   \
    \         }\n            prev_space = false\n            result += string(ch)\n\
    \        }\n    }\n    if prev_space {\n        if space_count > 2 {\n       \
    \     result += \"-\"\n        } else {\n            result += \"_\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpgric5v49_test.go:62: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var prev_prev_char byte\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if prev_char == ' ' && prev_prev_char\
    \ == ' ' {\n                result += \"-\"\n            } else {\n          \
    \      result += \"_\"\n            }\n        } else {\n            result +=\
    \ string(text[i])\n        }\n        prev_prev_char = prev_char\n        prev_char\
    \ = text[i]\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp2s36_6sb_test.go:48: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp2s36_6sb_test.go:48:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count == 1 {\n              \
    \  result += \"_\"\n            } else if space_count == 2 {\n               \
    \ result += \"-\"\n            }\n        } else {\n            space_count =\
    \ 0\n            result += string(c)\n        }\n    }\n    return result\n}\n\
    \nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpfxmc4iey_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpfxmc4iey_test.go:47: expected 'Exa-mple', got 'Exa_-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpfxmc4iey_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count == 1 {\n              \
    \  result += \"_\"\n            } else if space_count == 2 {\n               \
    \ result += \"-\"\n            }\n        } else {\n            space_count =\
    \ 0\n            result += string(c)\n        }\n    }\n    return result\n}\n\
    \nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpfxmc4iey_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpfxmc4iey_test.go:47: expected 'Exa-mple', got 'Exa_-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpfxmc4iey_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var prev_prev_char byte\n    for _, char := range\
    \ text {\n        if char == ' ' {\n            if prev_char == ' ' {\n      \
    \          if prev_prev_char == ' ' {\n                    result += \"-\"\n \
    \               } else {\n                    result += \"_\"\n              \
    \  }\n            } else {\n                result += \"_\"\n            }\n \
    \       } else {\n            result += string(char)\n        }\n        prev_prev_char\
    \ = prev_char\n        prev_char = byte(char)\n    }\n    return result\n}\n\n\
    func TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp0vbmkyxb_test.go:52: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp0vbmkyxb_test.go:52:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count == 1 {\n              \
    \  result += \"_\"\n            } else if space_count == 2 {\n               \
    \ result += \"-\"\n            }\n        } else {\n            space_count =\
    \ 0\n            result += string(c)\n        }\n    }\n    return result\n}\n\
    \nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpfxmc4iey_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpfxmc4iey_test.go:47: expected 'Exa-mple', got 'Exa_-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpfxmc4iey_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var last_char byte\n    var last_last_char byte\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if last_char == ' ' && last_last_char\
    \ == ' ' {\n                result += \"-\"\n            } else {\n          \
    \      result += \"_\"\n            }\n        } else {\n            result +=\
    \ string(text[i])\n        }\n        last_last_char = last_char\n        last_char\
    \ = text[i]\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmppqkai0v4_test.go:48: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmppqkai0v4_test.go:48:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count == 1 {\n              \
    \  result += \"_\"\n            } else if space_count > 2 {\n                result\
    \ += \"-\"\n            }\n        } else {\n            space_count = 0\n   \
    \         result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpd7b2d1dd_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n\
    \        tmpd7b2d1dd_test.go:47: expected 'Exa-mple', got 'Exa_-mple'\n    ---\
    \ FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpd7b2d1dd_test.go:47: expected\
    \ '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var last_char byte\n    var last_char_count int\n\n    for _, char := range\
    \ text {\n        if char == ' ' {\n            if last_char == ' ' {\n      \
    \          last_char_count += 1\n            } else {\n                last_char\
    \ = ' '\n                last_char_count = 1\n            }\n        } else {\n\
    \            if last_char == ' ' {\n                if last_char_count > 2 {\n\
    \                    result += \"-\"\n                } else {\n             \
    \       result += \"_\"\n                }\n            }\n            last_char\
    \ = byte(char)\n            last_char_count = 1\n        }\n        result +=\
    \ string(char)\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmpub1oxkyq_test.go:57: expected 'Mudasir_Hanif_', got 'Mudasir\
    \ _Hanif '\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmpub1oxkyq_test.go:57:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow _Yellow  _Dirty  _Fellow'\n\
    \    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpub1oxkyq_test.go:57:\
    \ expected 'Exa-mple', got 'Exa   -mple'\n    --- FAIL: TestFix_Spaces/test_num__4\
    \ (0.00s)\n        tmpub1oxkyq_test.go:57: expected '-Exa_1_2_2_mple', got ' \
    \  -Exa _1 _2 _2 _mple'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prevSpace bool\n    for _, c := range text {\n        if c == ' ' {\n\
    \            if prevSpace {\n                result += \"-\"\n            } else\
    \ {\n                result += \"_\"\n            }\n            prevSpace = true\n\
    \        } else {\n            result += string(c)\n            prevSpace = false\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp47636oze_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp47636oze_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp47636oze_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var space_count int\n    for _, char := range text\
    \ {\n        if char == ' ' {\n            space_count++\n            if space_count\
    \ == 1 {\n                result += \"_\"\n            } else if space_count ==\
    \ 2 {\n                result += \"-\"\n            }\n        } else {\n    \
    \        space_count = 0\n            result += string(char)\n        }\n    \
    \    prev_char = byte(char)\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5w0lhw3k_test.go:13:9: prev_char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074893
- exit_code: 0
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var last_char_is_space bool = false\n    var consecutive_spaces int = 0\n\
    \    for _, char := range text {\n        if char == ' ' {\n            if last_char_is_space\
    \ {\n                consecutive_spaces++\n            } else {\n            \
    \    consecutive_spaces = 1\n            }\n            last_char_is_space = true\n\
    \        } else {\n            if consecutive_spaces > 2 {\n                result\
    \ += \"-\"\n            } else {\n                for i := 0; i < consecutive_spaces;\
    \ i++ {\n                    result += \"_\"\n                }\n            }\n\
    \            result += string(char)\n            last_char_is_space = false\n\
    \            consecutive_spaces = 0\n        }\n    }\n    if consecutive_spaces\
    \ > 2 {\n        result += \"-\"\n    } else {\n        for i := 0; i < consecutive_spaces;\
    \ i++ {\n            result += \"_\"\n        }\n    }\n    return result\n}\n\
    \nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var prev_prev_char byte\n    var prev_prev_prev_char\
    \ byte\n    var prev_prev_prev_prev_char byte\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if prev_char == ' ' && prev_prev_char\
    \ == ' ' && prev_prev_prev_char == ' ' && prev_prev_prev_prev_char == ' ' {\n\
    \                result += \"-\"\n            } else {\n                result\
    \ += \"_\"\n            }\n        } else {\n            result += string(text[i])\n\
    \        }\n        prev_prev_prev_prev_char = prev_prev_prev_char\n        prev_prev_prev_char\
    \ = prev_prev_char\n        prev_prev_char = prev_char\n        prev_char = text[i]\n\
    \    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpc4tafigl_test.go:52: expected 'Exa-mple', got 'Exa___mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpc4tafigl_test.go:52:\
    \ expected '-Exa_1_2_2_mple', got '___Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if prev_space {\n                space_count++\n\
    \            } else {\n                space_count = 1\n            }\n      \
    \      prev_space = true\n        } else {\n            if prev_space {\n    \
    \            if space_count > 2 {\n                    result += \"-\"\n     \
    \           } else {\n                    result += \"_\"\n                }\n\
    \            }\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    if prev_space {\n        if space_count > 2 {\n       \
    \     result += \"-\"\n        } else {\n            result += \"_\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp_l_1up2v_test.go:62: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count == 1 {\n              \
    \  result += \"_\"\n            } else if space_count == 2 {\n               \
    \ result += \"-\"\n            }\n        } else {\n            space_count =\
    \ 0\n            result += string(c)\n        }\n    }\n    return result\n}\n\
    \nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpfxmc4iey_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpfxmc4iey_test.go:47: expected 'Exa-mple', got 'Exa_-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpfxmc4iey_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if !prev_space {\n                result\
    \ += \"_\"\n                prev_space = true\n                space_count = 1\n\
    \            } else {\n                space_count++\n                if space_count\
    \ > 2 {\n                    result += \"-\"\n                    space_count\
    \ = 0\n                }\n            }\n        } else {\n            result\
    \ += string(c)\n            prev_space = false\n        }\n    }\n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpp2658u5g_test.go:53: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n\
    \        tmpp2658u5g_test.go:53: expected 'Exa-mple', got 'Exa_-mple'\n    ---\
    \ FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpp2658u5g_test.go:53: expected\
    \ '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var prev_prev_char byte\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if prev_char == ' ' && prev_prev_char\
    \ == ' ' {\n                result += \"-\"\n            } else {\n          \
    \      result += \"_\"\n            }\n        } else {\n            result +=\
    \ string(text[i])\n        }\n        prev_prev_char = prev_char\n        prev_char\
    \ = text[i]\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp2s36_6sb_test.go:48: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp2s36_6sb_test.go:48:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var prev_prev_char byte\n    for i, char := range\
    \ text {\n        if i == 0 {\n            prev_char = byte(char)\n          \
    \  result += string(char)\n            continue\n        }\n        if i == 1\
    \ {\n            prev_prev_char = byte(char)\n            result += string(char)\n\
    \            continue\n        }\n        if byte(char) == ' ' {\n           \
    \ if prev_char == ' ' && prev_prev_char == ' ' {\n                result += \"\
    -\"\n            } else {\n                result += \"_\"\n            }\n  \
    \      } else {\n            result += string(char)\n        }\n        prev_prev_char\
    \ = prev_char\n        prev_char = byte(char)\n    }\n    return result\n}\n\n\
    func TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpt3ghge8h_test.go:58: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpt3ghge8h_test.go:58:\
    \ expected '-Exa_1_2_2_mple', got '  -Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if !prev_space {\n                result\
    \ += \"_\"\n                prev_space = true\n                space_count = 1\n\
    \            } else {\n                space_count++\n                if space_count\
    \ > 2 {\n                    result += \"-\"\n                    space_count\
    \ = 0\n                }\n            }\n        } else {\n            result\
    \ += string(c)\n            prev_space = false\n        }\n    }\n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpp2658u5g_test.go:53: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n\
    \        tmpp2658u5g_test.go:53: expected 'Exa-mple', got 'Exa_-mple'\n    ---\
    \ FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpp2658u5g_test.go:53: expected\
    \ '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    for i := 0; i < len(text); i++ {\n        if text[i]\
    \ == ' ' {\n            if prev_char == ' ' {\n                result += \"-\"\
    \n            } else {\n                result += \"_\"\n            }\n     \
    \   } else {\n            result += string(text[i])\n        }\n        prev_char\
    \ = text[i]\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp3__4411v_test.go:46: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp3__4411v_test.go:46: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp3__4411v_test.go:46:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count == 1 {\n              \
    \  result += \"_\"\n            } else if space_count > 2 {\n                result\
    \ += \"-\"\n            }\n        } else {\n            space_count = 0\n   \
    \         result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpd7b2d1dd_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n\
    \        tmpd7b2d1dd_test.go:47: expected 'Exa-mple', got 'Exa_-mple'\n    ---\
    \ FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpd7b2d1dd_test.go:47: expected\
    \ '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var prev_prev_char byte\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if prev_char == ' ' && prev_prev_char\
    \ == ' ' {\n                result += \"-\"\n            } else {\n          \
    \      result += \"_\"\n            }\n        } else {\n            result +=\
    \ string(text[i])\n        }\n        prev_prev_char = prev_char\n        prev_char\
    \ = text[i]\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp2s36_6sb_test.go:48: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp2s36_6sb_test.go:48:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var spaces int\n    for _, c := range text {\n        if c == ' ' {\n   \
    \         spaces++\n            if spaces == 1 {\n                result += \"\
    _\"\n            } else if spaces > 2 {\n                result += \"-\"\n   \
    \         }\n        } else {\n            spaces = 0\n            result += string(c)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpu9ey3rwl_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n\
    \        tmpu9ey3rwl_test.go:47: expected 'Exa-mple', got 'Exa_-mple'\n    ---\
    \ FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpu9ey3rwl_test.go:47: expected\
    \ '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if prev_space {\n                space_count++\n\
    \            } else {\n                prev_space = true\n                space_count\
    \ = 1\n            }\n        } else {\n            if prev_space {\n        \
    \        if space_count > 2 {\n                    result += \"-\"\n         \
    \       } else {\n                    result += \"_\"\n                }\n   \
    \         }\n            prev_space = false\n            result += string(c)\n\
    \        }\n    }\n    if prev_space {\n        if space_count > 2 {\n       \
    \     result += \"-\"\n        } else {\n            result += \"_\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp3gvtr5pn_test.go:62: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var prev_prev_char byte\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if prev_char == ' ' && prev_prev_char\
    \ == ' ' {\n                result += \"-\"\n            } else {\n          \
    \      result += \"_\"\n            }\n        } else {\n            result +=\
    \ string(text[i])\n        }\n        prev_prev_char = prev_char\n        prev_char\
    \ = text[i]\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp2s36_6sb_test.go:48: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp2s36_6sb_test.go:48:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var prev_prev_char byte\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if prev_char == ' ' && prev_prev_char\
    \ == ' ' {\n                result += \"-\"\n            } else {\n          \
    \      result += \"_\"\n            }\n        } else {\n            result +=\
    \ string(text[i])\n        }\n        prev_prev_char = prev_char\n        prev_char\
    \ = text[i]\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp2s36_6sb_test.go:48: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp2s36_6sb_test.go:48:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result []rune\n\
    \    var space_count int\n    for _, r := range text {\n        if r == ' ' {\n\
    \            space_count++\n            if space_count == 1 {\n              \
    \  result = append(result, '_')\n            } else if space_count == 2 {\n  \
    \              result = append(result, '-')\n            }\n        } else {\n\
    \            space_count = 0\n            result = append(result, r)\n       \
    \ }\n    }\n    return string(result)\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpipur4xip_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpipur4xip_test.go:47: expected 'Exa-mple', got 'Exa_-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpipur4xip_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if prev_space {\n                space_count++\n\
    \            } else {\n                prev_space = true\n                space_count\
    \ = 1\n            }\n        } else {\n            if prev_space {\n        \
    \        if space_count > 2 {\n                    result += \"-\"\n         \
    \       } else {\n                    result += \"_\"\n                }\n   \
    \         }\n            prev_space = false\n            result += string(c)\n\
    \        }\n    }\n    if prev_space {\n        if space_count > 2 {\n       \
    \     result += \"-\"\n        } else {\n            result += \"_\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp3gvtr5pn_test.go:62: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, ch := range text {\n        if ch\
    \ == ' ' {\n            if prev_space {\n                result += \"-\"\n   \
    \         } else {\n                result += \"_\"\n            }\n         \
    \   prev_space = true\n        } else {\n            result += string(ch)\n  \
    \          prev_space = false\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp1v8kt129_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp1v8kt129_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp1v8kt129_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count > 2 {\n               \
    \ result += \"-\"\n                space_count = 0\n            }\n        } else\
    \ {\n            if space_count > 0 {\n                result += \"_\"\n     \
    \           space_count = 0\n            }\n            result += string(c)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmpf00md_ia_test.go:49: expected 'Mudasir_Hanif_', got 'Mudasir_Hanif'\n\
    \    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmpf00md_ia_test.go:49:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow_Yellow_Dirty_Fellow'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count > 2 {\n               \
    \ continue\n            }\n        } else {\n            space_count = 0\n   \
    \     }\n        if c == ' ' {\n            result += \"_\"\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjq9ievky_test.go:49: expected 'Exa-mple', got 'Exa__mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjq9ievky_test.go:49:\
    \ expected '-Exa_1_2_2_mple', got '__Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, ch := range text {\n        if ch\
    \ == ' ' {\n            if prev_space {\n                result += \"-\"\n   \
    \         } else {\n                result += \"_\"\n            }\n         \
    \   prev_space = true\n        } else {\n            result += string(ch)\n  \
    \          prev_space = false\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp1v8kt129_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp1v8kt129_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp1v8kt129_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var prev_prev_char byte\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if prev_char == ' ' && prev_prev_char\
    \ == ' ' {\n                result += \"-\"\n            } else {\n          \
    \      result += \"_\"\n            }\n        } else {\n            result +=\
    \ string(text[i])\n        }\n        prev_prev_char = prev_char\n        prev_char\
    \ = text[i]\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp2s36_6sb_test.go:48: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp2s36_6sb_test.go:48:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    for _, c := range text {\n        if c == ' ' {\n\
    \            if prev_space {\n                result += \"-\"\n            } else\
    \ {\n                result += \"_\"\n            }\n            prev_space =\
    \ true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp1kq908g5_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp1kq908g5_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp1kq908g5_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count == 1 {\n              \
    \  result += \"_\"\n            } else if space_count == 2 {\n               \
    \ result += \"-\"\n            }\n        } else {\n            result += string(c)\n\
    \            space_count = 0\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpp5idyjmq_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpp5idyjmq_test.go:47: expected 'Exa-mple', got 'Exa_-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpp5idyjmq_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if prev_space {\n                space_count++\n\
    \            } else {\n                space_count = 1\n            }\n      \
    \      prev_space = true\n        } else {\n            if prev_space {\n    \
    \            if space_count > 2 {\n                    result += \"-\"\n     \
    \           } else {\n                    result += \"_\"\n                }\n\
    \            }\n            prev_space = false\n            result += string(c)\n\
    \        }\n    }\n    if prev_space {\n        if space_count > 2 {\n       \
    \     result += \"-\"\n        } else {\n            result += \"_\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpytozem68_test.go:62: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    for _, c := range text {\n        if c == ' ' {\n\
    \            if prev_space {\n                result += \"-\"\n            } else\
    \ {\n                result += \"_\"\n            }\n            prev_space =\
    \ true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp1kq908g5_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp1kq908g5_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp1kq908g5_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if !prev_space {\n                space_count\
    \ = 1\n                prev_space = true\n            } else {\n             \
    \   space_count++\n            }\n            if space_count > 2 {\n         \
    \       result += \"-\"\n            } else {\n                result += \"_\"\
    \n            }\n        } else {\n            result += string(c)\n         \
    \   prev_space = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp7qyxv0xm_test.go:53: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp7qyxv0xm_test.go:53:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if !prev_space {\n                space_count\
    \ = 1\n                prev_space = true\n            } else {\n             \
    \   space_count++\n            }\n            if space_count > 2 {\n         \
    \       result += \"-\"\n            } else {\n                result += \"_\"\
    \n            }\n        } else {\n            result += string(c)\n         \
    \   prev_space = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp7qyxv0xm_test.go:53: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp7qyxv0xm_test.go:53:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if prev_space {\n                space_count++\n\
    \            } else {\n                space_count = 1\n            }\n      \
    \      prev_space = true\n        } else {\n            if prev_space {\n    \
    \            if space_count > 2 {\n                    result += \"-\"\n     \
    \           } else {\n                    result += \"_\"\n                }\n\
    \            }\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    if prev_space {\n        if space_count > 2 {\n       \
    \     result += \"-\"\n        } else {\n            result += \"_\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp_l_1up2v_test.go:62: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if prev_space {\n                space_count++\n\
    \            } else {\n                space_count = 1\n            }\n      \
    \      prev_space = true\n        } else {\n            if prev_space {\n    \
    \            if space_count > 2 {\n                    result += \"-\"\n     \
    \           } else {\n                    result += \"_\"\n                }\n\
    \            }\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    if prev_space {\n        if space_count > 2 {\n       \
    \     result += \"-\"\n        } else {\n            result += \"_\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp_l_1up2v_test.go:62: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if prev_space {\n                space_count++\n\
    \            } else {\n                space_count = 1\n            }\n      \
    \      prev_space = true\n        } else {\n            if prev_space {\n    \
    \            if space_count > 2 {\n                    result += \"-\"\n     \
    \           } else {\n                    result += \"_\"\n                }\n\
    \            }\n            prev_space = false\n            result += string(c)\n\
    \        }\n    }\n    if prev_space {\n        if space_count > 2 {\n       \
    \     result += \"-\"\n        } else {\n            result += \"_\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpytozem68_test.go:62: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var prev_prev_char byte\n    for i, char := range\
    \ text {\n        if i == 0 {\n            prev_char = byte(char)\n          \
    \  if char == ' ' {\n                result += \"_\"\n            } else {\n \
    \               result += string(char)\n            }\n        } else if i ==\
    \ 1 {\n            prev_prev_char = prev_char\n            prev_char = byte(char)\n\
    \            if char == ' ' {\n                if prev_char == ' ' {\n       \
    \             result += \"-\"\n                } else {\n                    result\
    \ += \"_\"\n                }\n            } else {\n                result +=\
    \ string(char)\n            }\n        } else {\n            if char == ' ' {\n\
    \                if prev_char == ' ' && prev_prev_char == ' ' {\n            \
    \        result += \"-\"\n                } else {\n                    result\
    \ += \"_\"\n                }\n            } else {\n                result +=\
    \ string(char)\n            }\n            prev_prev_char = prev_char\n      \
    \      prev_char = byte(char)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp29lt75no_test.go:69: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp29lt75no_test.go:69:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count == 1 {\n              \
    \  result += \"_\"\n            } else if space_count == 2 {\n               \
    \ result += \"-\"\n            }\n        } else {\n            space_count =\
    \ 0\n            result += string(c)\n        }\n    }\n    return result\n}\n\
    \nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpfxmc4iey_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpfxmc4iey_test.go:47: expected 'Exa-mple', got 'Exa_-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpfxmc4iey_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 0
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result []rune\n\
    \    var prev_space bool = false\n    var space_count int = 0\n    for _, c :=\
    \ range text {\n        if c == ' ' {\n            if prev_space {\n         \
    \       space_count++\n            } else {\n                prev_space = true\n\
    \                space_count = 1\n            }\n        } else {\n          \
    \  if prev_space {\n                if space_count > 2 {\n                   \
    \ result = append(result, '-')\n                } else {\n                   \
    \ for i := 0; i < space_count; i++ {\n                        result = append(result,\
    \ '_')\n                    }\n                }\n                prev_space =\
    \ false\n            }\n            result = append(result, c)\n        }\n  \
    \  }\n    if prev_space {\n        if space_count > 2 {\n            result =\
    \ append(result, '-')\n        } else {\n            for i := 0; i < space_count;\
    \ i++ {\n                result = append(result, '_')\n            }\n       \
    \ }\n    }\n    return string(result)\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, char := range text\
    \ {\n        if char == ' ' {\n            if !prev_space {\n                result\
    \ += \"_\"\n                prev_space = true\n                space_count = 1\n\
    \            } else {\n                space_count += 1\n                if space_count\
    \ == 3 {\n                    result += \"-\"\n                    space_count\
    \ = 0\n                }\n            }\n        } else {\n            result\
    \ += string(char)\n            prev_space = false\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpwr842c4k_test.go:53: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n\
    \        tmpwr842c4k_test.go:53: expected 'Exa-mple', got 'Exa_-mple'\n    ---\
    \ FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpwr842c4k_test.go:53: expected\
    \ '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var curr_char byte\n    var space_count int\n   \
    \ for i := 0; i < len(text); i++ {\n        curr_char = text[i]\n        if curr_char\
    \ == ' ' {\n            space_count++\n            if space_count == 1 {\n   \
    \             result += string(curr_char)\n            } else if space_count ==\
    \ 2 {\n                result += \"_\"\n            }\n        } else {\n    \
    \        if space_count > 2 {\n                result += \"-\"\n            }\n\
    \            result += string(curr_char)\n            space_count = 0\n      \
    \  }\n        prev_char = curr_char\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdc0429_u_test.go:13:9: prev_char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte = ' '\n    for _, char := range text {\n        if char\
    \ == ' ' {\n            if prev_char == ' ' {\n                result += \"-\"\
    \n            } else {\n                result += \"_\"\n            }\n     \
    \   } else {\n            result += string(char)\n        }\n        prev_char\
    \ = byte(char)\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp9s_qqrhc_test.go:46: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp9s_qqrhc_test.go:46: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp9s_qqrhc_test.go:46:\
    \ expected '-Exa_1_2_2_mple', got '---Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            space_count++\n            if space_count\
    \ > 2 {\n                if !prev_space {\n                    result += \"-\"\
    \n                }\n            } else {\n                result += \"_\"\n \
    \           }\n            prev_space = true\n        } else {\n            space_count\
    \ = 0\n            result += string(c)\n            prev_space = false\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpof1ze4ck_test.go:52: expected 'Exa-mple', got 'Exa__mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpof1ze4ck_test.go:52:\
    \ expected '-Exa_1_2_2_mple', got '__Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result []byte\n\
    \    var space_count int\n    for i := 0; i < len(text); i++ {\n        if text[i]\
    \ == ' ' {\n            space_count++\n            if space_count > 2 {\n    \
    \            continue\n            }\n        } else {\n            space_count\
    \ = 0\n        }\n        result = append(result, text[i])\n    }\n    return\
    \ string(result)\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmpf3den1ls_test.go:45: expected 'Mudasir_Hanif_', got 'Mudasir\
    \ Hanif '\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmpf3den1ls_test.go:45:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow Yellow  Dirty  Fellow'\n\
    \    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf3den1ls_test.go:45:\
    \ expected 'Exa-mple', got 'Exa  mple'\n    --- FAIL: TestFix_Spaces/test_num__4\
    \ (0.00s)\n        tmpf3den1ls_test.go:45: expected '-Exa_1_2_2_mple', got ' \
    \ Exa 1 2 2 mple'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count > 2 {\n               \
    \ continue\n            }\n        } else {\n            space_count = 0\n   \
    \     }\n        result += string(c)\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmpunsmqte8_test.go:45: expected 'Mudasir_Hanif_', got 'Mudasir\
    \ Hanif '\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmpunsmqte8_test.go:45:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow Yellow  Dirty  Fellow'\n\
    \    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpunsmqte8_test.go:45:\
    \ expected 'Exa-mple', got 'Exa  mple'\n    --- FAIL: TestFix_Spaces/test_num__4\
    \ (0.00s)\n        tmpunsmqte8_test.go:45: expected '-Exa_1_2_2_mple', got ' \
    \ Exa 1 2 2 mple'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count > 2 {\n               \
    \ result += \"-\"\n                space_count = 0\n            }\n        } else\
    \ {\n            if space_count > 0 {\n                result += \"_\"\n     \
    \           space_count = 0\n            }\n            result += string(c)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmpf00md_ia_test.go:49: expected 'Mudasir_Hanif_', got 'Mudasir_Hanif'\n\
    \    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmpf00md_ia_test.go:49:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow_Yellow_Dirty_Fellow'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if prev_space {\n                space_count++\n\
    \            } else {\n                space_count = 1\n            }\n      \
    \      prev_space = true\n        } else {\n            if prev_space {\n    \
    \            if space_count > 2 {\n                    result += \"-\"\n     \
    \           } else {\n                    result += \"_\"\n                }\n\
    \            }\n            prev_space = false\n            result += string(c)\n\
    \        }\n    }\n    if prev_space {\n        if space_count > 2 {\n       \
    \     result += \"-\"\n        } else {\n            result += \"_\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpytozem68_test.go:62: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if prev_space {\n                space_count++\n\
    \            } else {\n                space_count = 1\n            }\n      \
    \      prev_space = true\n        } else {\n            if prev_space {\n    \
    \            if space_count > 2 {\n                    result += \"-\"\n     \
    \           } else {\n                    result += \"_\"\n                }\n\
    \            }\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    if prev_space {\n        if space_count > 2 {\n       \
    \     result += \"-\"\n        } else {\n            result += \"_\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp_l_1up2v_test.go:62: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var curr_char byte\n    var space_count int\n   \
    \ for i := 0; i < len(text); i++ {\n        curr_char = text[i]\n        if curr_char\
    \ == ' ' {\n            space_count++\n            if space_count > 2 {\n    \
    \            continue\n            }\n        } else {\n            space_count\
    \ = 0\n        }\n        if curr_char == ' ' && prev_char == ' ' {\n        \
    \    result += \"-\"\n        } else {\n            result += string(curr_char)\n\
    \        }\n        prev_char = curr_char\n    }\n    return result\n}\n\nfunc\
    \ TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmpl5kcpnq3_test.go:53: expected 'Mudasir_Hanif_', got 'Mudasir\
    \ Hanif '\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmpl5kcpnq3_test.go:53:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow Yellow -Dirty -Fellow'\n\
    \    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpl5kcpnq3_test.go:53:\
    \ expected 'Exa-mple', got 'Exa -mple'\n    --- FAIL: TestFix_Spaces/test_num__4\
    \ (0.00s)\n        tmpl5kcpnq3_test.go:53: expected '-Exa_1_2_2_mple', got ' -Exa\
    \ 1 2 2 mple'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count == 1 {\n              \
    \  result += \"_\"\n            } else if space_count == 2 {\n               \
    \ result += \"-\"\n            }\n        } else {\n            result += string(c)\n\
    \            space_count = 0\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpp5idyjmq_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpp5idyjmq_test.go:47: expected 'Exa-mple', got 'Exa_-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpp5idyjmq_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var prev_prev_char byte\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if prev_char == ' ' && prev_prev_char\
    \ == ' ' {\n                result += \"-\"\n            } else {\n          \
    \      result += \"_\"\n            }\n        } else {\n            result +=\
    \ string(text[i])\n        }\n        prev_prev_char = prev_char\n        prev_char\
    \ = text[i]\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp2s36_6sb_test.go:48: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp2s36_6sb_test.go:48:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var last_char byte\n    var space_count int\n    for _, char := range text\
    \ {\n        if char == ' ' {\n            space_count++\n            if space_count\
    \ == 1 {\n                result += \"_\"\n            } else if space_count ==\
    \ 2 {\n                result += \"-\"\n            }\n        } else {\n    \
    \        space_count = 0\n            result += string(char)\n        }\n    \
    \    last_char = byte(char)\n    }\n    if last_char == ' ' {\n        result\
    \ += \"_\"\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmpcg8tpsxi_test.go:52: expected 'Mudasir_Hanif_', got 'Mudasir_Hanif__'\n\
    \    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmpcg8tpsxi_test.go:52:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow_Yellow_-Dirty_-Fellow'\n\
    \    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpcg8tpsxi_test.go:52:\
    \ expected 'Exa-mple', got 'Exa_-mple'\n    --- FAIL: TestFix_Spaces/test_num__4\
    \ (0.00s)\n        tmpcg8tpsxi_test.go:52: expected '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var space_count int\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            space_count++\n            if\
    \ space_count == 1 {\n                result += string(text[i])\n            }\
    \ else if space_count == 2 {\n                result += \"_\"\n            }\n\
    \        } else {\n            if space_count > 2 {\n                result +=\
    \ \"-\"\n            }\n            space_count = 0\n            result += string(text[i])\n\
    \        }\n        prev_char = text[i]\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpehpbdm_test.go:13:9: prev_char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var count int\n    for _, c := range text {\n        if c == ' ' {\n    \
    \        count++\n            if count == 1 {\n                result += \"_\"\
    \n            } else if count == 2 {\n                result += \"-\"\n      \
    \      }\n        } else {\n            count = 0\n            result += string(c)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpcanxyscm_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpcanxyscm_test.go:47: expected 'Exa-mple', got 'Exa_-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpcanxyscm_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var prev_prev_char byte\n    var prev_prev_prev_char\
    \ byte\n    var prev_prev_prev_prev_char byte\n    var prev_prev_prev_prev_prev_char\
    \ byte\n    for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n  \
    \          if prev_char == ' ' && prev_prev_char == ' ' && prev_prev_prev_char\
    \ == ' ' && prev_prev_prev_prev_char == ' ' && prev_prev_prev_prev_prev_char ==\
    \ ' ' {\n                result += \"-\"\n            } else {\n             \
    \   result += \"_\"\n            }\n        } else {\n            result += string(text[i])\n\
    \        }\n        prev_prev_prev_prev_prev_char = prev_prev_prev_prev_char\n\
    \        prev_prev_prev_prev_char = prev_prev_prev_char\n        prev_prev_prev_char\
    \ = prev_prev_char\n        prev_prev_char = prev_char\n        prev_char = text[i]\n\
    \    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpp8rsvfe4_test.go:54: expected 'Exa-mple', got 'Exa___mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpp8rsvfe4_test.go:54:\
    \ expected '-Exa_1_2_2_mple', got '___Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074897
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, ch := range text\
    \ {\n        if ch == ' ' {\n            space_count++\n            if space_count\
    \ == 1 {\n                result += \"_\"\n            } else if space_count ==\
    \ 2 {\n                result += \"-\"\n            }\n            prev_space\
    \ = true\n        } else {\n            space_count = 0\n            result +=\
    \ string(ch)\n            prev_space = false\n        }\n    }\n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3xh8oih5_test.go:13:9: prev_space declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074897
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if prev_space {\n                space_count++\n\
    \            } else {\n                prev_space = true\n                space_count\
    \ = 1\n            }\n        } else {\n            if prev_space {\n        \
    \        if space_count > 2 {\n                    result += \"-\"\n         \
    \       } else {\n                    result += \"_\"\n                }\n   \
    \         }\n            prev_space = false\n            result += string(c)\n\
    \        }\n    }\n    if prev_space {\n        if space_count > 2 {\n       \
    \     result += \"-\"\n        } else {\n            result += \"_\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp3gvtr5pn_test.go:62: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char rune\n    var prev_prev_char rune\n    for _, char := range\
    \ text {\n        if char == ' ' {\n            if prev_char == ' ' {\n      \
    \          if prev_prev_char == ' ' {\n                    result += \"-\"\n \
    \               } else {\n                    result += \"_\"\n              \
    \  }\n            } else {\n                result += \"_\"\n            }\n \
    \       } else {\n            result += string(char)\n        }\n        prev_prev_char\
    \ = prev_char\n        prev_char = char\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpt8ih4na5_test.go:52: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpt8ih4na5_test.go:52:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var consecutive_spaces int\n    for _, c := range\
    \ text {\n        if c == ' ' {\n            if !prev_space {\n              \
    \  consecutive_spaces = 1\n                prev_space = true\n               \
    \ result += \"_\"\n            } else {\n                consecutive_spaces +=\
    \ 1\n                if consecutive_spaces > 2 {\n                    result +=\
    \ \"-\"\n                } else {\n                    result += \"_\"\n     \
    \           }\n            }\n        } else {\n            consecutive_spaces\
    \ = 0\n            prev_space = false\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpg44cp1mx_test.go:55: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpg44cp1mx_test.go:55:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var spaces int\n    for _, c := range text {\n        if c == ' ' {\n   \
    \         spaces++\n            if spaces > 2 {\n                continue\n  \
    \          }\n        } else {\n            spaces = 0\n        }\n        if\
    \ c == ' ' {\n            result += \"-\"\n        } else {\n            result\
    \ += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmpp4v_ooyl_test.go:49: expected 'Mudasir_Hanif_', got 'Mudasir-Hanif-'\n\
    \    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmpp4v_ooyl_test.go:49:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow-Yellow--Dirty--Fellow'\n\
    \    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpp4v_ooyl_test.go:49:\
    \ expected 'Exa-mple', got 'Exa--mple'\n    --- FAIL: TestFix_Spaces/test_num__4\
    \ (0.00s)\n        tmpp4v_ooyl_test.go:49: expected '-Exa_1_2_2_mple', got '--Exa-1-2-2-mple'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte = ' '\n    var prev_prev_char byte = ' '\n    for i :=\
    \ 0; i < len(text); i++ {\n        if text[i] == ' ' {\n            if prev_char\
    \ == ' ' && prev_prev_char == ' ' {\n                result += \"-\"\n       \
    \     } else {\n                result += \"_\"\n            }\n        } else\
    \ {\n            result += string(text[i])\n        }\n        prev_prev_char\
    \ = prev_char\n        prev_char = text[i]\n    }\n    return result\n}\n\nfunc\
    \ TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpartc6m9k_test.go:48: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpartc6m9k_test.go:48:\
    \ expected '-Exa_1_2_2_mple', got '---Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if prev_space {\n                space_count++\n\
    \            } else {\n                prev_space = true\n                space_count\
    \ = 1\n            }\n        } else {\n            if prev_space {\n        \
    \        if space_count > 2 {\n                    result += \"-\"\n         \
    \       } else {\n                    result += \"_\"\n                }\n   \
    \         }\n            prev_space = false\n            result += string(c)\n\
    \        }\n    }\n    if prev_space {\n        if space_count > 2 {\n       \
    \     result += \"-\"\n        } else {\n            result += \"_\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp3gvtr5pn_test.go:62: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var last_char byte = ' '\n    for i := 0; i < len(text); i++ {\n        if\
    \ text[i] == ' ' {\n            if last_char == ' ' {\n                result\
    \ += \"-\"\n            } else {\n                result += \"_\"\n          \
    \  }\n        } else {\n            result += string(text[i])\n        }\n   \
    \     last_char = text[i]\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpbahql11w_test.go:46: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpbahql11w_test.go:46: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpbahql11w_test.go:46:\
    \ expected '-Exa_1_2_2_mple', got '---Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var prev_prev_char byte\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if prev_char == ' ' && prev_prev_char\
    \ == ' ' {\n                result += \"-\"\n            } else {\n          \
    \      result += \"_\"\n            }\n        } else {\n            result +=\
    \ string(text[i])\n        }\n        prev_prev_char = prev_char\n        prev_char\
    \ = text[i]\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp2s36_6sb_test.go:48: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp2s36_6sb_test.go:48:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count > 2 {\n               \
    \ result += \"-\"\n                space_count = 0\n            }\n        } else\
    \ {\n            space_count = 0\n            result += string(c)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmpu_nw2908_test.go:46: expected 'Mudasir_Hanif_', got 'MudasirHanif'\n\
    \    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmpu_nw2908_test.go:46:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'YellowYellowDirtyFellow'\n   \
    \ --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpu_nw2908_test.go:46:\
    \ expected '-Exa_1_2_2_mple', got '-Exa122mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 0
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var last_char_is_space bool = false\n    var consecutive_spaces int = 0\n\
    \    for _, char := range text {\n        if char == ' ' {\n            if last_char_is_space\
    \ {\n                consecutive_spaces++\n            } else {\n            \
    \    consecutive_spaces = 1\n            }\n            last_char_is_space = true\n\
    \        } else {\n            if consecutive_spaces > 2 {\n                result\
    \ += \"-\"\n            } else {\n                for i := 0; i < consecutive_spaces;\
    \ i++ {\n                    result += \"_\"\n                }\n            }\n\
    \            consecutive_spaces = 0\n            last_char_is_space = false\n\
    \            result += string(char)\n        }\n    }\n    if consecutive_spaces\
    \ > 2 {\n        result += \"-\"\n    } else {\n        for i := 0; i < consecutive_spaces;\
    \ i++ {\n            result += \"_\"\n        }\n    }\n    return result\n}\n\
    \nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count == 1 {\n              \
    \  result += \"_\"\n            } else if space_count > 2 {\n                result\
    \ += \"-\"\n            }\n        } else {\n            space_count = 0\n   \
    \         result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpd7b2d1dd_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n\
    \        tmpd7b2d1dd_test.go:47: expected 'Exa-mple', got 'Exa_-mple'\n    ---\
    \ FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpd7b2d1dd_test.go:47: expected\
    \ '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, char := range text\
    \ {\n        if char == ' ' {\n            if prev_space {\n                space_count++\n\
    \            } else {\n                space_count = 1\n            }\n      \
    \      prev_space = true\n        } else {\n            if prev_space {\n    \
    \            if space_count > 2 {\n                    result += \"-\"\n     \
    \           } else {\n                    result += \"_\"\n                }\n\
    \            }\n            result += string(char)\n            prev_space = false\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmpyf0js6uw_test.go:55: expected 'Mudasir_Hanif_', got 'Mudasir_Hanif'\n\
    \    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmpyf0js6uw_test.go:55:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow_Yellow_Dirty_Fellow'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var count int\n    for i := 0; i < len(text); i++\
    \ {\n        if text[i] == ' ' {\n            count++\n            if count >\
    \ 2 {\n                if prev_char != '-' {\n                    result += \"\
    -\"\n                }\n            } else {\n                result += \"_\"\n\
    \            }\n        } else {\n            count = 0\n            result +=\
    \ string(text[i])\n        }\n        prev_char = text[i]\n    }\n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpglgz1wlk_test.go:51: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpglgz1wlk_test.go:51:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, ch := range text {\n        if ch\
    \ == ' ' {\n            if prev_space {\n                result += \"-\"\n   \
    \         } else {\n                result += \"_\"\n            }\n         \
    \   prev_space = true\n        } else {\n            result += string(ch)\n  \
    \          prev_space = false\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp1v8kt129_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp1v8kt129_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp1v8kt129_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count == 1 {\n              \
    \  result += \"_\"\n            } else if space_count == 2 {\n               \
    \ result += \"-\"\n            }\n        } else {\n            space_count =\
    \ 0\n            result += string(c)\n        }\n    }\n    return result\n}\n\
    \nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpfxmc4iey_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpfxmc4iey_test.go:47: expected 'Exa-mple', got 'Exa_-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpfxmc4iey_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if !prev_space {\n                result\
    \ += \"_\"\n                prev_space = true\n                space_count = 1\n\
    \            } else {\n                space_count++\n                if space_count\
    \ > 2 {\n                    result += \"-\"\n                    space_count\
    \ = 0\n                }\n            }\n        } else {\n            result\
    \ += string(c)\n            prev_space = false\n        }\n    }\n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpp2658u5g_test.go:53: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n\
    \        tmpp2658u5g_test.go:53: expected 'Exa-mple', got 'Exa_-mple'\n    ---\
    \ FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpp2658u5g_test.go:53: expected\
    \ '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    for _, c := range text {\n        if c == ' ' {\n\
    \            if prev_space {\n                result += \"-\"\n            } else\
    \ {\n                result += \"_\"\n            }\n            prev_space =\
    \ true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp1kq908g5_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp1kq908g5_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp1kq908g5_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if prev_space {\n                space_count++\n\
    \            } else {\n                space_count = 1\n            }\n      \
    \      prev_space = true\n        } else {\n            if prev_space {\n    \
    \            if space_count > 2 {\n                    result += \"-\"\n     \
    \           } else {\n                    result += \"_\"\n                }\n\
    \            }\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    if prev_space {\n        if space_count > 2 {\n       \
    \     result += \"-\"\n        } else {\n            result += \"_\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp_l_1up2v_test.go:62: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var last_char byte\n    for i := 0; i < len(text); i++ {\n        if text[i]\
    \ == ' ' {\n            if last_char == ' ' {\n                result += \"-\"\
    \n            } else {\n                result += \"_\"\n            }\n     \
    \   } else {\n            result += string(text[i])\n        }\n        last_char\
    \ = text[i]\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpkbgq6oyd_test.go:46: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpkbgq6oyd_test.go:46: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpkbgq6oyd_test.go:46:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count > 2 {\n               \
    \ result += \"-\"\n                space_count = 0\n            }\n        } else\
    \ {\n            if space_count > 0 {\n                result += \"_\"\n     \
    \           space_count = 0\n            }\n            result += string(c)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmpf00md_ia_test.go:49: expected 'Mudasir_Hanif_', got 'Mudasir_Hanif'\n\
    \    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmpf00md_ia_test.go:49:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow_Yellow_Dirty_Fellow'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var prev_prev_char byte\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if prev_char == ' ' && prev_prev_char\
    \ == ' ' {\n                result += \"-\"\n            } else {\n          \
    \      result += \"_\"\n            }\n        } else {\n            result +=\
    \ string(text[i])\n        }\n        prev_prev_char = prev_char\n        prev_char\
    \ = text[i]\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp2s36_6sb_test.go:48: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp2s36_6sb_test.go:48:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    for i, char := range text {\n        if char == '\
    \ ' {\n            if prev_char == ' ' {\n                result += \"-\"\n  \
    \          } else {\n                result += \"_\"\n            }\n        }\
    \ else {\n            result += string(char)\n        }\n        if i > 0 {\n\
    \            prev_char = text[i-1]\n        }\n    }\n    return result\n}\n\n\
    func TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp0dni96n__test.go:48: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp0dni96n__test.go:48:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1-2-2-mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count > 2 {\n               \
    \ continue\n            }\n        } else {\n            space_count = 0\n   \
    \     }\n        result += string(c)\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmpunsmqte8_test.go:45: expected 'Mudasir_Hanif_', got 'Mudasir\
    \ Hanif '\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmpunsmqte8_test.go:45:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow Yellow  Dirty  Fellow'\n\
    \    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpunsmqte8_test.go:45:\
    \ expected 'Exa-mple', got 'Exa  mple'\n    --- FAIL: TestFix_Spaces/test_num__4\
    \ (0.00s)\n        tmpunsmqte8_test.go:45: expected '-Exa_1_2_2_mple', got ' \
    \ Exa 1 2 2 mple'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if prev_space {\n                space_count++\n\
    \            } else {\n                space_count = 1\n            }\n      \
    \      prev_space = true\n        } else {\n            if prev_space {\n    \
    \            if space_count > 2 {\n                    result += \"-\"\n     \
    \           } else {\n                    result += \"_\"\n                }\n\
    \            }\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    if prev_space {\n        if space_count > 2 {\n       \
    \     result += \"-\"\n        } else {\n            result += \"_\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp_l_1up2v_test.go:62: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if !prev_space {\n                space_count\
    \ = 1\n                prev_space = true\n            } else {\n             \
    \   space_count++\n            }\n            if space_count > 2 {\n         \
    \       result += \"-\"\n            } else {\n                result += \"_\"\
    \n            }\n        } else {\n            prev_space = false\n          \
    \  result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpf9y8v_gw_test.go:53: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpf9y8v_gw_test.go:53:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if !prev_space {\n                result\
    \ += \"_\"\n                prev_space = true\n                space_count = 1\n\
    \            } else {\n                space_count++\n                if space_count\
    \ > 2 {\n                    result += \"-\"\n                    space_count\
    \ = 0\n                }\n            }\n        } else {\n            result\
    \ += string(c)\n            prev_space = false\n        }\n    }\n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpp2658u5g_test.go:53: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n\
    \        tmpp2658u5g_test.go:53: expected 'Exa-mple', got 'Exa_-mple'\n    ---\
    \ FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpp2658u5g_test.go:53: expected\
    \ '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var prev_prev_char byte\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if prev_char == ' ' && prev_prev_char\
    \ == ' ' {\n                result += \"-\"\n            } else {\n          \
    \      result += \"_\"\n            }\n        } else {\n            result +=\
    \ string(text[i])\n        }\n        prev_prev_char = prev_char\n        prev_char\
    \ = text[i]\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp2s36_6sb_test.go:48: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp2s36_6sb_test.go:48:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count == 1 {\n              \
    \  result += \"_\"\n            } else if space_count == 2 {\n               \
    \ result += \"-\"\n            }\n        } else {\n            space_count =\
    \ 0\n            result += string(c)\n        }\n    }\n    return result\n}\n\
    \nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpfxmc4iey_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpfxmc4iey_test.go:47: expected 'Exa-mple', got 'Exa_-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpfxmc4iey_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var prev_prev_char byte\n    var prev_prev_prev_char\
    \ byte\n    for _, char := range text {\n        if char == ' ' {\n          \
    \  if prev_char == ' ' && prev_prev_char == ' ' && prev_prev_prev_char == ' '\
    \ {\n                result += \"-\"\n            } else {\n                result\
    \ += \"_\"\n            }\n        } else {\n            result += string(char)\n\
    \        }\n        prev_prev_prev_char = prev_prev_char\n        prev_prev_char\
    \ = prev_char\n        prev_char = byte(char)\n    }\n    return result\n}\n\n\
    func TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpcsj4iurh_test.go:50: expected 'Exa-mple', got 'Exa___mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpcsj4iurh_test.go:50:\
    \ expected '-Exa_1_2_2_mple', got '___Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var prev_prev_char byte\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if prev_char == ' ' && prev_prev_char\
    \ == ' ' {\n                result += \"-\"\n            } else {\n          \
    \      result += \"_\"\n            }\n        } else {\n            result +=\
    \ string(text[i])\n        }\n        prev_prev_char = prev_char\n        prev_char\
    \ = text[i]\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp2s36_6sb_test.go:48: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp2s36_6sb_test.go:48:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, char := range text {\n        if char ==\
    \ ' ' {\n            space_count++\n            if space_count == 1 {\n      \
    \          result += \"_\"\n            } else if space_count > 2 {\n        \
    \        result += \"-\"\n            }\n        } else {\n            space_count\
    \ = 0\n            result += string(char)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpwcsx2i49_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n\
    \        tmpwcsx2i49_test.go:47: expected 'Exa-mple', got 'Exa_-mple'\n    ---\
    \ FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpwcsx2i49_test.go:47: expected\
    \ '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if !prev_space {\n                prev_space\
    \ = true\n                space_count = 1\n            } else {\n            \
    \    space_count++\n            }\n            if space_count > 2 {\n        \
    \        result += \"-\"\n            } else {\n                result += \"_\"\
    \n            }\n        } else {\n            prev_space = false\n          \
    \  space_count = 0\n            result += string(c)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpd1fjm1ku_test.go:54: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpd1fjm1ku_test.go:54:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count > 2 {\n               \
    \ result += \"-\"\n                space_count = 0\n            }\n        } else\
    \ {\n            if space_count > 0 {\n                result += \"_\"\n     \
    \           space_count = 0\n            }\n            result += string(c)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmpf00md_ia_test.go:49: expected 'Mudasir_Hanif_', got 'Mudasir_Hanif'\n\
    \    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmpf00md_ia_test.go:49:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow_Yellow_Dirty_Fellow'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if !prev_space {\n                space_count\
    \ = 1\n                prev_space = true\n            } else {\n             \
    \   space_count++\n            }\n            if space_count > 2 {\n         \
    \       result += \"-\"\n            } else {\n                result += \"_\"\
    \n            }\n        } else {\n            result += string(c)\n         \
    \   prev_space = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp7qyxv0xm_test.go:53: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp7qyxv0xm_test.go:53:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var space_count int\n    for _, char := range text\
    \ {\n        if char == ' ' {\n            space_count++\n            if space_count\
    \ == 1 {\n                result += string(char)\n            } else if space_count\
    \ == 2 {\n                result += \"_\"\n            }\n        } else {\n \
    \           if space_count > 2 {\n                result += \"-\"\n          \
    \  }\n            space_count = 0\n            result += string(char)\n      \
    \  }\n        prev_char = byte(char)\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbi8ieie6_test.go:13:9: prev_char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if !prev_space {\n                prev_space\
    \ = true\n                space_count = 1\n            } else {\n            \
    \    space_count++\n            }\n            if space_count > 2 {\n        \
    \        result += \"-\"\n            } else {\n                result += \"_\"\
    \n            }\n        } else {\n            prev_space = false\n          \
    \  space_count = 0\n            result += string(c)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpd1fjm1ku_test.go:54: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpd1fjm1ku_test.go:54:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var last_char byte\n    var last_char_count int\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if last_char == ' ' {\n    \
    \            last_char_count++\n            } else {\n                last_char\
    \ = ' '\n                last_char_count = 1\n            }\n            if last_char_count\
    \ > 2 {\n                result += \"-\"\n            } else {\n             \
    \   result += \"_\"\n            }\n        } else {\n            last_char =\
    \ text[i]\n            last_char_count = 0\n            result += string(text[i])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpv7b9mkrj_test.go:54: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpv7b9mkrj_test.go:54:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if prev_space {\n                space_count++\n\
    \            } else {\n                prev_space = true\n                space_count\
    \ = 1\n            }\n        } else {\n            if prev_space {\n        \
    \        if space_count > 2 {\n                    result += \"-\"\n         \
    \       } else {\n                    result += \"_\"\n                }\n   \
    \         }\n            prev_space = false\n            result += string(c)\n\
    \        }\n    }\n    if prev_space {\n        if space_count > 2 {\n       \
    \     result += \"-\"\n        } else {\n            result += \"_\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp3gvtr5pn_test.go:62: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if prev_space {\n                space_count++\n\
    \            } else {\n                prev_space = true\n                space_count\
    \ = 1\n            }\n        } else {\n            if prev_space {\n        \
    \        if space_count > 2 {\n                    result += \"-\"\n         \
    \       } else {\n                    result += \"_\"\n                }\n   \
    \         }\n            prev_space = false\n            result += string(c)\n\
    \        }\n    }\n    if prev_space {\n        if space_count > 2 {\n       \
    \     result += \"-\"\n        } else {\n            result += \"_\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp3gvtr5pn_test.go:62: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, ch := range text {\n        if ch\
    \ == ' ' {\n            if prev_space {\n                result += \"-\"\n   \
    \         } else {\n                result += \"_\"\n            }\n         \
    \   prev_space = true\n        } else {\n            result += string(ch)\n  \
    \          prev_space = false\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp1v8kt129_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp1v8kt129_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp1v8kt129_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var spaces int\n    for _, c := range text {\n        if c == ' ' {\n   \
    \         spaces++\n            if spaces == 1 {\n                result += string(c)\n\
    \            }\n        } else {\n            if spaces > 2 {\n              \
    \  result += \"-\"\n            }\n            result += string(c)\n         \
    \   spaces = 0\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmp_xbmxe6v_test.go:48: expected 'Mudasir_Hanif_', got 'Mudasir\
    \ Hanif '\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmp_xbmxe6v_test.go:48:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow Yellow Dirty Fellow'\n\
    \    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmp_xbmxe6v_test.go:48:\
    \ expected 'Exa-mple', got 'Exa -mple'\n    --- FAIL: TestFix_Spaces/test_num__4\
    \ (0.00s)\n        tmp_xbmxe6v_test.go:48: expected '-Exa_1_2_2_mple', got ' -Exa\
    \ 1 2 2 mple'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count == 1 {\n              \
    \  result += \"_\"\n            } else if space_count == 2 {\n               \
    \ result += \"-\"\n            }\n        } else {\n            space_count =\
    \ 0\n            result += string(c)\n        }\n    }\n    return result\n}\n\
    \nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpfxmc4iey_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpfxmc4iey_test.go:47: expected 'Exa-mple', got 'Exa_-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpfxmc4iey_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count == 1 {\n              \
    \  result += \"_\"\n            } else if space_count > 2 {\n                result\
    \ += \"-\"\n            }\n        } else {\n            space_count = 0\n   \
    \         result += string(c)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpd7b2d1dd_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n\
    \        tmpd7b2d1dd_test.go:47: expected 'Exa-mple', got 'Exa_-mple'\n    ---\
    \ FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpd7b2d1dd_test.go:47: expected\
    \ '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var prev_prev_char byte\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if prev_char == ' ' && prev_prev_char\
    \ == ' ' {\n                result += \"-\"\n            } else {\n          \
    \      result += \"_\"\n            }\n        } else {\n            result +=\
    \ string(text[i])\n        }\n        prev_prev_char = prev_char\n        prev_char\
    \ = text[i]\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp2s36_6sb_test.go:48: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp2s36_6sb_test.go:48:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev rune\n    for _, c := range text {\n        if c == ' ' {\n    \
    \        if prev == ' ' {\n                result += \"-\"\n            } else\
    \ {\n                result += \"_\"\n            }\n        } else {\n      \
    \      result += string(c)\n        }\n        prev = c\n    }\n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpmid0zr9b_test.go:46: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpmid0zr9b_test.go:46: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpmid0zr9b_test.go:46:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var prev_prev_char byte\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if prev_char == ' ' && prev_prev_char\
    \ == ' ' {\n                result += \"-\"\n            } else {\n          \
    \      result += \"_\"\n            }\n        } else {\n            result +=\
    \ string(text[i])\n        }\n        prev_prev_char = prev_char\n        prev_char\
    \ = text[i]\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp2s36_6sb_test.go:48: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp2s36_6sb_test.go:48:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var last_char rune\n    for _, char := range text {\n        if char == '\
    \ ' {\n            if last_char == ' ' {\n                result += \"-\"\n  \
    \          } else {\n                result += \"_\"\n            }\n        }\
    \ else {\n            result += string(char)\n        }\n        last_char = char\n\
    \    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpgboat84d_test.go:46: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpgboat84d_test.go:46: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpgboat84d_test.go:46:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    result := \"\"\n \
    \   space_count := 0\n    for _, c := range text {\n        if c == ' ' {\n  \
    \          space_count++\n            if space_count > 2 {\n                continue\n\
    \            }\n        } else {\n            space_count = 0\n        }\n   \
    \     if c == ' ' {\n            result += \"_\"\n        } else {\n         \
    \   result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpklceeosv_test.go:49: expected 'Exa-mple', got 'Exa__mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpklceeosv_test.go:49:\
    \ expected '-Exa_1_2_2_mple', got '__Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char rune\n    var prev_prev_char rune\n    for _, char := range\
    \ text {\n        if char == ' ' {\n            if prev_char == ' ' {\n      \
    \          if prev_prev_char == ' ' {\n                    result += \"-\"\n \
    \               } else {\n                    result += \"_\"\n              \
    \  }\n            } else {\n                result += \"_\"\n            }\n \
    \       } else {\n            result += string(char)\n        }\n        prev_prev_char\
    \ = prev_char\n        prev_char = char\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpt8ih4na5_test.go:52: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpt8ih4na5_test.go:52:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if !prev_space {\n                result\
    \ += \"_\"\n                prev_space = true\n                space_count = 1\n\
    \            } else {\n                space_count++\n                if space_count\
    \ > 2 {\n                    result += \"-\"\n                    space_count\
    \ = 0\n                }\n            }\n        } else {\n            result\
    \ += string(c)\n            prev_space = false\n        }\n    }\n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpp2658u5g_test.go:53: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n\
    \        tmpp2658u5g_test.go:53: expected 'Exa-mple', got 'Exa_-mple'\n    ---\
    \ FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpp2658u5g_test.go:53: expected\
    \ '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var prev_prev_char byte\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if prev_char == ' ' && prev_prev_char\
    \ == ' ' {\n                result += \"-\"\n            } else {\n          \
    \      result += \"_\"\n            }\n        } else {\n            result +=\
    \ string(text[i])\n        }\n        prev_prev_char = prev_char\n        prev_char\
    \ = text[i]\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp2s36_6sb_test.go:48: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp2s36_6sb_test.go:48:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, char := range text {\n        if char ==\
    \ ' ' {\n            space_count++\n            if space_count == 1 {\n      \
    \          result += \"_\"\n            } else if space_count > 2 {\n        \
    \        result += \"-\"\n            }\n        } else {\n            space_count\
    \ = 0\n            result += string(char)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpwcsx2i49_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n\
    \        tmpwcsx2i49_test.go:47: expected 'Exa-mple', got 'Exa_-mple'\n    ---\
    \ FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpwcsx2i49_test.go:47: expected\
    \ '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if prev_space {\n                space_count++\n\
    \            } else {\n                space_count = 1\n            }\n      \
    \      prev_space = true\n        } else {\n            if prev_space {\n    \
    \            if space_count > 2 {\n                    result += \"-\"\n     \
    \           } else {\n                    result += \"_\"\n                }\n\
    \            }\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    if prev_space {\n        if space_count > 2 {\n       \
    \     result += \"-\"\n        } else {\n            result += \"_\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp_l_1up2v_test.go:62: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074895
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var last_char byte\n    var last_char_is_space bool\n    var space_count\
    \ int\n    for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n   \
    \         if last_char_is_space {\n                space_count++\n           \
    \ } else {\n                space_count = 1\n            }\n            last_char_is_space\
    \ = true\n        } else {\n            if last_char_is_space {\n            \
    \    if space_count > 2 {\n                    result += \"-\"\n             \
    \   } else {\n                    result += \"_\"\n                }\n       \
    \     }\n            result += string(text[i])\n            last_char_is_space\
    \ = false\n        }\n        last_char = text[i]\n    }\n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0i27sfkd_test.go:13:9: last_char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    for _, c := range text {\n        if c == ' ' {\n\
    \            if prev_space {\n                result += \"-\"\n            } else\
    \ {\n                result += \"_\"\n            }\n            prev_space =\
    \ true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp1kq908g5_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp1kq908g5_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp1kq908g5_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count == 1 {\n              \
    \  result += \"_\"\n            } else if space_count == 2 {\n               \
    \ result += \"-\"\n            }\n        } else {\n            space_count =\
    \ 0\n            result += string(c)\n        }\n    }\n    return result\n}\n\
    \nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpfxmc4iey_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpfxmc4iey_test.go:47: expected 'Exa-mple', got 'Exa_-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpfxmc4iey_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var space_count int\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            space_count++\n            if\
    \ space_count > 2 {\n                result += \"-\"\n                space_count\
    \ = 0\n            }\n        } else {\n            if space_count > 0 {\n   \
    \             result += \"_\"\n                space_count = 0\n            }\n\
    \            result += string(text[i])\n        }\n        prev_char = text[i]\n\
    \    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpput7n3ao_test.go:13:9: prev_char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count == 1 {\n              \
    \  result += \"_\"\n            } else if space_count == 2 {\n               \
    \ result += \"-\"\n            }\n        } else {\n            space_count =\
    \ 0\n            result += string(c)\n        }\n    }\n    return result\n}\n\
    \nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpfxmc4iey_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpfxmc4iey_test.go:47: expected 'Exa-mple', got 'Exa_-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpfxmc4iey_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count > 2 {\n               \
    \ result += \"-\"\n                space_count = 0\n            }\n        } else\
    \ {\n            if space_count > 0 {\n                result += \"_\"\n     \
    \           space_count = 0\n            }\n            result += string(c)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmpf00md_ia_test.go:49: expected 'Mudasir_Hanif_', got 'Mudasir_Hanif'\n\
    \    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmpf00md_ia_test.go:49:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow_Yellow_Dirty_Fellow'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var last_char byte\n    var space_count int\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            space_count++\n            if\
    \ space_count > 2 {\n                continue\n            }\n        } else {\n\
    \            space_count = 0\n        }\n        if text[i] == ' ' && last_char\
    \ == ' ' {\n            result += \"-\"\n        } else {\n            result\
    \ += string(text[i])\n        }\n        last_char = text[i]\n    }\n    return\
    \ result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmpfmbyqrwu_test.go:51: expected 'Mudasir_Hanif_', got 'Mudasir\
    \ Hanif '\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmpfmbyqrwu_test.go:51:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow Yellow -Dirty -Fellow'\n\
    \    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpfmbyqrwu_test.go:51:\
    \ expected 'Exa-mple', got 'Exa -mple'\n    --- FAIL: TestFix_Spaces/test_num__4\
    \ (0.00s)\n        tmpfmbyqrwu_test.go:51: expected '-Exa_1_2_2_mple', got ' -Exa\
    \ 1 2 2 mple'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var space_count int\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            space_count++\n            if\
    \ space_count > 2 {\n                if prev_char != '-' {\n                 \
    \   result += \"-\"\n                }\n            } else {\n               \
    \ result += \"_\"\n            }\n        } else {\n            result += string(text[i])\n\
    \            space_count = 0\n        }\n        prev_char = text[i]\n    }\n\
    \    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpca77x_z2_test.go:51: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpca77x_z2_test.go:51:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074899
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if !prev_space {\n                space_count\
    \ = 1\n                prev_space = true\n            } else {\n             \
    \   space_count++\n            }\n            if space_count > 2 {\n         \
    \       result += \"-\"\n            } else {\n                result += \"_\"\
    \n            }\n        } else {\n            result += string(c)\n         \
    \   prev_space = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp7qyxv0xm_test.go:53: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp7qyxv0xm_test.go:53:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var curr_char byte\n    var count int\n    for i\
    \ := 0; i < len(text); i++ {\n        curr_char = text[i]\n        if curr_char\
    \ == ' ' {\n            count++\n            if count > 2 {\n                result\
    \ += \"-\"\n                count = 0\n            }\n        } else {\n     \
    \       if prev_char == ' ' {\n                result += \"_\"\n            }\n\
    \            result += string(curr_char)\n            count = 0\n        }\n \
    \       prev_char = curr_char\n    }\n    if prev_char == ' ' {\n        result\
    \ += \"_\"\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpwkq6z6e__test.go:56: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n\
    \        tmpwkq6z6e__test.go:56: expected 'Exa-mple', got 'Exa-_mple'\n    ---\
    \ FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpwkq6z6e__test.go:56: expected\
    \ '-Exa_1_2_2_mple', got '-_Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074899
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if prev_space {\n                space_count++\n\
    \            } else {\n                space_count = 1\n            }\n      \
    \      prev_space = true\n        } else {\n            if prev_space {\n    \
    \            if space_count > 2 {\n                    result += \"-\"\n     \
    \           } else {\n                    result += \"_\"\n                }\n\
    \            }\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    if prev_space {\n        if space_count > 2 {\n       \
    \     result += \"-\"\n        } else {\n            result += \"_\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp_l_1up2v_test.go:62: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count == 1 {\n              \
    \  result += \"_\"\n            } else if space_count == 2 {\n               \
    \ result += \"-\"\n            }\n        } else {\n            space_count =\
    \ 0\n            result += string(c)\n        }\n    }\n    return result\n}\n\
    \nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpfxmc4iey_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpfxmc4iey_test.go:47: expected 'Exa-mple', got 'Exa_-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpfxmc4iey_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var prev_prev_char byte\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if prev_char == ' ' && prev_prev_char\
    \ == ' ' {\n                result += \"-\"\n            } else {\n          \
    \      result += \"_\"\n            }\n        } else {\n            result +=\
    \ string(text[i])\n        }\n        prev_prev_char = prev_char\n        prev_char\
    \ = text[i]\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp2s36_6sb_test.go:48: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp2s36_6sb_test.go:48:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result []byte\n\
    \    var space_count int = 0\n    for i := 0; i < len(text); i++ {\n        if\
    \ text[i] == ' ' {\n            space_count++\n            if space_count > 2\
    \ {\n                result = append(result, '-')\n                space_count\
    \ = 0\n            }\n        } else {\n            if space_count > 0 {\n   \
    \             result = append(result, '_')\n                space_count = 0\n\
    \            }\n            result = append(result, text[i])\n        }\n    }\n\
    \    if space_count > 0 {\n        result = append(result, '_')\n    }\n    return\
    \ string(result)\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp8r37fwgq_test.go:52: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074899
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_char byte\n    var curr_char byte\n    var space_count int\n   \
    \ for i := 0; i < len(text); i++ {\n        curr_char = text[i]\n        if curr_char\
    \ == ' ' {\n            space_count++\n            if space_count == 1 {\n   \
    \             result += string(curr_char)\n            } else if space_count ==\
    \ 2 {\n                result += \"_\"\n            }\n        } else {\n    \
    \        if space_count > 2 {\n                result += \"-\"\n            }\n\
    \            space_count = 0\n            result += string(curr_char)\n      \
    \  }\n        prev_char = curr_char\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpte7wun7a_test.go:13:9: prev_char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074899
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var last_char byte\n    var last_last_char byte\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if last_char == ' ' {\n    \
    \            if last_last_char == ' ' {\n                    result += \"-\"\n\
    \                } else {\n                    result += \"_\"\n             \
    \   }\n            } else {\n                result += \"_\"\n            }\n\
    \        } else {\n            result += string(text[i])\n        }\n        last_last_char\
    \ = last_char\n        last_char = text[i]\n    }\n    return result\n}\n\nfunc\
    \ TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmphdbokzuc_test.go:52: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmphdbokzuc_test.go:52:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074899
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with -\nfunc fix_spaces(text string) string {\n    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T)\
    \ {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjveyvt0r_test.go:47: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjveyvt0r_test.go:47:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074894
