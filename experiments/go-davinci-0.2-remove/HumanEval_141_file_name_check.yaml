name: HumanEval_141_file_name_check
language: go_test.go
prompt: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Create a function which takes a string representing a file's name, and returns\n\
  // 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's\
  \ name is considered to be valid if and only if all the following conditions \n\
  // are met:\n// - There should not be more than three digits ('0'-'9') in the file's\
  \ name.\n// - The file's name contains exactly one dot '.'\n// - The substring before\
  \ the dot should not be empty, and it starts with a letter from \n// the latin alphapet\
  \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
  \ ['txt', 'exe', 'dll']\n// Examples:\nfunc file_name_check(file_name string) string\
  \ {\n"
tests: "func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\"\
  \ },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
  \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"K.dll\"\
  ), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
  \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n\
  \     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
  ?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"\
  ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected:\
  \ \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\"\
  \ },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n\
  \     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n    \
  \ { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
  \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
  \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"I563_No.exe\"\
  ), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"), expected:\
  \ \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected: \"Yes\"\
  \ },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n     {\
  \ actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual: candidate(\"\
  final..txt\"), expected: \"No\" },\n     { actual: candidate(\"final132\"), expected:\
  \ \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"), expected: \"No\" },\n\
  \     { actual: candidate(\".txt\"), expected: \"No\" },\n     { actual: candidate(\"\
  s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    // TODO: Implement this function\n    return \"\"\n}\n", "    //\
    \ TODO: implement this function\n    return \"\"\n}\n", "    var dot_count int\
    \ = 0\n    var digit_count int = 0\n    var dot_index int = -1\n    var extension\
    \ string = \"\"\n    var valid_extensions = []string{\"txt\", \"exe\", \"dll\"\
    }\n    var valid_extensions_map = make(map[string]bool)\n    for _, extension\
    \ := range valid_extensions {\n        valid_extensions_map[extension] = true\n\
    \    }\n    for i, char := range file_name {\n        if char == '.' {\n     \
    \       dot_count += 1\n            dot_index = i\n        } else if char >= '0'\
    \ && char <= '9' {\n            digit_count += 1\n        }\n    }\n    if dot_count\
    \ != 1 || digit_count > 3 {\n        return \"No\"\n    }\n    if dot_index ==\
    \ 0 || dot_index == len(file_name) - 1 {\n        return \"No\"\n    }\n    if\
    \ file_name[0] < 'a' || file_name[0] > 'z' {\n        if file_name[0] < 'A' ||\
    \ file_name[0] > 'Z' {\n            return \"No\"\n        }\n    }\n    extension\
    \ = file_name[dot_index + 1:]\n    if _, ok := valid_extensions_map[extension];\
    \ !ok {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n", "    // Write\
    \ your code here\n    return \"\"\n}\n", "    return \"Yes\"\n}\n", "    // Write\
    \ your code here\n    return \"\"\n}\n", "    // Write your code here\n    return\
    \ \"No\"\n}\n", "    // TODO: Implement the function\n    return \"\"\n}\n", " \
    \   // TODO: implement this function\n    return \"\"\n}\n", "    // Write your\
    \ code here\n    return \"\"\n}\n", "    // Write your code here\n    return \"\
    \"\n}\n", "    if len(file_name) < 5 {\n        return \"No\"\n    }\n    if file_name[0]\
    \ < 'a' || file_name[0] > 'z' {\n        return \"No\"\n    }\n    if file_name[len(file_name)-4:]\
    \ != \".txt\" && file_name[len(file_name)-4:] != \".exe\" && file_name[len(file_name)-4:]\
    \ != \".dll\" {\n        return \"No\"\n    }\n    if file_name[len(file_name)-5]\
    \ != '.' {\n        return \"No\"\n    }\n    for i := 1; i < len(file_name)-5;\
    \ i++ {\n        if file_name[i] < 'a' || file_name[i] > 'z' {\n            return\
    \ \"No\"\n        }\n    }\n    return \"Yes\"\n}\n", "    return \"Yes\"\n}\n",
  "    // Write your code here\n    return \"\"\n}\n", "    // TODO: implement this\
    \ function\n    return \"\"\n}\n", "    return \"Yes\"\n}\n", "    // TODO: Implement\
    \ this function\n    return \"\"\n}\n", "    // TODO: implement\n    return \"\
    \"\n}\n", "    // TODO: implement this function\n    return \"\"\n}\n", "    //\
    \ Write your code here\n    return \"\"\n}\n", "    // Write your code here\n\
    \    return \"\"\n}\n", "    // TODO: implement\n    return \"\"\n}\n", "    return\
    \ \"Yes\"\n}\n", "    return \"No\"\n}\n", "    // Write your code here\n    return\
    \ \"\"\n}\n", "    return \"\"\n}\n", "    if len(file_name) < 5 {\n        return\
    \ \"No\"\n    }\n    if file_name[0] < 'a' || file_name[0] > 'z' {\n        return\
    \ \"No\"\n    }\n    if file_name[len(file_name)-4:] != \".txt\" && file_name[len(file_name)-4:]\
    \ != \".exe\" && file_name[len(file_name)-4:] != \".dll\" {\n        return \"\
    No\"\n    }\n    if file_name[len(file_name)-5] != '.' {\n        return \"No\"\
    \n    }\n    for i := 1; i < len(file_name)-5; i++ {\n        if file_name[i]\
    \ < 'a' || file_name[i] > 'z' {\n            return \"No\"\n        }\n    }\n\
    \    return \"Yes\"\n}\n", "    // Write your code here\n    return \"\"\n}\n",
  "    // TODO: Implement the function\n    return \"\"\n}\n", "    if len(file_name)\
    \ < 5 {\n        return \"No\"\n    }\n    if file_name[0] < 'a' || file_name[0]\
    \ > 'z' {\n        return \"No\"\n    }\n    if file_name[len(file_name)-4:] !=\
    \ \".txt\" && file_name[len(file_name)-4:] != \".exe\" && file_name[len(file_name)-4:]\
    \ != \".dll\" {\n        return \"No\"\n    }\n    if file_name[len(file_name)-5]\
    \ != '.' {\n        return \"No\"\n    }\n    for i := 1; i < len(file_name)-5;\
    \ i++ {\n        if file_name[i] < 'a' || file_name[i] > 'z' {\n            return\
    \ \"No\"\n        }\n    }\n    return \"Yes\"\n}\n", "    // TODO: implement\
    \ this function\n    return \"\"\n}\n", "    // TODO: Implement the function here\n\
    \    return \"\"\n}\n", "    return \"Yes\"\n}\n", "    // TODO: Implement this\
    \ function\n    return \"\"\n}\n", "    // TODO: implement\n    return \"\"\n\
    }\n", "    // Write your code here\n    return \"\"\n}\n", "    // TODO: Implement\
    \ this function\n    return \"\"\n}\n", "    // Your code here\n    return \"\"\
    \n}\n", "    // TODO: Implement this function\n    return \"\"\n}\n", "    //\
    \ TODO: implement this function\n    return \"\"\n}\n", "    // TODO: Implement\
    \ this function\n    return \"\"\n}\n", "    return \"\"\n}\n", "    return \"\
    \"\n}\n", "    // Your code here\n    return \"\"\n}\n", "    // TODO: implement\
    \ this function\n    return \"\"\n}\n", "    return \"Yes\"\n}\n", "    // TODO:\
    \ Implement the function here\n    return \"\"\n}\n", "    // TODO: Implement\
    \ this function\n    return \"\"\n}\n", "    // TODO: Implement the function\n\
    \    return \"\"\n}\n", "    // TODO: implement this function\n    return \"\"\
    \n}\n", "    // TODO: implement this function\n    return \"\"\n}\n", "    //\
    \ Write your code here\n    return \"Yes\"\n}\n", "    // TODO: implement this\
    \ function\n    return \"\"\n}\n", "    // TODO: Implement the function\n    return\
    \ \"\"\n}\n", "    // Write your code here\n    return \"\"\n}\n", "    if len(file_name)\
    \ < 5 {\n        return \"No\"\n    }\n    if file_name[0] < 'a' || file_name[0]\
    \ > 'z' {\n        return \"No\"\n    }\n    if file_name[len(file_name)-4:] !=\
    \ \".txt\" && file_name[len(file_name)-4:] != \".exe\" && file_name[len(file_name)-4:]\
    \ != \".dll\" {\n        return \"No\"\n    }\n    if file_name[len(file_name)-5]\
    \ != '.' {\n        return \"No\"\n    }\n    for i := 1; i < len(file_name)-5;\
    \ i++ {\n        if file_name[i] < 'a' || file_name[i] > 'z' {\n            return\
    \ \"No\"\n        }\n    }\n    return \"Yes\"\n}\n", "    return \"\"\n}\n",
  "    // TODO: implement this function\n    return \"\"\n}\n", "    // TODO: implement\
    \ this function\n    return \"\"\n}\n", "    // Write your code here\n    return\
    \ \"\"\n}\n", "    if len(file_name) < 5 {\n        return \"No\"\n    }\n   \
    \ if file_name[0] < 'a' || file_name[0] > 'z' {\n        return \"No\"\n    }\n\
    \    if file_name[len(file_name)-4:] != \".txt\" && file_name[len(file_name)-4:]\
    \ != \".exe\" && file_name[len(file_name)-4:] != \".dll\" {\n        return \"\
    No\"\n    }\n    if file_name[len(file_name)-5] != '.' {\n        return \"No\"\
    \n    }\n    var count int = 0\n    for i := 0; i < len(file_name); i++ {\n  \
    \      if file_name[i] >= '0' && file_name[i] <= '9' {\n            count++\n\
    \        }\n    }\n    if count > 3 {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"\n}\n", "    // Your code here\n    return \"\"\n}\n", "    return \"\
    Yes\"\n}\n", "    // Write your code here\n    return \"\"\n}\n", "    return\
    \ \"\"\n}\n", "    return \"Yes\"\n}\n", "    // your code here\n    return \"\
    \"\n}\n", "    // Write your code here\n    return \"\"\n}\n", "    // TODO: Implement\
    \ this function\n    return \"\"\n}\n", "    // Write your code here\n    return\
    \ \"\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    // TODO: Implement\
    \ this function\n    return \"\"\n}\n", "    return \"\"\n}\n", "    if len(file_name)\
    \ < 5 {\n        return \"No\"\n    }\n    if file_name[0] < 'a' || file_name[0]\
    \ > 'z' {\n        return \"No\"\n    }\n    if file_name[len(file_name)-4] !=\
    \ '.' {\n        return \"No\"\n    }\n    if file_name[len(file_name)-3] != 't'\
    \ && file_name[len(file_name)-3] != 'e' && file_name[len(file_name)-3] != 'd'\
    \ {\n        return \"No\"\n    }\n    if file_name[len(file_name)-2] != 'x' &&\
    \ file_name[len(file_name)-2] != 'x' && file_name[len(file_name)-2] != 'l' {\n\
    \        return \"No\"\n    }\n    if file_name[len(file_name)-1] != 't' && file_name[len(file_name)-1]\
    \ != 'e' && file_name[len(file_name)-1] != 'l' {\n        return \"No\"\n    }\n\
    \    for i := 1; i < len(file_name)-4; i++ {\n        if file_name[i] < 'a' ||\
    \ file_name[i] > 'z' {\n            return \"No\"\n        }\n    }\n    return\
    \ \"Yes\"\n}\n", "    return \"\"\n}\n", "    return \"Yes\"\n}\n", "    // Your\
    \ code here\n    return \"\"\n}\n", "    return \"\"\n}\n", "    return \"\"\n\
    }\n", "    // Write your code here\n    return \"\"\n}\n", "    return \"\"\n\
    }\n", "    // TODO: implement this function\n    return \"\"\n}\n", "    return\
    \ \"Yes\"\n}\n", "    // Your code here\n    return \"\"\n}\n", "    if len(file_name)\
    \ < 5 {\n        return \"No\"\n    }\n    dot_pos := -1\n    for i, c := range\
    \ file_name {\n        if c == '.' {\n            dot_pos = i\n            break\n\
    \        }\n    }\n    if dot_pos == -1 {\n        return \"No\"\n    }\n    if\
    \ dot_pos == 0 || dot_pos == len(file_name) - 1 {\n        return \"No\"\n   \
    \ }\n    if file_name[dot_pos + 1:] != \"txt\" && file_name[dot_pos + 1:] != \"\
    exe\" && file_name[dot_pos + 1:] != \"dll\" {\n        return \"No\"\n    }\n\
    \    if file_name[0] < 'a' || file_name[0] > 'z' {\n        if file_name[0] <\
    \ 'A' || file_name[0] > 'Z' {\n            return \"No\"\n        }\n    }\n \
    \   digits := 0\n    for i := 0; i < dot_pos; i++ {\n        if file_name[i] >=\
    \ '0' && file_name[i] <= '9' {\n            digits++\n        }\n    }\n    if\
    \ digits > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n", "    if\
    \ len(file_name) < 5 {\n        return \"No\"\n    }\n    if file_name[0] < 'a'\
    \ || file_name[0] > 'z' {\n        return \"No\"\n    }\n    if file_name[len(file_name)-4:]\
    \ != \".txt\" && file_name[len(file_name)-4:] != \".exe\" && file_name[len(file_name)-4:]\
    \ != \".dll\" {\n        return \"No\"\n    }\n    if file_name[len(file_name)-5]\
    \ != '.' {\n        return \"No\"\n    }\n    for i := 1; i < len(file_name)-5;\
    \ i++ {\n        if file_name[i] < 'a' || file_name[i] > 'z' {\n            return\
    \ \"No\"\n        }\n    }\n    return \"Yes\"\n}\n", "    return \"\"\n}\n",
  "    // Write your code here\n    return \"\"\n}\n", "    // TODO\n    return \"\
    \"\n}\n", "    return \"Yes\"\n}\n", "    return \"\"\n}\n", "    if len(file_name)\
    \ < 5 {\n        return \"No\"\n    }\n    if file_name[0] < 'a' || file_name[0]\
    \ > 'z' {\n        return \"No\"\n    }\n    if file_name[len(file_name)-4:] !=\
    \ \".txt\" && file_name[len(file_name)-4:] != \".exe\" && file_name[len(file_name)-4:]\
    \ != \".dll\" {\n        return \"No\"\n    }\n    if file_name[len(file_name)-5]\
    \ != '.' {\n        return \"No\"\n    }\n    digits := 0\n    for i := 0; i <\
    \ len(file_name); i++ {\n        if file_name[i] >= '0' && file_name[i] <= '9'\
    \ {\n            digits++\n        }\n    }\n    if digits > 3 {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"\n}\n", "    if len(file_name) < 5 {\n    \
    \    return \"No\"\n    }\n    if file_name[0] < 'a' || file_name[0] > 'z' {\n\
    \        return \"No\"\n    }\n    if file_name[len(file_name)-4:] != \".txt\"\
    \ && file_name[len(file_name)-4:] != \".exe\" && file_name[len(file_name)-4:]\
    \ != \".dll\" {\n        return \"No\"\n    }\n    if file_name[len(file_name)-5]\
    \ != '.' {\n        return \"No\"\n    }\n    for i := 1; i < len(file_name)-5;\
    \ i++ {\n        if file_name[i] < 'a' || file_name[i] > 'z' {\n            return\
    \ \"No\"\n        }\n    }\n    return \"Yes\"\n}\n", "    return \"\"\n}\n",
  "    // TODO: Implement the function here\n    return \"\"\n}\n", "    // Your code\
    \ here\n    return \"\"\n}\n", "    return \"\"\n}\n", "    // Write your code\
    \ here\n    return \"\"\n}\n", "    // Write your code here\n    return \"\"\n\
    }\n", "    // Write your code here\n    return \"\"\n}\n", "    // TODO: Implement\
    \ the function here\n    return \"\"\n}\n", "    return \"\"\n}\n", "    // TODO:\
    \ Implement me\n    return \"\"\n}\n", "    // Write your code here\n    return\
    \ \"No\"\n}\n", "    // TODO: Implement this function\n    return \"\"\n}\n",
  "    // TODO: Implement this function\n    return \"\"\n}\n", "    // TODO: Implement\
    \ this function\n    return \"\"\n}\n", "    return \"\"\n}\n", "    // Your code\
    \ here\n    return \"\"\n}\n", "    // TODO: Implement this function\n    return\
    \ \"\"\n}\n", "    // TODO: implement this function\n    return \"\"\n}\n", " \
    \   // TODO: Implement this function\n    return \"\"\n}\n", "    // Your code\
    \ here\n    return \"\"\n}\n", "    // TODO: Implement this function\n    return\
    \ \"\"\n}\n", "    // TODO: implement\n    return \"\"\n}\n", "    // TODO: Implement\
    \ the function here.\n    return \"\"\n}\n", "    // TODO: implement this function\n\
    \    return \"\"\n}\n", "    // TODO: Implement the function here\n    return\
    \ \"\"\n}\n", "    // TODO: Implement this function\n    return \"\"\n}\n", " \
    \   // TODO: Implement this function\n    return \"\"\n}\n", "    // Your code\
    \ goes here\n    return \"\"\n}\n", "    // TODO: Implement this function\n  \
    \  return \"\"\n}\n", "    return \"\"\n}\n", "    // TODO: Implement this function\n\
    \    return \"\"\n}\n", "    return \"\"\n}\n", "    if len(file_name) < 5 {\n\
    \        return \"No\"\n    }\n    if file_name[0] < 'a' || file_name[0] > 'z'\
    \ {\n        return \"No\"\n    }\n    if file_name[len(file_name)-4:] != \".txt\"\
    \ && file_name[len(file_name)-4:] != \".exe\" && file_name[len(file_name)-4:]\
    \ != \".dll\" {\n        return \"No\"\n    }\n    if file_name[len(file_name)-5]\
    \ != '.' {\n        return \"No\"\n    }\n    for i := 1; i < len(file_name)-5;\
    \ i++ {\n        if file_name[i] < 'a' || file_name[i] > 'z' {\n            return\
    \ \"No\"\n        }\n    }\n    return \"Yes\"\n}\n", "    // TODO: implement\n\
    \    return \"\"\n}\n", "    // Write your code here\n    return \"\"\n}\n", " \
    \   // TODO: Implement this function\n    return \"\"\n}\n", "    // TODO: Implement\
    \ me\n    return \"\"\n}\n", "    // TODO\n    return \"\"\n}\n", "    // TODO:\
    \ implement this function\n    return \"\"\n}\n", "    return \"\"\n}\n", "  \
    \  // TODO: implement this function\n    return \"\"\n}\n", "    // Your code\
    \ goes here\n    return \"\"\n}\n", "    // Your code here\n    return \"\"\n\
    }\n", "    if len(file_name) < 5 {\n        return \"No\"\n    }\n    if file_name[0]\
    \ < 'a' || file_name[0] > 'z' {\n        return \"No\"\n    }\n    if file_name[len(file_name)-4:]\
    \ != \".txt\" && file_name[len(file_name)-4:] != \".exe\" && file_name[len(file_name)-4:]\
    \ != \".dll\" {\n        return \"No\"\n    }\n    if file_name[len(file_name)-5]\
    \ != '.' {\n        return \"No\"\n    }\n    for i := 1; i < len(file_name)-5;\
    \ i++ {\n        if file_name[i] >= '0' && file_name[i] <= '9' {\n           \
    \ return \"No\"\n        }\n    }\n    return \"Yes\"\n}\n", "    var result string\
    \ = \"No\"\n    var dot_count int = 0\n    var digit_count int = 0\n    var dot_index\
    \ int = 0\n    var extension string = \"\"\n    var valid_extensions []string\
    \ = []string{\"txt\", \"exe\", \"dll\"}\n    var valid_extensions_map map[string]bool\
    \ = make(map[string]bool)\n    for _, extension := range valid_extensions {\n\
    \        valid_extensions_map[extension] = true\n    }\n    for i, char := range\
    \ file_name {\n        if char == '.' {\n            dot_count += 1\n        \
    \    dot_index = i\n        }\n        if char >= '0' && char <= '9' {\n     \
    \       digit_count += 1\n        }\n    }\n    if dot_count == 1 && digit_count\
    \ <= 3 {\n        extension = file_name[dot_index+1:]\n        if valid_extensions_map[extension]\
    \ {\n            result = \"Yes\"\n        }\n    }\n    return result\n}\n",
  "    if len(file_name) < 5 {\n        return \"No\"\n    }\n    if file_name[0]\
    \ < 'a' || file_name[0] > 'z' {\n        return \"No\"\n    }\n    if file_name[len(file_name)-4:]\
    \ != \".txt\" && file_name[len(file_name)-4:] != \".exe\" && file_name[len(file_name)-4:]\
    \ != \".dll\" {\n        return \"No\"\n    }\n    if file_name[len(file_name)-5]\
    \ != '.' {\n        return \"No\"\n    }\n    for i := 1; i < len(file_name)-5;\
    \ i++ {\n        if file_name[i] >= '0' && file_name[i] <= '9' {\n           \
    \ return \"No\"\n        }\n    }\n    return \"Yes\"\n}\n", "    // Write your\
    \ code here\n    return \"\"\n}\n", "    // Write your code here\n    return \"\
    \"\n}\n", "    // TODO: Implement\n    return \"\"\n}\n", "    // TODO: implement\
    \ this function\n    return \"\"\n}\n", "    return \"\"\n}\n", "    // TODO:\
    \ implement\n    return \"\"\n}\n", "    // TODO: implement this function\n  \
    \  return \"\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    // Write\
    \ your code here\n    return \"\"\n}\n", "    // Write your code here\n    return\
    \ \"\"\n}\n", "    // TODO: implement this function\n    return \"\"\n}\n", " \
    \   // Your code here\n    return \"\"\n}\n", "    // TODO: Implement this function\n\
    \    return \"\"\n}\n", "    if len(file_name) < 4 {\n        return \"No\"\n\
    \    }\n    if file_name[0] < 'a' || file_name[0] > 'z' {\n        return \"No\"\
    \n    }\n    if file_name[len(file_name)-4] != '.' {\n        return \"No\"\n\
    \    }\n    if file_name[len(file_name)-3] != 't' && file_name[len(file_name)-3]\
    \ != 'e' && file_name[len(file_name)-3] != 'd' {\n        return \"No\"\n    }\n\
    \    if file_name[len(file_name)-2] != 'x' && file_name[len(file_name)-2] != 'x'\
    \ && file_name[len(file_name)-2] != 'l' {\n        return \"No\"\n    }\n    if\
    \ file_name[len(file_name)-1] != 't' && file_name[len(file_name)-1] != 'e' &&\
    \ file_name[len(file_name)-1] != 'l' {\n        return \"No\"\n    }\n    for\
    \ i := 1; i < len(file_name)-4; i++ {\n        if file_name[i] < 'a' || file_name[i]\
    \ > 'z' {\n            return \"No\"\n        }\n    }\n    return \"Yes\"\n}\n",
  "    // your code here\n    return \"\"\n}\n", "    // Write your code here\n  \
    \  return \"\"\n}\n", "    // TODO: Implement this function\n    return \"\"\n\
    }\n", "    var result string\n    var count int\n    var dot_count int\n    var\
    \ ext string\n    var ext_count int\n    var ext_list = [3]string{\"txt\", \"\
    exe\", \"dll\"}\n    var ext_valid bool\n    var ext_valid_count int\n    var\
    \ ext_valid_list = [3]bool{false, false, false}\n    var ext_valid_list_count\
    \ int\n    var ext_valid_list_count_max int\n    var ext_valid_list_count_max_index\
    \ int\n    var ext_valid_list_count_max_index_valid bool\n    var ext_valid_list_count_max_index_valid_count\
    \ int\n    var ext_valid_list_count_max_index_valid_count_max int\n    var ext_valid_list_count_max_index_valid_count_max_index\
    \ int\n    var ext_valid_list_count_max_index_valid_count_max_index_valid bool\n\
    \    var ext_valid_list_count_max_index_valid_count_max_index_valid_count int\n\
    \    var ext_valid_list_count_max_index_valid_count_max_index_valid_count_max\
    \ int\n    var ext_valid_list_count_max_index_valid_count_max_index_valid_count_max_index\
    \ int\n    var ext_valid_list_count_max_index_valid_count_max_index_valid_count_max_index_valid\
    \ bool\n    var ext_valid_list_count_max_index_valid_count_max_index_valid_count_max_index_valid_count\
    \ int\n    var ext_valid_list_count_max_index_valid_count_max_index_valid_count_max_index_valid_count_max\
    \ int\n    var ext_valid_list_count_max_index_valid_count_max_index_valid_count_max_index_valid_count_max_index\
    \ int\n    var ext_valid_list_count_max_index_valid_count_max_index_valid_count_max_index_valid_count_max_index_valid\
    \ bool\n    var ext_valid_list_count_", "    return \"\"\n}\n", "    return \"\
    \"\n}\n", "    // Write your code here\n    return \"\"\n}\n", "    if len(file_name)\
    \ < 5 {\n        return \"No\"\n    }\n    if file_name[0] < 'a' || file_name[0]\
    \ > 'z' {\n        return \"No\"\n    }\n    if file_name[len(file_name)-4:] !=\
    \ \".txt\" && file_name[len(file_name)-4:] != \".exe\" && file_name[len(file_name)-4:]\
    \ != \".dll\" {\n        return \"No\"\n    }\n    if file_name[len(file_name)-5]\
    \ != '.' {\n        return \"No\"\n    }\n    for i := 1; i < len(file_name)-5;\
    \ i++ {\n        if file_name[i] < 'a' || file_name[i] > 'z' {\n            return\
    \ \"No\"\n        }\n    }\n    return \"Yes\"\n}\n", "    return \"\"\n}\n",
  "    // TODO: Implement this function\n    return \"\"\n}\n", "    // Your code\
    \ goes here\n    return \"\"\n}\n", "    // TODO: Implement this function\n  \
    \  return \"\"\n}\n", "    // Write your code here\n    return \"Yes\"\n}\n",
  "    // TODO: implement this function\n    return \"\"\n}\n", "    // TODO: Implement\
    \ the function here\n    return \"\"\n}\n", "    // TODO: Implement this function\n\
    \    return \"\"\n}\n", "    // TODO: Implement this function\n    return \"\"\
    \n}\n", "    // TODO: Implement this function\n    return \"\"\n}\n", "    //\
    \ TODO: implement this function\n    return \"\"\n}\n", "    // TODO: Implement\
    \ this function\n    return \"\"\n}\n", "    // your code here\n    return \"\"\
    \n}\n", "    return \"Yes\"\n}\n", "    // check if there are more than 3 digits\n\
    \    if len(regexp.MustCompile(`[0-9]{4,}`).FindAllString(file_name, -1)) > 0\
    \ {\n        return \"No\"\n    }\n    // check if there is exactly one dot\n\
    \    if len(regexp.MustCompile(`\\.`).FindAllString(file_name, -1)) != 1 {\n \
    \       return \"No\"\n    }\n    // check if the substring before the dot is\
    \ not empty, and starts with a letter\n    if len(regexp.MustCompile(`^[a-zA-Z]`).FindAllString(file_name,\
    \ -1)) != 1 {\n        return \"No\"\n    }\n    // check if the substring after\
    \ the dot is one of the allowed extensions\n    if len(regexp.MustCompile(`(?<=\\\
    .)(txt|exe|dll)$`).FindAllString(file_name, -1)) != 1 {\n        return \"No\"\
    \n    }\n    return \"Yes\"\n}\n", "    // TODO: Implement this function\n   \
    \ return \"\"\n}\n", "    // TODO: Implement this function.\n    return \"\"\n\
    }\n", "    // Write your code here\n    return \"\"\n}\n", "    // TODO: Implement\
    \ this function\n    return \"\"\n}\n", "    // Write your code here\n    return\
    \ \"\"\n}\n", "    // TODO: Implement this function\n    return \"\"\n}\n", " \
    \   return \"Yes\"\n}\n", "    // TODO: Implement the function here\n    return\
    \ \"\"\n}\n", "    // TODO: Implement the function\n    return \"\"\n}\n", " \
    \   if len(file_name) < 5 {\n        return \"No\"\n    }\n    if file_name[0]\
    \ < 'a' || file_name[0] > 'z' {\n        return \"No\"\n    }\n    if file_name[len(file_name)-4:]\
    \ != \".txt\" && file_name[len(file_name)-4:] != \".exe\" && file_name[len(file_name)-4:]\
    \ != \".dll\" {\n        return \"No\"\n    }\n    if file_name[len(file_name)-5]\
    \ != '.' {\n        return \"No\"\n    }\n    for i := 1; i < len(file_name)-5;\
    \ i++ {\n        if file_name[i] < 'a' || file_name[i] > 'z' {\n            return\
    \ \"No\"\n        }\n    }\n    return \"Yes\"\n}\n", "    // TODO: Implement\n\
    \    return \"\"\n}\n", "    // Your code here\n    return \"\"\n}\n", "    //\
    \ TODO: implement this function.\n    return \"\"\n}\n", "    // TODO: Implement\
    \ this function\n    return \"\"\n}\n", "    // TODO: Implement this function\n\
    \    return \"\"\n}\n", "    return \"\"\n}\n", "    if len(file_name) < 5 {\n\
    \        return \"No\"\n    }\n    if file_name[0] < 'a' || file_name[0] > 'z'\
    \ {\n        return \"No\"\n    }\n    if file_name[len(file_name)-4:] != \".txt\"\
    \ && file_name[len(file_name)-4:] != \".exe\" && file_name[len(file_name)-4:]\
    \ != \".dll\" {\n        return \"No\"\n    }\n    if file_name[len(file_name)-5]\
    \ != '.' {\n        return \"No\"\n    }\n    for i := 1; i < len(file_name)-5;\
    \ i++ {\n        if file_name[i] < 'a' || file_name[i] > 'z' {\n            return\
    \ \"No\"\n        }\n    }\n    return \"Yes\"\n}\n", "    return \"\"\n}\n",
  "    if len(file_name) < 5 {\n        return \"No\"\n    }\n    dot_index := -1\n\
    \    for i := 0; i < len(file_name); i++ {\n        if file_name[i] == '.' {\n\
    \            dot_index = i\n            break\n        }\n    }\n    if dot_index\
    \ == -1 {\n        return \"No\"\n    }\n    if dot_index == 0 || dot_index ==\
    \ len(file_name) - 1 {\n        return \"No\"\n    }\n    if file_name[dot_index\
    \ + 1] != 't' || file_name[dot_index + 2] != 'x' || file_name[dot_index + 3] !=\
    \ 't' {\n        return \"No\"\n    }\n    if file_name[0] < 'a' || file_name[0]\
    \ > 'z' {\n        return \"No\"\n    }\n    for i := 1; i < dot_index; i++ {\n\
    \        if file_name[i] < '0' || file_name[i] > '9' {\n            return \"\
    No\"\n        }\n    }\n    return \"Yes\"\n}\n", "    if len(file_name) < 5 {\n\
    \        return \"No\"\n    }\n    if file_name[0] < 'a' || file_name[0] > 'z'\
    \ {\n        return \"No\"\n    }\n    if file_name[len(file_name)-4:] != \".txt\"\
    \ && file_name[len(file_name)-4:] != \".exe\" && file_name[len(file_name)-4:]\
    \ != \".dll\" {\n        return \"No\"\n    }\n    if file_name[len(file_name)-5]\
    \ != '.' {\n        return \"No\"\n    }\n    for i := 1; i < len(file_name)-5;\
    \ i++ {\n        if file_name[i] < 'a' || file_name[i] > 'z' {\n            return\
    \ \"No\"\n        }\n    }\n    return \"Yes\"\n}\n", "    // TODO: Implement\
    \ the function\n    return \"\"\n}\n", "    // TODO: Implement this function\n\
    \    return \"\"\n}\n", "    // Write your code here\n    return \"\"\n}\n", " \
    \   // TODO: Implement this function\n    return \"\"\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
