name: HumanEval_91_is_bored
language: go_test.go
prompt: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ You'll be given a string of words, and your task is to count the number\n// of\
  \ boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
  \ are delimited by '.', '?' or '!'.\n// For example:\nfunc is_bored(S string) int\
  \ {\n"
tests: "func TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
  Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"),\
  \ expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
  \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
  \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
  \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
  \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var boredoms int\n    var words []string\n    var word string\n\
    \    var sentence string\n    var sentences []string\n    var i int\n\n    //\
    \ split the string into sentences\n    for i = 0; i < len(S); i++ {\n        if\
    \ S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            sentence = S[:i]\n\
    \            sentences = append(sentences, sentence)\n            S = S[i+1:]\n\
    \            i = 0\n        }\n    }\n\n    // split the sentences into words\n\
    \    for i = 0; i < len(sentences); i++ {\n        sentence = sentences[i]\n \
    \       for j := 0; j < len(sentence); j++ {\n            if sentence[j] == '\
    \ ' {\n                words = append(words, word)\n                word = \"\"\
    \n            } else {\n                word += string(sentence[j])\n        \
    \    }\n        }\n        words = append(words, word)\n        word = \"\"\n\n\
    \        // check if the first word is \"I\"\n        if words[0] == \"I\" {\n\
    \            boredoms++\n        }\n        words = nil\n    }\n\n    return boredoms\n\
    }\n", "    var boredoms int\n    var word string\n    for _, c := range S {\n\
    \        if c == '.' || c == '?' || c == '!' {\n            if word == \"I\" {\n\
    \                boredoms++\n            }\n            word = \"\"\n        }\
    \ else {\n            word += string(c)\n        }\n    }\n    return boredoms\n\
    }\n", "    return 0\n}\n", "    var boredoms int\n    for _, word := range S {\n\
    \        if word == 'I' {\n            boredoms++\n        }\n    }\n    return\
    \ boredoms\n}\n", "    var count int\n    for _, v := range S {\n        if v\
    \ == 'I' {\n            count++\n        }\n    }\n    return count\n}\n", " \
    \   var boredoms int\n    for _, word := range S {\n        if word == 'I' {\n\
    \            boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var\
    \ boredoms int\n    for _, word := range S {\n        if word == 'I' {\n     \
    \       boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var count\
    \ int = 0\n    var words []string = strings.Split(S, \" \")\n    for _, word :=\
    \ range words {\n        if word == \"I\" {\n            count++\n        }\n\
    \    }\n    return count\n}\n", "    var count int\n    for _, v := range S {\n\
    \        if v == 'I' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    return 0\n}\n", "    var boredoms int\n    for _, c := range S {\n\
    \        if c == 'I' {\n            boredoms++\n        }\n    }\n    return boredoms\n\
    }\n", "    var boredoms int = 0\n    var i int = 0\n    var j int = 0\n    for\
    \ i < len(S) {\n        if S[i] == 'I' {\n            j = i + 1\n            for\
    \ j < len(S) && S[j] != '.' && S[j] != '?' && S[j] != '!' {\n                j++\n\
    \            }\n            if j < len(S) && S[j] == '.' {\n                boredoms++\n\
    \            }\n        }\n        i++\n    }\n    return boredoms\n}\n", "  \
    \  var boredoms int\n    var sentence string\n    for _, char := range S {\n \
    \       sentence += string(char)\n        if char == '.' || char == '?' || char\
    \ == '!' {\n            if sentence[0:2] == \"I \" {\n                boredoms++\n\
    \            }\n            sentence = \"\"\n        }\n    }\n    return boredoms\n\
    }\n", "    return 0\n}\n", "    var boredoms int = 0\n    var words []string =\
    \ strings.Split(S, \" \")\n    for _, word := range words {\n        if word ==\
    \ \"I\" {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n",
  "    var boredoms int\n    for _, word := range S {\n        if word == 'I' {\n\
    \            boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var\
    \ boredoms int\n    for _, word := range S {\n        if word == 'I' {\n     \
    \       boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var boredoms\
    \ int = 0\n    var sentence string = \"\"\n    var i int = 0\n    for i < len(S)\
    \ {\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            if sentence[0]\
    \ == 'I' {\n                boredoms++\n            }\n            sentence =\
    \ \"\"\n        } else {\n            sentence += string(S[i])\n        }\n  \
    \      i++\n    }\n    return boredoms\n}\n", "    var boredoms int = 0\n    var\
    \ i int = 0\n    var j int = 0\n    var sentence string\n    var word string\n\
    \    for i < len(S) {\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n\
    \            sentence = S[j:i]\n            j = i + 1\n            word = sentence[0:2]\n\
    \            if word == \"I \" {\n                boredoms++\n            }\n\
    \        }\n        i++\n    }\n    return boredoms\n}\n", "    var boredoms int\n\
    \    for _, word := range S {\n        if word == 'I' {\n            boredoms++\n\
    \        }\n    }\n    return boredoms\n}\n", "    var boredoms int\n    var sentence\
    \ string\n    for _, c := range S {\n        sentence += string(c)\n        if\
    \ c == '.' || c == '?' || c == '!' {\n            if sentence[0] == 'I' {\n  \
    \              boredoms++\n            }\n            sentence = \"\"\n      \
    \  }\n    }\n    return boredoms\n}\n", "    var boredoms int\n    var word string\n\
    \    for _, c := range S {\n        if c == '.' || c == '?' || c == '!' {\n  \
    \          if word == \"I\" {\n                boredoms++\n            }\n   \
    \         word = \"\"\n        } else {\n            word += string(c)\n     \
    \   }\n    }\n    return boredoms\n}\n", "    var count int\n    for _, s := range\
    \ S {\n        if s == 'I' {\n            count++\n        }\n    }\n    return\
    \ count\n}\n", "    var count int\n    for _, word := range S {\n        if word\
    \ == 'I' {\n            count++\n        }\n    }\n    return count\n}\n", " \
    \   var boredoms int\n    for _, word := range S {\n        if word == 'I' {\n\
    \            boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var\
    \ count int = 0\n    for _, word := range S {\n        if word == 'I' {\n    \
    \        count++\n        }\n    }\n    return count\n}\n", "    return 0\n}\n",
  "    var boredoms int\n    for _, word := range S {\n        if word == 'I' {\n\
    \            boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var\
    \ count int\n    for _, word := range S {\n        if word == 'I' {\n        \
    \    count++\n        }\n    }\n    return count\n}\n", "    var boredoms int\n\
    \    for _, word := range S {\n        if word == 'I' {\n            boredoms++\n\
    \        }\n    }\n    return boredoms\n}\n", "    var count int\n    for _, v\
    \ := range S {\n        if v == 'I' {\n            count++\n        }\n    }\n\
    \    return count\n}\n", "    var boredoms int\n    var sentence string\n    for\
    \ _, c := range S {\n        sentence += string(c)\n        if c == '.' || c ==\
    \ '?' || c == '!' {\n            if sentence[0] == 'I' {\n                boredoms++\n\
    \            }\n            sentence = \"\"\n        }\n    }\n    return boredoms\n\
    }\n", "    var boredoms int\n    var is_bored bool\n    for _, c := range S {\n\
    \        if c == 'I' {\n            is_bored = true\n        } else if is_bored\
    \ {\n            if c == '.' || c == '?' || c == '!' {\n                boredoms++\n\
    \                is_bored = false\n            }\n        }\n    }\n    return\
    \ boredoms\n}\n", "    return 0\n}\n", "    return 0\n}\n", "    var boredoms\
    \ int = 0\n    var sentence string = \"\"\n    for _, c := range S {\n       \
    \ if c == '.' || c == '?' || c == '!' {\n            if sentence[0] == 'I' {\n\
    \                boredoms += 1\n            }\n            sentence = \"\"\n \
    \       } else {\n            sentence += string(c)\n        }\n    }\n    return\
    \ boredoms\n}\n", "    var boredoms int\n    for _, word := range S {\n      \
    \  if word == 'I' {\n            boredoms++\n        }\n    }\n    return boredoms\n\
    }\n", "    var boredoms int\n    for _, word := range S {\n        if word ==\
    \ 'I' {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n",
  "    var boredoms int\n    var sentence string\n    for _, c := range S {\n    \
    \    sentence += string(c)\n        if c == '.' || c == '?' || c == '!' {\n  \
    \          if sentence[0] == 'I' {\n                boredoms++\n            }\n\
    \            sentence = \"\"\n        }\n    }\n    return boredoms\n}\n", " \
    \   var count int\n    for _, c := range S {\n        if c == 'I' {\n        \
    \    count++\n        }\n    }\n    return count\n}\n", "    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n", "  \
    \  var boredoms int = 0\n    var i int = 0\n    var word string = \"\"\n    var\
    \ sentence string = \"\"\n    var is_sentence bool = false\n    var is_word bool\
    \ = false\n    for i < len(S) {\n        if S[i] == ' ' || S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!' {\n            if is_word {\n                sentence\
    \ += word\n                word = \"\"\n                is_word = false\n    \
    \        }\n            if is_sentence {\n                if sentence[0] == 'I'\
    \ {\n                    boredoms++\n                }\n                sentence\
    \ = \"\"\n                is_sentence = false\n            }\n        } else {\n\
    \            if !is_word {\n                word = string(S[i])\n            \
    \    is_word = true\n            } else {\n                word += string(S[i])\n\
    \            }\n            is_sentence = true\n        }\n        i++\n    }\n\
    \    if is_word {\n        sentence += word\n        word = \"\"\n        is_word\
    \ = false\n    }\n    if is_sentence {\n        if sentence[0] == 'I' {\n    \
    \        boredoms++\n        }\n        sentence = \"\"\n        is_sentence =\
    \ false\n    }\n    return boredoms\n}\n", "    var boredoms int = 0\n    var\
    \ word string\n    for _, c := range S {\n        if c == '.' || c == '?' || c\
    \ == '!' {\n            if word == \"I\" {\n                boredoms++\n     \
    \       }\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    return boredoms\n}\n", "    var boredoms int = 0\n    var\
    \ words []string = strings.Split(S, \" \")\n    for _, word := range words {\n\
    \        if word == \"I\" {\n            boredoms++\n        }\n    }\n    return\
    \ boredoms\n}\n", "    var boredoms int = 0\n    var i int = 0\n    var j int\
    \ = 0\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n          \
    \  for j = i; j < len(S); j++ {\n                if S[j] == '.' || S[j] == '?'\
    \ || S[j] == '!' {\n                    boredoms++\n                    i = j\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    return boredoms\n}\n", "    var boredoms int\n    for _, word := range S\
    \ {\n        if word == 'I' {\n            boredoms++\n        }\n    }\n    return\
    \ boredoms\n}\n", "    return 0\n}\n", "    var boredoms int\n    for _, word\
    \ := range S {\n        if word == 'I' {\n            boredoms++\n        }\n\
    \    }\n    return boredoms\n}\n", "    var boredoms int\n    for _, word := range\
    \ S {\n        if word == 'I' {\n            boredoms++\n        }\n    }\n  \
    \  return boredoms\n}\n", "    var boredoms int\n    for _, word := range S {\n\
    \        if word == 'I' {\n            boredoms++\n        }\n    }\n    return\
    \ boredoms\n}\n", "    var boredoms int\n    for _, word := range S {\n      \
    \  if word == 'I' {\n            boredoms++\n        }\n    }\n    return boredoms\n\
    }\n", "    var count int = 0\n    var i int = 0\n    var j int = 0\n    var k\
    \ int = 0\n    var l int = 0\n    var m int = 0\n    var n int = 0\n    var o\
    \ int = 0\n    var p int = 0\n    var q int = 0\n    var r int = 0\n    var s\
    \ int = 0\n    var t int = 0\n    var u int = 0\n    var v int = 0\n    var w\
    \ int = 0\n    var x int = 0\n    var y int = 0\n    var z int = 0\n    var a\
    \ int = 0\n    var b int = 0\n    var c int = 0\n    var d int = 0\n    var e\
    \ int = 0\n    var f int = 0\n    var g int = 0\n    var h int = 0\n    var ii\
    \ int = 0\n    var jj int = 0\n    var kk int = 0\n    var ll int = 0\n    var\
    \ mm int = 0\n    var nn int = 0\n    var oo int = 0\n    var pp int = 0\n   \
    \ var qq int = 0\n    var rr int = 0\n    var ss int = 0\n    var tt int = 0\n\
    \    var uu int = 0\n    var vv int = 0\n    var ww int = 0\n    var xx int =\
    \ 0\n    var yy int = 0\n    var zz int = 0\n    var aa int = 0\n    var bb int\
    \ = 0\n    var cc int = 0\n    var dd int = 0\n    var ee int = 0\n    var ff\
    \ int = 0\n    var gg int = 0\n    var hh int = 0\n    var iii int = 0\n    var\
    \ jjj int = 0\n    var kkk int = 0\n    var lll int = 0\n    var mmm int = 0\n\
    \    var nnn int = 0\n    var ooo int = 0\n    var ppp int = 0\n    var qqq int\
    \ = 0\n    var rrr int = 0\n    var sss int = 0\n    var ttt int = 0\n    var\
    \ uuu int = 0\n    var vvv int = 0\n    var www int = 0\n    var xxx int", " \
    \   var boredoms int = 0\n    for _, v := range S {\n        if v == 'I' {\n \
    \           boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var\
    \ boredoms int\n    for _, word := range S {\n        if word == 'I' {\n     \
    \       boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var boredoms\
    \ int = 0\n    var sentence string = \"\"\n    for _, char := range S {\n    \
    \    if char == '.' || char == '?' || char == '!' {\n            if sentence[0]\
    \ == 'I' {\n                boredoms++\n            }\n            sentence =\
    \ \"\"\n        } else {\n            sentence += string(char)\n        }\n  \
    \  }\n    return boredoms\n}\n", "    return 0\n}\n", "    var boredoms int\n\
    \    for _, word := range S {\n        if word == 'I' {\n            boredoms++\n\
    \        }\n    }\n    return boredoms\n}\n", "    return 0\n}\n", "    var boredoms\
    \ int\n    for _, word := range S {\n        if word == 'I' {\n            boredoms++\n\
    \        }\n    }\n    return boredoms\n}\n", "    return 0\n}\n", "    var boredoms\
    \ int\n    for _, word := range S {\n        if word == 'I' {\n            boredoms++\n\
    \        }\n    }\n    return boredoms\n}\n", "    var count int\n    for _, v\
    \ := range S {\n        if v == 'I' {\n            count++\n        }\n    }\n\
    \    return count\n}\n", "    var boredoms int\n    for _, word := range S {\n\
    \        if word == 'I' {\n            boredoms++\n        }\n    }\n    return\
    \ boredoms\n}\n", "    var boredoms int = 0\n    var is_bored bool = false\n \
    \   for _, c := range S {\n        if c == '.' || c == '?' || c == '!' {\n   \
    \         is_bored = false\n        } else if c == 'I' {\n            is_bored\
    \ = true\n        } else if is_bored {\n            boredoms++\n        }\n  \
    \  }\n    return boredoms\n}\n", "    var boredoms int\n    for _, word := range\
    \ S {\n        if word == 'I' {\n            boredoms++\n        }\n    }\n  \
    \  return boredoms\n}\n", "    var count int\n    for _, word := range S {\n \
    \       if word == 'I' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    var boredoms int\n    var i int\n    for i = 0; i < len(S); i++ {\n\
    \        if S[i] == 'I' {\n            boredoms++\n            for S[i] != '.'\
    \ && S[i] != '?' && S[i] != '!' {\n                i++\n            }\n      \
    \  }\n    }\n    return boredoms\n}\n", "    return 0\n}\n", "    return 0\n}\n",
  "    var boredoms int\n    for _, word := range S {\n        if word == 'I' {\n\
    \            boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var\
    \ boredoms int = 0\n    var sentences []string = split_sentences(S)\n    for _,\
    \ sentence := range sentences {\n        if is_bored_sentence(sentence) {\n  \
    \          boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var boredoms\
    \ int\n    for _, word := range S {\n        if word == 'I' {\n            boredoms++\n\
    \        }\n    }\n    return boredoms\n}\n", "    var boredoms int = 0\n    var\
    \ i int = 0\n    for i < len(S) {\n        if S[i] == 'I' {\n            boredoms++\n\
    \            for i < len(S) && S[i] != '.' && S[i] != '?' && S[i] != '!' {\n \
    \               i++\n            }\n        }\n        i++\n    }\n    return\
    \ boredoms\n}\n", "    var boredoms int\n    var word string\n    for _, c :=\
    \ range S {\n        if c == '.' || c == '?' || c == '!' {\n            if word\
    \ == \"I\" {\n                boredoms++\n            }\n            word = \"\
    \"\n        } else {\n            word += string(c)\n        }\n    }\n    return\
    \ boredoms\n}\n", "    var boredoms int\n    for _, word := range S {\n      \
    \  if word == 'I' {\n            boredoms++\n        }\n    }\n    return boredoms\n\
    }\n", "    var count int = 0\n    var words []string = strings.Split(S, \" \"\
    )\n    for _, word := range words {\n        if word == \"I\" {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    var boredoms int\n    for _, word\
    \ := range S {\n        if word == 'I' {\n            boredoms++\n        }\n\
    \    }\n    return boredoms\n}\n", "    var boredoms int\n    for _, word := range\
    \ S {\n        if word == 'I' {\n            boredoms++\n        }\n    }\n  \
    \  return boredoms\n}\n", "    var count int\n    for _, word := range S {\n \
    \       if word == 'I' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    var boredoms int\n    var word string\n    for _, c := range S {\n\
    \        if c == '.' || c == '?' || c == '!' {\n            if word == \"I\" {\n\
    \                boredoms++\n            }\n            word = \"\"\n        }\
    \ else {\n            word += string(c)\n        }\n    }\n    return boredoms\n\
    }\n", "    var boredoms int\n    for _, word := range S {\n        if word ==\
    \ 'I' {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n",
  "    var boredoms int\n    for _, word := range S {\n        if word == 'I' {\n\
    \            boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var\
    \ boredoms int\n    var sentence string\n    for _, char := range S {\n      \
    \  sentence += string(char)\n        if char == '.' || char == '?' || char ==\
    \ '!' {\n            if sentence[0:2] == \"I \" {\n                boredoms++\n\
    \            }\n            sentence = \"\"\n        }\n    }\n    return boredoms\n\
    }\n", "    var boredoms int\n    for _, word := range S {\n        if word ==\
    \ 'I' {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n",
  "    return 0\n}\n", "    return 0\n}\n", "    var count int\n    for _, v := range\
    \ S {\n        if v == 'I' {\n            count++\n        }\n    }\n    return\
    \ count\n}\n", "    var boredoms int = 0\n    var sentence string = \"\"\n   \
    \ for _, c := range S {\n        if c == '.' || c == '?' || c == '!' {\n     \
    \       if sentence[0] == 'I' {\n                boredoms++\n            }\n \
    \           sentence = \"\"\n        } else {\n            sentence += string(c)\n\
    \        }\n    }\n    return boredoms\n}\n", "    var boredoms int\n    for _,\
    \ word := range strings.Split(S, \" \") {\n        if word == \"I\" {\n      \
    \      boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var boredoms\
    \ int\n    for _, word := range S {\n        if word == 'I' {\n            boredoms++\n\
    \        }\n    }\n    return boredoms\n}\n", "    var boredoms int\n    for _,\
    \ word := range S {\n        if word == 'I' {\n            boredoms++\n      \
    \  }\n    }\n    return boredoms\n}\n", "    var count int\n    for _, word :=\
    \ range S {\n        if word == 'I' {\n            count++\n        }\n    }\n\
    \    return count\n}\n", "    var boredoms int\n    for _, word := range S {\n\
    \        if word == 'I' {\n            boredoms++\n        }\n    }\n    return\
    \ boredoms\n}\n", "    return 0\n}\n", "    var boredoms int = 0\n    var sentence\
    \ string = \"\"\n    for _, char := range S {\n        sentence += string(char)\n\
    \        if char == '.' || char == '?' || char == '!' {\n            if sentence[0:2]\
    \ == \"I \" {\n                boredoms++\n            }\n            sentence\
    \ = \"\"\n        }\n    }\n    return boredoms\n}\n", "    return 0\n}\n", " \
    \   var boredoms int = 0\n    var i int = 0\n    var j int = 0\n    var k int\
    \ = 0\n    var l int = 0\n    var m int = 0\n    var n int = 0\n    var o int\
    \ = 0\n    var p int = 0\n    var q int = 0\n    var r int = 0\n    var s int\
    \ = 0\n    var t int = 0\n    var u int = 0\n    var v int = 0\n    var w int\
    \ = 0\n    var x int = 0\n    var y int = 0\n    var z int = 0\n    var a int\
    \ = 0\n    var b int = 0\n    var c int = 0\n    var d int = 0\n    var e int\
    \ = 0\n    var f int = 0\n    var g int = 0\n    var h int = 0\n    var ii int\
    \ = 0\n    var jj int = 0\n    var kk int = 0\n    var ll int = 0\n    var mm\
    \ int = 0\n    var nn int = 0\n    var oo int = 0\n    var pp int = 0\n    var\
    \ qq int = 0\n    var rr int = 0\n    var ss int = 0\n    var tt int = 0\n   \
    \ var uu int = 0\n    var vv int = 0\n    var ww int = 0\n    var xx int = 0\n\
    \    var yy int = 0\n    var zz int = 0\n    var aa int = 0\n    var bb int =\
    \ 0\n    var cc int = 0\n    var dd int = 0\n    var ee int = 0\n    var ff int\
    \ = 0\n    var gg int = 0\n    var hh int = 0\n    var iii int = 0\n    var jjj\
    \ int = 0\n    var kkk int = 0\n    var lll int = 0\n    var mmm int = 0\n   \
    \ var nnn int = 0\n    var ooo int = 0\n    var ppp int = 0\n    var qqq int =\
    \ 0\n    var rrr int = 0\n    var sss int = 0\n    var ttt int = 0\n    var uuu\
    \ int = 0\n    var vvv int = 0\n    var www int = 0\n    var xxx", "    return\
    \ 0\n}\n", "    var boredoms int\n    for _, word := range S {\n        if word\
    \ == 'I' {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n",
  "    var count int\n    for _, c := range S {\n        if c == 'I' {\n         \
    \   count++\n        }\n    }\n    return count\n}\n", "    var count int\n  \
    \  for _, v := range S {\n        if v == 'I' {\n            count++\n       \
    \ }\n    }\n    return count\n}\n", "    var boredoms int = 0\n    var sentence\
    \ string = \"\"\n    for _, char := range S {\n        if char == '.' || char\
    \ == '?' || char == '!' {\n            if sentence[0] == 'I' {\n             \
    \   boredoms++\n            }\n            sentence = \"\"\n        } else {\n\
    \            sentence += string(char)\n        }\n    }\n    return boredoms\n\
    }\n", "    var boredoms int\n    for _, word := range S {\n        if word ==\
    \ 'I' {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n",
  "    var boredoms int = 0\n    var i int = 0\n    var j int = 0\n    var k int =\
    \ 0\n    var l int = 0\n    var m int = 0\n    var n int = 0\n    var o int =\
    \ 0\n    var p int = 0\n    var q int = 0\n    var r int = 0\n    var s int =\
    \ 0\n    var t int = 0\n    var u int = 0\n    var v int = 0\n    var w int =\
    \ 0\n    var x int = 0\n    var y int = 0\n    var z int = 0\n    var a int =\
    \ 0\n    var b int = 0\n    var c int = 0\n    var d int = 0\n    var e int =\
    \ 0\n    var f int = 0\n    var g int = 0\n    var h int = 0\n    var ii int =\
    \ 0\n    var jj int = 0\n    var kk int = 0\n    var ll int = 0\n    var mm int\
    \ = 0\n    var nn int = 0\n    var oo int = 0\n    var pp int = 0\n    var qq\
    \ int = 0\n    var rr int = 0\n    var ss int = 0\n    var tt int = 0\n    var\
    \ uu int = 0\n    var vv int = 0\n    var ww int = 0\n    var xx int = 0\n   \
    \ var yy int = 0\n    var zz int = 0\n    var aa int = 0\n    var bb int = 0\n\
    \    var cc int = 0\n    var dd int = 0\n    var ee int = 0\n    var ff int =\
    \ 0\n    var gg int = 0\n    var hh int = 0\n    var iii int = 0\n    var jjj\
    \ int = 0\n    var kkk int = 0\n    var lll int = 0\n    var mmm int = 0\n   \
    \ var nnn int = 0\n    var ooo int = 0\n    var ppp int = 0\n    var qqq int =\
    \ 0\n    var rrr int = 0\n    var sss int = 0\n    var ttt int = 0\n    var uuu\
    \ int = 0\n    var vvv int = 0\n    var www int = 0\n    var xxx", "    var count\
    \ int\n    for _, word := range S {\n        if word == 'I' {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    return 0\n}\n", "    var boredoms\
    \ int\n    for _, word := range S {\n        if word == 'I' {\n            boredoms++\n\
    \        }\n    }\n    return boredoms\n}\n", "    var count int\n    for _, word\
    \ := range S {\n        if word == 'I' {\n            count++\n        }\n   \
    \ }\n    return count\n}\n", "    count := 0\n    for _, word := range S {\n \
    \       if word == 'I' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    cnt := 0\n    for _, word := range S {\n        if word == 'I' {\n\
    \            cnt++\n        }\n    }\n    return cnt\n}\n", "    var boredoms\
    \ int\n    for _, word := range strings.Split(S, \" \") {\n        if word ==\
    \ \"I\" {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n",
  "    var boredoms int\n    for _, word := range S {\n        if word == 'I' {\n\
    \            boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var\
    \ boredoms int\n    for _, word := range S {\n        if word == 'I' {\n     \
    \       boredoms++\n        }\n    }\n    return boredoms\n}\n", "    return 0\n\
    }\n", "    var boredoms int\n    for _, word := range S {\n        if word ==\
    \ 'I' {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n",
  "    var boredoms int = 0\n    var word string = \"\"\n    for _, c := range S {\n\
    \        if c == '.' || c == '?' || c == '!' {\n            if word == \"I\" {\n\
    \                boredoms++\n            }\n            word = \"\"\n        }\
    \ else {\n            word += string(c)\n        }\n    }\n    return boredoms\n\
    }\n", "    var boredoms int\n    for _, word := range S {\n        if word ==\
    \ 'I' {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n",
  "    var boredoms int = 0\n    var words []string = strings.Split(S, \" \")\n  \
    \  for _, word := range words {\n        if word == \"I\" {\n            boredoms++\n\
    \        }\n    }\n    return boredoms\n}\n", "    return 0\n}\n", "    var boredoms\
    \ int\n    for _, word := range S {\n        if word == 'I' {\n            boredoms++\n\
    \        }\n    }\n    return boredoms\n}\n", "    return 0\n}\n", "    boredoms\
    \ := 0\n    for _, word := range S {\n        if word == 'I' {\n            boredoms++\n\
    \        }\n    }\n    return boredoms\n}\n", "    var boredoms int\n    for _,\
    \ word := range S {\n        if word == 'I' {\n            boredoms++\n      \
    \  }\n    }\n    return boredoms\n}\n", "    var boredoms int\n    for _, word\
    \ := range strings.Split(S, \" \") {\n        if word == \"I\" {\n           \
    \ boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var boredoms int\
    \ = 0\n    var i int = 0\n    var c byte\n    var prev byte = ' '\n    for i <\
    \ len(S) {\n        c = S[i]\n        if c == '.' || c == '?' || c == '!' {\n\
    \            if prev == 'I' {\n                boredoms += 1\n            }\n\
    \        }\n        prev = c\n        i += 1\n    }\n    return boredoms\n}\n",
  "    var count int\n    for _, v := range S {\n        if v == 'I' {\n         \
    \   count++\n        }\n    }\n    return count\n}\n", "    var count int\n  \
    \  for _, v := range S {\n        if v == 'I' {\n            count++\n       \
    \ }\n    }\n    return count\n}\n", "    var boredoms int\n    for _, word :=\
    \ range S {\n        if word == 'I' {\n            boredoms += 1\n        }\n\
    \    }\n    return boredoms\n}\n", "    var boredoms int = 0\n    for _, word\
    \ := range S {\n        if word == 'I' {\n            boredoms++\n        }\n\
    \    }\n    return boredoms\n}\n", "    var boredoms int\n    for _, word := range\
    \ S {\n        if word == 'I' {\n            boredoms++\n        }\n    }\n  \
    \  return boredoms\n}\n", "    var boredoms int\n    var sentence string\n   \
    \ for _, c := range S {\n        if c == '.' || c == '?' || c == '!' {\n     \
    \       if sentence[0] == 'I' {\n                boredoms++\n            }\n \
    \           sentence = \"\"\n        } else {\n            sentence += string(c)\n\
    \        }\n    }\n    return boredoms\n}\n", "    var boredoms int\n    for _,\
    \ word := range S {\n        if word == 'I' {\n            boredoms++\n      \
    \  }\n    }\n    return boredoms\n}\n", "    var boredoms int\n    for _, word\
    \ := range S {\n        if word == 'I' {\n            boredoms++\n        }\n\
    \    }\n    return boredoms\n}\n", "    var boredoms int\n    var words []string\n\
    \    words = strings.Split(S, \" \")\n    for i := 0; i < len(words); i++ {\n\
    \        if words[i] == \"I\" {\n            boredoms++\n        }\n    }\n  \
    \  return boredoms\n}\n", "    return 0\n}\n", "    var boredoms int\n    for\
    \ _, word := range S {\n        if word == 'I' {\n            boredoms++\n   \
    \     }\n    }\n    return boredoms\n}\n", "    var count int\n    for _, v :=\
    \ range S {\n        if v == 'I' {\n            count++\n        }\n    }\n  \
    \  return count\n}\n", "    var count int\n    for _, v := range S {\n       \
    \ if v == 'I' {\n            count++\n        }\n    }\n    return count\n}\n",
  "    var boredoms int\n    for _, word := range S {\n        if word == 'I' {\n\
    \            boredoms++\n        }\n    }\n    return boredoms\n}\n", "    return\
    \ 0\n}\n", "    var boredoms int\n    for _, word := range S {\n        if word\
    \ == 'I' {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n",
  "    var boredoms int\n    for _, word := range S {\n        if word == 'I' {\n\
    \            boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var\
    \ boredoms int\n    var words []string\n    var word string\n    var i int\n \
    \   var c byte\n\n    for i, c = range S {\n        if c == '.' || c == '?' ||\
    \ c == '!' {\n            words = append(words, word)\n            word = \"\"\
    \n        } else {\n            word += string(c)\n        }\n        if i ==\
    \ len(S) - 1 {\n            words = append(words, word)\n        }\n    }\n\n\
    \    for _, word = range words {\n        if word == \"I\" {\n            boredoms++\n\
    \        }\n    }\n\n    return boredoms\n}\n", "    return 0\n}\n", "    var\
    \ boredoms int = 0\n    var sentence string = \"\"\n    for _, c := range S {\n\
    \        if c == '.' || c == '?' || c == '!' {\n            if sentence[0] ==\
    \ 'I' {\n                boredoms++\n            }\n            sentence = \"\"\
    \n        } else {\n            sentence += string(c)\n        }\n    }\n    return\
    \ boredoms\n}\n", "    var boredoms int\n    for _, word := range S {\n      \
    \  if word == 'I' {\n            boredoms++\n        }\n    }\n    return boredoms\n\
    }\n", "    var boredoms int = 0\n    var i int = 0\n    var c byte = ' '\n   \
    \ for i < len(S) {\n        c = S[i]\n        if c == 'I' {\n            boredoms++\n\
    \        }\n        for c != '.' && c != '?' && c != '!' {\n            i++\n\
    \            if i >= len(S) {\n                break\n            }\n        \
    \    c = S[i]\n        }\n        i++\n    }\n    return boredoms\n}\n", "   \
    \ return 0\n}\n", "    var boredoms int\n    for _, word := range S {\n      \
    \  if word == 'I' {\n            boredoms++\n        }\n    }\n    return boredoms\n\
    }\n", "    return 0\n}\n", "    var boredoms int\n    for _, word := range S {\n\
    \        if word == 'I' {\n            boredoms += 1\n        }\n    }\n    return\
    \ boredoms\n}\n", "    var boredoms int\n    for _, word := range S {\n      \
    \  if word == 'I' {\n            boredoms++\n        }\n    }\n    return boredoms\n\
    }\n", "    var boredoms int = 0\n    var i int = 0\n    var j int = 0\n    var\
    \ k int = 0\n    var l int = 0\n    var m int = 0\n    var n int = 0\n    var\
    \ o int = 0\n    var p int = 0\n    var q int = 0\n    var r int = 0\n    var\
    \ s int = 0\n    var t int = 0\n    var u int = 0\n    var v int = 0\n    var\
    \ w int = 0\n    var x int = 0\n    var y int = 0\n    var z int = 0\n    var\
    \ a int = 0\n    var b int = 0\n    var c int = 0\n    var d int = 0\n    var\
    \ e int = 0\n    var f int = 0\n    var g int = 0\n    var h int = 0\n    var\
    \ ii int = 0\n    var jj int = 0\n    var kk int = 0\n    var ll int = 0\n   \
    \ var mm int = 0\n    var nn int = 0\n    var oo int = 0\n    var pp int = 0\n\
    \    var qq int = 0\n    var rr int = 0\n    var ss int = 0\n    var tt int =\
    \ 0\n    var uu int = 0\n    var vv int = 0\n    var ww int = 0\n    var xx int\
    \ = 0\n    var yy int = 0\n    var zz int = 0\n    var aa int = 0\n    var bb\
    \ int = 0\n    var cc int = 0\n    var dd int = 0\n    var ee int = 0\n    var\
    \ ff int = 0\n    var gg int = 0\n    var hh int = 0\n    var iii int = 0\n  \
    \  var jjj int = 0\n    var kkk int = 0\n    var lll int = 0\n    var mmm int\
    \ = 0\n    var nnn int = 0\n    var ooo int = 0\n    var ppp int = 0\n    var\
    \ qqq int = 0\n    var rrr int = 0\n    var sss int = 0\n    var ttt int = 0\n\
    \    var uuu int = 0\n    var vvv int = 0\n    var www int = 0\n    var xxx",
  "    // your code here\n    return 0\n}\n", "    count := 0\n    for i := 0; i <\
    \ len(S); i++ {\n        if S[i] == 'I' {\n            count++\n        }\n  \
    \  }\n    return count\n}\n", "    var boredoms int\n    var sentence string\n\
    \    for _, char := range S {\n        sentence += string(char)\n        if char\
    \ == '.' || char == '?' || char == '!' {\n            if sentence[0:2] == \"I\
    \ \" {\n                boredoms++\n            }\n            sentence = \"\"\
    \n        }\n    }\n    return boredoms\n}\n", "    var boredoms int = 0\n   \
    \ var words []string = strings.Split(S, \" \")\n    for _, word := range words\
    \ {\n        if word == \"I\" {\n            boredoms++\n        }\n    }\n  \
    \  return boredoms\n}\n", "    var count int\n    for _, word := range S {\n \
    \       if word == 'I' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for _, word := range S {\n        if word == 'I' {\n\
    \            count++\n        }\n    }\n    return count\n}\n", "    var boredoms\
    \ int = 0\n    var word string\n    for _, c := range S {\n        if c == ' '\
    \ {\n            if word == \"I\" {\n                boredoms++\n            }\n\
    \            word = \"\"\n        } else if c == '.' || c == '?' || c == '!' {\n\
    \            if word == \"I\" {\n                boredoms++\n            }\n \
    \           word = \"\"\n        } else {\n            word += string(c)\n   \
    \     }\n    }\n    return boredoms\n}\n", "    var boredoms int\n    for _, word\
    \ := range S {\n        if word == 'I' {\n            boredoms++\n        }\n\
    \    }\n    return boredoms\n}\n", "    // your code here\n    return 0\n}\n",
  "    var count int\n    for _, word := range S {\n        if word == 'I' {\n   \
    \         count++\n        }\n    }\n    return count\n}\n", "    var count int\n\
    \    for _, c := range S {\n        if c == 'I' {\n            count++\n     \
    \   }\n    }\n    return count\n}\n", "    var boredoms int\n    var words []string\n\
    \    var word string\n    var sentence string\n    var sentences []string\n  \
    \  var sentence_start bool\n    var sentence_end bool\n    var sentence_end_char\
    \ string\n    var sentence_start_char string\n    var sentence_end_chars []string\n\
    \    var sentence_start_chars []string\n    var sentence_start_chars_map map[string]bool\n\
    \    var sentence_end_chars_map map[string]bool\n    var sentence_end_chars_map_keys\
    \ []string\n    var sentence_start_chars_map_keys []string\n    var sentence_end_chars_map_keys_len\
    \ int\n    var sentence_start_chars_map_keys_len int\n    var sentence_end_chars_map_keys_idx\
    \ int\n    var sentence_start_chars_map_keys_idx int\n    var sentence_end_chars_map_keys_char\
    \ string\n    var sentence_start_chars_map_keys_char string\n    var sentence_end_chars_map_keys_char_idx\
    \ int\n    var sentence_start_chars_map_keys_char_idx int\n    var sentence_end_chars_map_keys_char_idx_len\
    \ int\n    var sentence_start_chars_map_keys_char_idx_len int\n    var sentence_end_chars_map_keys_char_idx_char\
    \ string\n    var sentence_start_chars_map_keys_char_idx_char string\n    var\
    \ sentence_end_chars_map_keys_char_idx_char_idx int\n    var sentence_start_chars_map_keys_char_idx_char_idx\
    \ int\n    var sentence_end_chars_map_keys_char_idx_char_idx_len int\n    var\
    \ sentence_start_chars_map_keys_char_idx_char_idx_len int\n    var sentence_end_chars_map_keys_char_idx_char_idx_char\
    \ string\n    var sentence_start_chars_map_keys_char_idx_char_id", "    var boredoms\
    \ int\n    for _, word := range S {\n        if word == 'I' {\n            boredoms++\n\
    \        }\n    }\n    return boredoms\n}\n", "    var boredoms int\n    for _,\
    \ word := range S {\n        if word == 'I' {\n            boredoms++\n      \
    \  }\n    }\n    return boredoms\n}\n", "    var boredoms int\n    for _, word\
    \ := range S {\n        if word == 'I' {\n            boredoms++\n        }\n\
    \    }\n    return boredoms\n}\n", "    var boredoms int\n    for _, word := range\
    \ S {\n        if word == 'I' {\n            boredoms++\n        }\n    }\n  \
    \  return boredoms\n}\n", "    var boredoms int\n    for _, word := range S {\n\
    \        if word == 'I' {\n            boredoms++\n        }\n    }\n    return\
    \ boredoms\n}\n", "    var boredoms int\n    for _, word := range S {\n      \
    \  if word == 'I' {\n            boredoms++\n        }\n    }\n    return boredoms\n\
    }\n", "    var boredoms int\n    for _, word := range S {\n        if word ==\
    \ 'I' {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n",
  "    var boredoms int\n    for _, word := range S {\n        if word == 'I' {\n\
    \            boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var\
    \ boredoms int\n    for _, word := range strings.Split(S, \" \") {\n        if\
    \ word == \"I\" {\n            boredoms++\n        }\n    }\n    return boredoms\n\
    }\n", "    var boredoms int\n    var sentence string\n    for _, c := range S\
    \ {\n        sentence += string(c)\n        if c == '.' || c == '?' || c == '!'\
    \ {\n            if sentence[0] == 'I' {\n                boredoms++\n       \
    \     }\n            sentence = \"\"\n        }\n    }\n    return boredoms\n\
    }\n", "    var count int\n    for _, word := range S {\n        if word == 'I'\
    \ {\n            count++\n        }\n    }\n    return count\n}\n", "    var boredoms\
    \ int\n    var words []string\n    var word string\n    var i int\n    var c byte\n\
    \n    words = make([]string, 0)\n    word = \"\"\n    for i = 0; i < len(S); i++\
    \ {\n        c = S[i]\n        if c == '.' || c == '?' || c == '!' {\n       \
    \     words = append(words, word)\n            word = \"\"\n        } else if\
    \ c == ' ' {\n            words = append(words, word)\n            word = \"\"\
    \n        } else {\n            word += string(c)\n        }\n    }\n    if word\
    \ != \"\" {\n        words = append(words, word)\n    }\n\n    for i = 0; i <\
    \ len(words); i++ {\n        if words[i] == \"I\" {\n            boredoms++\n\
    \        }\n    }\n\n    return boredoms\n}\n", "    var count int\n    for _,\
    \ v := range S {\n        if v == 'I' {\n            count++\n        }\n    }\n\
    \    return count\n}\n", "    var boredoms int\n    for i := 0; i < len(S); i++\
    \ {\n        if S[i] == 'I' {\n            boredoms++\n        }\n    }\n    return\
    \ boredoms\n}\n", "    var count int\n    for _, v := range S {\n        if v\
    \ == 'I' {\n            count++\n        }\n    }\n    return count\n}\n", " \
    \   var boredoms int\n    for _, word := range S {\n        if word == 'I' {\n\
    \            boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var\
    \ boredoms int\n    var i int\n    for i < len(S) {\n        if S[i] == 'I' {\n\
    \            boredoms++\n        }\n        for i < len(S) && S[i] != '.' && S[i]\
    \ != '?' && S[i] != '!' {\n            i++\n        }\n        i++\n    }\n  \
    \  return boredoms\n}\n", "    var count int\n    for _, word := range S {\n \
    \       if word == 'I' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    return 0\n}\n", "    var boredoms int\n    for _, word := range S {\n\
    \        if word == 'I' {\n            boredoms++\n        }\n    }\n    return\
    \ boredoms\n}\n", "    var boredoms int\n    for _, word := range S {\n      \
    \  if word == 'I' {\n            boredoms++\n        }\n    }\n    return boredoms\n\
    }\n", "    return 0\n}\n", "    // your code\n    return 0\n}\n", "    var count\
    \ int\n    for _, word := range S {\n        if word == 'I' {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    return 0\n}\n", "    var boredoms\
    \ int\n    for _, word := range S {\n        if word == 'I' {\n            boredoms++\n\
    \        }\n    }\n    return boredoms\n}\n", "    var boredoms int\n    for _,\
    \ word := range S {\n        if word == 'I' {\n            boredoms++\n      \
    \  }\n    }\n    return boredoms\n}\n", "    var boredoms int\n    for _, word\
    \ := range S {\n        if word == 'I' {\n            boredoms++\n        }\n\
    \    }\n    return boredoms\n}\n", "    var boredoms int\n    for _, word := range\
    \ S {\n        if word == 'I' {\n            boredoms++\n        }\n    }\n  \
    \  return boredoms\n}\n", "    // your code here\n    return 0\n}\n", "    var\
    \ boredoms int = 0\n    var i int = 0\n    for i < len(S) {\n        if S[i] ==\
    \ 'I' {\n            boredoms++\n        }\n        for S[i] != '.' && S[i] !=\
    \ '?' && S[i] != '!' {\n            i++\n            if i == len(S) {\n      \
    \          break\n            }\n        }\n        i++\n    }\n    return boredoms\n\
    }\n", "    var boredoms int\n    for _, word := range S {\n        if word ==\
    \ 'I' {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n",
  "    return 0\n}\n", "    var boredoms int\n    for _, word := range strings.Split(S,\
    \ \" \") {\n        if word == \"I\" {\n            boredoms++\n        }\n  \
    \  }\n    return boredoms\n}\n", "    // your code here\n    return 0\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
