language: go_test.go
name: HumanEval_23_strlen
results:
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    var length\
    \ int\n    for range myString {\n        length++\n    }\n    return length\n\
    }\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"\
    ), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    var count\
    \ int\n    for range myString {\n        count++\n    }\n    return count\n}\n\
    \nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"\
    ), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    var length\
    \ int\n    for range myString {\n        length++\n    }\n    return length\n\
    }\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"\
    ), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    var length\
    \ int\n    for range myString {\n        length++\n    }\n    return length\n\
    }\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"\
    ), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    var count\
    \ int\n    for i := range myString {\n        count = i + 1\n    }\n    return\
    \ count\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    var count\
    \ int\n    for range myString {\n        count++\n    }\n    return count\n}\n\
    \nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"\
    ), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    var length\
    \ int\n    for range myString {\n        length++\n    }\n    return length\n\
    }\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"\
    ), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    var length\
    \ int\n    for range myString {\n        length++\n    }\n    return length\n\
    }\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"\
    ), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    var count\
    \ int\n    for range myString {\n        count++\n    }\n    return count\n}\n\
    \nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"\
    ), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    var length\
    \ int\n    for range myString {\n        length++\n    }\n    return length\n\
    }\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"\
    ), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    var count\
    \ int\n    for range myString {\n        count++\n    }\n    return count\n}\n\
    \nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"\
    ), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    var i\
    \ int\n    for i = 0; i < len(myString); i++ {\n    }\n    return i\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\nfunc strlen(myString string) int {\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073203
