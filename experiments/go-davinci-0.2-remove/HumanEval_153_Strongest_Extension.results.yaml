language: go_test.go
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_strength float64\n    for _, extension := range extensions\
    \ {\n        strength := float64(0)\n        for _, letter := range extension\
    \ {\n            if letter >= 'A' && letter <= 'Z' {\n                strength\
    \ += 1\n            } else if letter >= 'a' && letter <= 'z' {\n             \
    \   strength -= 1\n            }\n        }\n        if strength > strongest_strength\
    \ {\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp32sqbtt9_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp32sqbtt9_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp32sqbtt9_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp32sqbtt9_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074631
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        strength := float64(0)\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength += 1\n\
    \            } else if char >= 'a' && char <= 'z' {\n                strength\
    \ -= 1\n            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpf9ubg713_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpf9ubg713_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpf9ubg713_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpf9ubg713_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074631
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var strength float64\n        for _, letter := range extension {\n\
    \            if letter >= 'A' && letter <= 'Z' {\n                strength++\n\
    \            } else if letter >= 'a' && letter <= 'z' {\n                strength--\n\
    \            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp0isa6uhr_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp0isa6uhr_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp0isa6uhr_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp0isa6uhr_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074631
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var strength float64\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength++\n   \
    \         } else if char >= 'a' && char <= 'z' {\n                strength--\n\
    \            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpa0yudb09_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpa0yudb09_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpa0yudb09_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpa0yudb09_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        strength := float64(0)\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength += 1\n\
    \            } else if char >= 'a' && char <= 'z' {\n                strength\
    \ -= 1\n            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpf9ubg713_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpf9ubg713_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpf9ubg713_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpf9ubg713_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074631
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var cap_count int\n        var sm_count int\n        for _, char\
    \ := range extension {\n            if char >= 'A' && char <= 'Z' {\n        \
    \        cap_count++\n            } else if char >= 'a' && char <= 'z' {\n   \
    \             sm_count++\n            }\n        }\n        var strength float64\
    \ = float64(cap_count) - float64(sm_count)\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpq3jcf0lx_test.go:65: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpq3jcf0lx_test.go:65: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpq3jcf0lx_test.go:65:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpq3jcf0lx_test.go:65: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var strength float64\n        for _, letter := range extension {\n\
    \            if letter >= 'A' && letter <= 'Z' {\n                strength++\n\
    \            } else if letter >= 'a' && letter <= 'z' {\n                strength--\n\
    \            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp0isa6uhr_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp0isa6uhr_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp0isa6uhr_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp0isa6uhr_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074631
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var strength float64\n        for _, letter := range extension {\n\
    \            if letter >= 'A' && letter <= 'Z' {\n                strength++\n\
    \            } else if letter >= 'a' && letter <= 'z' {\n                strength--\n\
    \            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp0isa6uhr_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp0isa6uhr_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp0isa6uhr_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp0isa6uhr_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074631
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_strength float64\n    for _, extension := range extensions\
    \ {\n        var strength float64\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength += 1\n\
    \            } else if char >= 'a' && char <= 'z' {\n                strength\
    \ -= 1\n            }\n        }\n        if strength > strongest_strength {\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n\
    }\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp64r_n8uu_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp64r_n8uu_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp64r_n8uu_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp64r_n8uu_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var strength float64\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength++\n   \
    \         } else if char >= 'a' && char <= 'z' {\n                strength--\n\
    \            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpa0yudb09_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpa0yudb09_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpa0yudb09_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpa0yudb09_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_strength float64\n    for _, extension := range extensions\
    \ {\n        var strength float64\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength += 1\n\
    \            } else if char >= 'a' && char <= 'z' {\n                strength\
    \ -= 1\n            }\n        }\n        if strength > strongest_strength {\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n\
    }\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp64r_n8uu_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp64r_n8uu_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp64r_n8uu_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp64r_n8uu_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        extension_strength := float64(0)\n        for _, char := range extension\
    \ {\n            if char >= 'A' && char <= 'Z' {\n                extension_strength++\n\
    \            } else if char >= 'a' && char <= 'z' {\n                extension_strength--\n\
    \            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmptms325fc_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmptms325fc_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmptms325fc_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmptms325fc_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var CAP, SM int\n        for _, char := range extension {\n     \
    \       if char >= 'A' && char <= 'Z' {\n                CAP++\n            }\
    \ else if char >= 'a' && char <= 'z' {\n                SM++\n            }\n\
    \        }\n        strength := float64(CAP) - float64(SM)\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength\n            strongest_extension = extension\n        }\n    }\n  \
    \  return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpz_23kgem_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpz_23kgem_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpz_23kgem_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpz_23kgem_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        strength := float64(0)\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength += 1\n\
    \            } else if char >= 'a' && char <= 'z' {\n                strength\
    \ -= 1\n            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpf9ubg713_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpf9ubg713_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpf9ubg713_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpf9ubg713_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074631
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var strength float64\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength += 1\n\
    \            } else if char >= 'a' && char <= 'z' {\n                strength\
    \ -= 1\n            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpwdwk9j_6_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpwdwk9j_6_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpwdwk9j_6_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpwdwk9j_6_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var strength float64\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength += 1\n\
    \            } else if char >= 'a' && char <= 'z' {\n                strength\
    \ -= 1\n            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpwdwk9j_6_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpwdwk9j_6_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpwdwk9j_6_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpwdwk9j_6_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var strength float64\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength += 1\n\
    \            } else if char >= 'a' && char <= 'z' {\n                strength\
    \ -= 1\n            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpwdwk9j_6_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpwdwk9j_6_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpwdwk9j_6_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpwdwk9j_6_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var strength float64\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength++\n   \
    \         } else if char >= 'a' && char <= 'z' {\n                strength--\n\
    \            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpa0yudb09_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpa0yudb09_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpa0yudb09_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpa0yudb09_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension_name string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var extension_strength float64\n        for _, char := range extension\
    \ {\n            if char >= 'A' && char <= 'Z' {\n                extension_strength++\n\
    \            } else if char >= 'a' && char <= 'z' {\n                extension_strength--\n\
    \            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension_name = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension_name)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnbez2lf5_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpnbez2lf5_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnbez2lf5_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpnbez2lf5_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_strength float64\n    for _, extension := range extensions\
    \ {\n        strength := float64(0)\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength += 1\n\
    \            } else if char >= 'a' && char <= 'z' {\n                strength\
    \ -= 1\n            }\n        }\n        if strength > strongest_strength {\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n\
    }\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp1wujz7m4_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp1wujz7m4_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp1wujz7m4_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp1wujz7m4_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var strength float64\n        for _, letter := range extension {\n\
    \            if letter >= 'A' && letter <= 'Z' {\n                strength +=\
    \ 1\n            } else if letter >= 'a' && letter <= 'z' {\n                strength\
    \ -= 1\n            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpi6_uu7py_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpi6_uu7py_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpi6_uu7py_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpi6_uu7py_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    var current_extension_strength\
    \ float64\n    var current_extension_cap int\n    var current_extension_sm int\n\
    \    for _, extension := range extensions {\n        current_extension_cap = 0\n\
    \        current_extension_sm = 0\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                current_extension_cap++\n\
    \            } else if char >= 'a' && char <= 'z' {\n                current_extension_sm++\n\
    \            }\n        }\n        current_extension_strength = float64(current_extension_cap)\
    \ - float64(current_extension_sm)\n        if current_extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = current_extension_strength\n \
    \           strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpgwgzrc_g_test.go:68: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpgwgzrc_g_test.go:68: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpgwgzrc_g_test.go:68:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpgwgzrc_g_test.go:68: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_strength float64\n    for _, extension := range extensions\
    \ {\n        strength := float64(0)\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength += 1\n\
    \            } else if char >= 'a' && char <= 'z' {\n                strength\
    \ -= 1\n            }\n        }\n        if strength > strongest_strength {\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n\
    }\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp1wujz7m4_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp1wujz7m4_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp1wujz7m4_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp1wujz7m4_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var strength float64\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength += 1\n\
    \            } else if char >= 'a' && char <= 'z' {\n                strength\
    \ -= 1\n            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpwdwk9j_6_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpwdwk9j_6_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpwdwk9j_6_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpwdwk9j_6_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_strength float64\n    for _, extension := range extensions\
    \ {\n        strength := float64(0)\n        for _, letter := range extension\
    \ {\n            if letter >= 'A' && letter <= 'Z' {\n                strength\
    \ += 1\n            } else if letter >= 'a' && letter <= 'z' {\n             \
    \   strength -= 1\n            }\n        }\n        if strength > strongest_strength\
    \ {\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp32sqbtt9_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp32sqbtt9_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp32sqbtt9_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp32sqbtt9_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074631
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_strength float64\n    for _, extension := range extensions\
    \ {\n        var strength float64\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength++\n   \
    \         } else if char >= 'a' && char <= 'z' {\n                strength--\n\
    \            }\n        }\n        if strength > strongest_strength {\n      \
    \      strongest_strength = strength\n            strongest_extension = extension\n\
    \        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n\
    }\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp7yu9n75s_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp7yu9n75s_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp7yu9n75s_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp7yu9n75s_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074631
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var strength float64\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength++\n   \
    \         } else if char >= 'a' && char <= 'z' {\n                strength--\n\
    \            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpa0yudb09_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpa0yudb09_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpa0yudb09_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpa0yudb09_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_strength float64\n    for _, extension := range extensions\
    \ {\n        strength := float64(0)\n        for _, letter := range extension\
    \ {\n            if letter >= 'A' && letter <= 'Z' {\n                strength++\n\
    \            } else if letter >= 'a' && letter <= 'z' {\n                strength--\n\
    \            }\n        }\n        if strength > strongest_strength {\n      \
    \      strongest_strength = strength\n            strongest_extension = extension\n\
    \        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n\
    }\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp83f18jiw_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp83f18jiw_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp83f18jiw_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp83f18jiw_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var extension_strength float64\n        for _, char := range extension\
    \ {\n            if char >= 'A' && char <= 'Z' {\n                extension_strength++\n\
    \            } else if char >= 'a' && char <= 'z' {\n                extension_strength--\n\
    \            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp1ru2_g5v_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp1ru2_g5v_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp1ru2_g5v_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp1ru2_g5v_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        strength := float64(0)\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength += 1\n\
    \            } else if char >= 'a' && char <= 'z' {\n                strength\
    \ -= 1\n            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpf9ubg713_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpf9ubg713_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpf9ubg713_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpf9ubg713_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074631
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_strength float64\n    for _, extension := range extensions\
    \ {\n        strength := float64(0)\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength += 1\n\
    \            } else if char >= 'a' && char <= 'z' {\n                strength\
    \ -= 1\n            }\n        }\n        if strength > strongest_strength {\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n\
    }\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp1wujz7m4_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp1wujz7m4_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp1wujz7m4_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp1wujz7m4_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_strength float64\n    for _, extension := range extensions\
    \ {\n        strength := float64(0)\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength += 1\n\
    \            } else if char >= 'a' && char <= 'z' {\n                strength\
    \ -= 1\n            }\n        }\n        if strength > strongest_strength {\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n\
    }\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp1wujz7m4_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp1wujz7m4_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp1wujz7m4_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp1wujz7m4_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var strength float64\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength++\n   \
    \         } else if char >= 'a' && char <= 'z' {\n                strength--\n\
    \            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpa0yudb09_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpa0yudb09_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpa0yudb09_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpa0yudb09_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var extension_strength float64\n        for _, char := range extension\
    \ {\n            if char >= 'A' && char <= 'Z' {\n                extension_strength++\n\
    \            } else if char >= 'a' && char <= 'z' {\n                extension_strength--\n\
    \            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp1ru2_g5v_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp1ru2_g5v_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp1ru2_g5v_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp1ru2_g5v_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        extension_strength := float64(0)\n        for _, char := range extension\
    \ {\n            if char >= 'A' && char <= 'Z' {\n                extension_strength\
    \ += 1\n            } else if char >= 'a' && char <= 'z' {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphvob6kvc_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmphvob6kvc_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphvob6kvc_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmphvob6kvc_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    strongest_extension = extensions[0]\n    var strongest_extension_strength\
    \ float64\n    strongest_extension_strength = 0\n    var extension_strength float64\n\
    \    for _, extension := range extensions {\n        extension_strength = 0\n\
    \        for _, char := range extension {\n            if char >= 'A' && char\
    \ <= 'Z' {\n                extension_strength += 1\n            } else if char\
    \ >= 'a' && char <= 'z' {\n                extension_strength -= 1\n         \
    \   }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpc9c61fk9_test.go:66: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.t'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpc9c61fk9_test.go:66: expected '__HAHA.123', got '__HAHA.Tab'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var strength float64\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength++\n   \
    \         } else if char >= 'a' && char <= 'z' {\n                strength--\n\
    \            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpa0yudb09_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpa0yudb09_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpa0yudb09_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpa0yudb09_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var extension_strength float64\n        for _, letter := range extension\
    \ {\n            if letter >= 'A' && letter <= 'Z' {\n                extension_strength\
    \ += 1\n            } else if letter >= 'a' && letter <= 'z' {\n             \
    \   extension_strength -= 1\n            }\n        }\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension\n        }\n\
    \    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n\
    \nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmptsp_cea8_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmptsp_cea8_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmptsp_cea8_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmptsp_cea8_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_strength float64\n    for _, extension := range extensions\
    \ {\n        strength := float64(0)\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength += 1\n\
    \            } else if char >= 'a' && char <= 'z' {\n                strength\
    \ -= 1\n            }\n        }\n        if strength > strongest_strength {\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n\
    }\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp1wujz7m4_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp1wujz7m4_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp1wujz7m4_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp1wujz7m4_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_strength float64\n    for _, extension := range extensions\
    \ {\n        strength := float64(0)\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength += 1\n\
    \            } else if char >= 'a' && char <= 'z' {\n                strength\
    \ -= 1\n            }\n        }\n        if strength > strongest_strength {\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n\
    }\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp1wujz7m4_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp1wujz7m4_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp1wujz7m4_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp1wujz7m4_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_strength float64\n    for _, extension := range extensions\
    \ {\n        strength := float64(0)\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength += 1\n\
    \            } else if char >= 'a' && char <= 'z' {\n                strength\
    \ -= 1\n            }\n        }\n        if strength > strongest_strength {\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n\
    }\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp1wujz7m4_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp1wujz7m4_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp1wujz7m4_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp1wujz7m4_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var extension_strength float64\n        var extension_uppercase_count\
    \ int\n        var extension_lowercase_count int\n        for _, char := range\
    \ extension {\n            if char >= 'A' && char <= 'Z' {\n                extension_uppercase_count++\n\
    \            } else if char >= 'a' && char <= 'z' {\n                extension_lowercase_count++\n\
    \            }\n        }\n        extension_strength = float64(extension_uppercase_count)\
    \ - float64(extension_lowercase_count)\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp9zaalvrp_test.go:66: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp9zaalvrp_test.go:66: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp9zaalvrp_test.go:66:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp9zaalvrp_test.go:66: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_strength float64\n    for _, extension := range extensions\
    \ {\n        var strength float64\n        for _, letter := range extension {\n\
    \            if letter >= 'A' && letter <= 'Z' {\n                strength++\n\
    \            } else {\n                strength--\n            }\n        }\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = extension\n        }\n    }\n  \
    \  return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpd3ebacdx_test.go:63: expected 'Watashi.eIGHt8OKe', got 'Watashi.tEN'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpd3ebacdx_test.go:63:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123.'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpd3ebacdx_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpd3ebacdx_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpd3ebacdx_test.go:63:\
    \ expected 'YameRore.okIWILL123', got 'YameRore.'\n    --- FAIL: TestStrongest_Extension/test_num__7\
    \ (0.00s)\n        tmpd3ebacdx_test.go:63: expected '_.Bb', got '_.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n        tmpd3ebacdx_test.go:63:\
    \ expected 'Sp.671235', got 'Sp.'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var strength float64\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength++\n   \
    \         } else if char >= 'a' && char <= 'z' {\n                strength--\n\
    \            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpa0yudb09_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpa0yudb09_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpa0yudb09_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpa0yudb09_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    strongest_extension = extensions[0]\n    var strongest_strength float64\n\
    \    strongest_strength = 0.0\n    for _, extension := range extensions {\n  \
    \      var strength float64\n        strength = 0.0\n        for _, char := range\
    \ extension {\n            if char >= 'A' && char <= 'Z' {\n                strength\
    \ += 1.0\n            } else if char >= 'a' && char <= 'z' {\n               \
    \ strength -= 1.0\n            }\n        }\n        if strength > strongest_strength\
    \ {\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpxrqsabmo_test.go:66: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.t'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpxrqsabmo_test.go:66: expected '__HAHA.123', got '__HAHA.Tab'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var extension_strength float64\n        for _, char := range extension\
    \ {\n            if char >= 'A' && char <= 'Z' {\n                extension_strength++\n\
    \            } else if char >= 'a' && char <= 'z' {\n                extension_strength--\n\
    \            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp1ru2_g5v_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp1ru2_g5v_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp1ru2_g5v_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp1ru2_g5v_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var strength float64\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength++\n   \
    \         } else if char >= 'a' && char <= 'z' {\n                strength--\n\
    \            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpa0yudb09_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpa0yudb09_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpa0yudb09_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpa0yudb09_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strength float64\n    for _, extension := range extensions {\n      \
    \  var cap_count int\n        var sm_count int\n        for _, char := range extension\
    \ {\n            if char >= 'A' && char <= 'Z' {\n                cap_count++\n\
    \            } else if char >= 'a' && char <= 'z' {\n                sm_count++\n\
    \            }\n        }\n        if strength < float64(cap_count - sm_count)\
    \ {\n            strength = float64(cap_count - sm_count)\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpffe65tsx_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpffe65tsx_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpffe65tsx_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpffe65tsx_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074631
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var strength float64\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength++\n   \
    \         } else if char >= 'a' && char <= 'z' {\n                strength--\n\
    \            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpa0yudb09_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpa0yudb09_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpa0yudb09_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpa0yudb09_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_strength float64\n    for _, extension := range extensions\
    \ {\n        strength := float64(0)\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength += 1\n\
    \            } else if char >= 'a' && char <= 'z' {\n                strength\
    \ -= 1\n            }\n        }\n        if strength > strongest_strength {\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n\
    }\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp1wujz7m4_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp1wujz7m4_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp1wujz7m4_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp1wujz7m4_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var extension_strength float64\n        var upper_count int\n   \
    \     var lower_count int\n        for _, char := range extension {\n        \
    \    if char >= 'A' && char <= 'Z' {\n                upper_count++\n        \
    \    } else if char >= 'a' && char <= 'z' {\n                lower_count++\n \
    \           }\n        }\n        extension_strength = float64(upper_count) -\
    \ float64(lower_count)\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpybnmcu2c_test.go:66: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpybnmcu2c_test.go:66: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpybnmcu2c_test.go:66:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpybnmcu2c_test.go:66: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074631
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    var extension_strength float64\n\
    \    var uppercase_count int\n    var lowercase_count int\n    for _, extension\
    \ := range extensions {\n        uppercase_count = 0\n        lowercase_count\
    \ = 0\n        for _, char := range extension {\n            if char >= 'A' &&\
    \ char <= 'Z' {\n                uppercase_count++\n            } else if char\
    \ >= 'a' && char <= 'z' {\n                lowercase_count++\n            }\n\
    \        }\n        extension_strength = float64(uppercase_count) - float64(lowercase_count)\n\
    \        if extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension\n        }\n\
    \    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n\
    \nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpbqd156g1_test.go:68: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpbqd156g1_test.go:68: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpbqd156g1_test.go:68:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpbqd156g1_test.go:68: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074631
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var strength float64\n        for _, letter := range extension {\n\
    \            if letter >= 'A' && letter <= 'Z' {\n                strength +=\
    \ 1\n            } else if letter >= 'a' && letter <= 'z' {\n                strength\
    \ -= 1\n            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpi6_uu7py_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpi6_uu7py_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpi6_uu7py_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpi6_uu7py_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var strength float64\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength++\n   \
    \         } else if char >= 'a' && char <= 'z' {\n                strength--\n\
    \            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpa0yudb09_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpa0yudb09_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpa0yudb09_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpa0yudb09_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var strength float64\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength++\n   \
    \         } else if char >= 'a' && char <= 'z' {\n                strength--\n\
    \            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpa0yudb09_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpa0yudb09_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpa0yudb09_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpa0yudb09_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var strength float64\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength++\n   \
    \         } else if char >= 'a' && char <= 'z' {\n                strength--\n\
    \            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpa0yudb09_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpa0yudb09_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpa0yudb09_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpa0yudb09_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        extension_strength := float64(0)\n        for _, char := range extension\
    \ {\n            if char >= 'A' && char <= 'Z' {\n                extension_strength++\n\
    \            } else if char >= 'a' && char <= 'z' {\n                extension_strength--\n\
    \            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmptms325fc_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmptms325fc_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmptms325fc_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmptms325fc_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var extension_strength float64\n        for _, char := range extension\
    \ {\n            if char >= 'A' && char <= 'Z' {\n                extension_strength++\n\
    \            } else if char >= 'a' && char <= 'z' {\n                extension_strength--\n\
    \            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp1ru2_g5v_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp1ru2_g5v_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp1ru2_g5v_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp1ru2_g5v_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_strength float64\n    for _, extension := range extensions\
    \ {\n        var strength float64\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength++\n   \
    \         } else if char >= 'a' && char <= 'z' {\n                strength--\n\
    \            }\n        }\n        if strength > strongest_strength {\n      \
    \      strongest_strength = strength\n            strongest_extension = extension\n\
    \        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n\
    }\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp7yu9n75s_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp7yu9n75s_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp7yu9n75s_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp7yu9n75s_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074631
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var strength float64\n        for _, char := range extension {\n\
    \            if char >= 'A' && char <= 'Z' {\n                strength++\n   \
    \         } else if char >= 'a' && char <= 'z' {\n                strength--\n\
    \            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpa0yudb09_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpa0yudb09_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpa0yudb09_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpa0yudb09_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        extension_strength := float64(0)\n        for _, char := range extension\
    \ {\n            if char >= 'A' && char <= 'Z' {\n                extension_strength\
    \ += 1\n            } else if char >= 'a' && char <= 'z' {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphvob6kvc_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmphvob6kvc_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphvob6kvc_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmphvob6kvc_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        var strength float64\n        for _, letter := range extension {\n\
    \            if letter >= 'A' && letter <= 'Z' {\n                strength +=\
    \ 1\n            } else if letter >= 'a' && letter <= 'z' {\n                strength\
    \ -= 1\n            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpi6_uu7py_test.go:63: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpi6_uu7py_test.go:63: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpi6_uu7py_test.go:63:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpi6_uu7py_test.go:63: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphkmvvg4i_test.go:48: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphkmvvg4i_test.go:48:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphkmvvg4i_test.go:48: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074630
