name: HumanEval_58_common
language: go_test.go
prompt: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
  \ sorted unique common elements for two lists.\nfunc common(l1 []int, l2 []int)\
  \ []int {\n"
tests: "func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
  \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
  \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
  \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
  \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\
  \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var result []int\n    for _, v1 := range l1 {\n        for _, v2\
    \ := range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n      \
    \      if v1 == v2 {\n                result = append(result, v1)\n          \
    \  }\n        }\n    }\n    return result\n}\n", "    if len(l1) == 0 || len(l2)\
    \ == 0 {\n        return []int{}\n    }\n    m := make(map[int]bool)\n    for\
    \ _, v := range l1 {\n        m[v] = true\n    }\n    var r []int\n    for _,\
    \ v := range l2 {\n        if m[v] {\n            r = append(r, v)\n        }\n\
    \    }\n    return r\n}\n", "    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    var result []int\n    for _, v := range\
    \ l2 {\n        if m[v] {\n            result = append(result, v)\n        }\n\
    \    }\n    return result\n}\n", "    var result []int\n    for _, v1 := range\
    \ l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n         \
    \       result = append(result, v1)\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, v1 := range l1 {\n        for\
    \ _, v2 := range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, i := range l1 {\n        for _, j := range l2 {\n        \
    \    if i == j {\n                result = append(result, i)\n            }\n\
    \        }\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n   \
    \ for _, v := range l1 {\n        m[v] = true\n    }\n    var result []int\n \
    \   for _, v := range l2 {\n        if m[v] {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    var result []int\n\
    \    for _, v := range l2 {\n        if m[v] {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2\
    \ {\n                result = append(result, v1)\n            }\n        }\n \
    \   }\n    return result\n}\n", "    var result []int\n    for _, v1 := range\
    \ l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n         \
    \       result = append(result, v1)\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, v1 := range l1 {\n        for\
    \ _, v2 := range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    for _, v := range\
    \ l2 {\n        m[v] = true\n    }\n    var result []int\n    for k, _ := range\
    \ m {\n        result = append(result, k)\n    }\n    return result\n}\n", " \
    \   var result []int\n    for _, v1 := range l1 {\n        for _, v2 := range\
    \ l2 {\n            if v1 == v2 {\n                result = append(result, v1)\n\
    \            }\n        }\n    }\n    return result\n}\n", "    // TODO: implement\n\
    \    return []int{}\n}\n", "    var result []int\n    for _, v1 := range l1 {\n\
    \        for _, v2 := range l2 {\n            if v1 == v2 {\n                result\
    \ = append(result, v1)\n            }\n        }\n    }\n    return result\n}\n",
  "    // TODO: Implement me!\n    return []int{}\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    var result []int\n\
    \    for _, v := range l2 {\n        if m[v] {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2\
    \ {\n                result = append(result, v1)\n            }\n        }\n \
    \   }\n    return result\n}\n", "    var result []int\n    for _, v1 := range\
    \ l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n         \
    \       result = append(result, v1)\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    // TODO: Implement me.\n    return []int{}\n}\n", "    var\
    \ result []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n\
    \            if v1 == v2 {\n                result = append(result, v1)\n    \
    \        }\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if\
    \ v1 == v2 {\n                result = append(result, v1)\n            }\n   \
    \     }\n    }\n    return result\n}\n", "    var result []int\n    for _, v1\
    \ := range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n\
    \                result = append(result, v1)\n            }\n        }\n    }\n\
    \    return result\n}\n", "    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    var result []int\n    for _, v := range\
    \ l2 {\n        if m[v] {\n            result = append(result, v)\n        }\n\
    \    }\n    return result\n}\n", "    m := make(map[int]bool)\n    for _, v :=\
    \ range l1 {\n        m[v] = true\n    }\n    r := make([]int, 0)\n    for _,\
    \ v := range l2 {\n        if m[v] {\n            r = append(r, v)\n        }\n\
    \    }\n    return r\n}\n", "    var result []int\n    for _, v1 := range l1 {\n\
    \        for _, v2 := range l2 {\n            if v1 == v2 {\n                result\
    \ = append(result, v1)\n            }\n        }\n    }\n    return result\n}\n",
  "    // TODO - Add your code here\n    return []int{}\n}\n", "    var result []int\n\
    \    for _, i := range l1 {\n        for _, j := range l2 {\n            if i\
    \ == j {\n                result = append(result, i)\n            }\n        }\n\
    \    }\n    return result\n}\n", "    m := make(map[int]bool)\n    for _, v :=\
    \ range l1 {\n        m[v] = true\n    }\n    var r []int\n    for _, v := range\
    \ l2 {\n        if m[v] {\n            r = append(r, v)\n        }\n    }\n  \
    \  return r\n}\n", "    m := make(map[int]int)\n    for _, v := range l1 {\n \
    \       m[v] = 1\n    }\n    for _, v := range l2 {\n        if m[v] == 1 {\n\
    \            m[v] = 2\n        }\n    }\n    var res []int\n    for k, v := range\
    \ m {\n        if v == 2 {\n            res = append(res, k)\n        }\n    }\n\
    \    return res\n}\n", "    var result []int\n    for _, v1 := range l1 {\n  \
    \      for _, v2 := range l2 {\n            if v1 == v2 {\n                result\
    \ = append(result, v1)\n            }\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2\
    \ {\n            if v1 == v2 {\n                result = append(result, v1)\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for i := 0; i < len(l1); i++ {\n        for j := 0; j < len(l2); j++ {\n\
    \            if l1[i] == l2[j] {\n                result = append(result, l1[i])\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if\
    \ v1 == v2 {\n                result = append(result, v1)\n            }\n   \
    \     }\n    }\n    return result\n}\n", "    // TODO: Implement me!\n    return\
    \ []int{}\n}\n", "    var result []int\n    for _, v1 := range l1 {\n        for\
    \ _, v2 := range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n      \
    \      if v1 == v2 {\n                result = append(result, v1)\n          \
    \  }\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2\
    \ {\n                result = append(result, v1)\n            }\n        }\n \
    \   }\n    return result\n}\n", "    if len(l1) == 0 || len(l2) == 0 {\n     \
    \   return []int{}\n    }\n    if len(l1) == 1 && len(l2) == 1 {\n        if l1[0]\
    \ == l2[0] {\n            return l1\n        }\n        return []int{}\n    }\n\
    \    if len(l1) == 1 {\n        for _, v := range l2 {\n            if v == l1[0]\
    \ {\n                return l1\n            }\n        }\n        return []int{}\n\
    \    }\n    if len(l2) == 1 {\n        for _, v := range l1 {\n            if\
    \ v == l2[0] {\n                return l2\n            }\n        }\n        return\
    \ []int{}\n    }\n    if l1[0] == l2[0] {\n        return append([]int{l1[0]},\
    \ common(l1[1:], l2[1:])...)\n    }\n    if l1[0] < l2[0] {\n        return common(l1[1:],\
    \ l2)\n    }\n    return common(l1, l2[1:])\n}\n", "    // TODO: implement\n \
    \   return []int{}\n}\n", "    var result []int\n    for _, v1 := range l1 {\n\
    \        for _, v2 := range l2 {\n            if v1 == v2 {\n                result\
    \ = append(result, v1)\n            }\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2\
    \ {\n            if v1 == v2 {\n                result = append(result, v1)\n\
    \            }\n        }\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    var result []int\n\
    \    for _, v := range l2 {\n        if m[v] {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var common []int\n    for\
    \ i := 0; i < len(l1); i++ {\n        for j := 0; j < len(l2); j++ {\n       \
    \     if l1[i] == l2[j] {\n                common = append(common, l1[i])\n  \
    \          }\n        }\n    }\n    return common\n}\n", "    var result []int\n\
    \    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if\
    \ v1 == v2 {\n                result = append(result, v1)\n            }\n   \
    \     }\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n    for\
    \ _, v := range l1 {\n        m[v] = true\n    }\n    var result []int\n    for\
    \ _, v := range l2 {\n        if m[v] {\n            result = append(result, v)\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    var i1,\
    \ i2 int\n    for i1 < len(l1) && i2 < len(l2) {\n        if l1[i1] == l2[i2]\
    \ {\n            result = append(result, l1[i1])\n            i1++\n         \
    \   i2++\n        } else if l1[i1] < l2[i2] {\n            i1++\n        } else\
    \ {\n            i2++\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n      \
    \      if v1 == v2 {\n                result = append(result, v1)\n          \
    \  }\n        }\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    var res []int\n \
    \   for _, v := range l2 {\n        if m[v] {\n            res = append(res, v)\n\
    \        }\n    }\n    return res\n}\n", "    // TODO: Implement me!\n    return\
    \ []int{}\n}\n", "    var result []int\n    for _, v1 := range l1 {\n        for\
    \ _, v2 := range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    // TODO:\
    \ Implement me!\n    return []int{}\n}\n", "    var result []int\n    for _, v1\
    \ := range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n\
    \                result = append(result, v1)\n            }\n        }\n    }\n\
    \    return result\n}\n", "    var result []int\n    for _, v1 := range l1 {\n\
    \        for _, v2 := range l2 {\n            if v1 == v2 {\n                result\
    \ = append(result, v1)\n            }\n        }\n    }\n    return result\n}\n",
  "    // TODO\n    return []int{}\n}\n", "    var r []int\n    for _, v1 := range\
    \ l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n         \
    \       r = append(r, v1)\n            }\n        }\n    }\n    return r\n}\n",
  "    var result []int\n    var i, j int\n    for i < len(l1) && j < len(l2) {\n\
    \        if l1[i] == l2[j] {\n            result = append(result, l1[i])\n   \
    \         i++\n            j++\n        } else if l1[i] < l2[j] {\n          \
    \  i++\n        } else {\n            j++\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v1 := range l1 {\n        for _, v2 :=\
    \ range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n      \
    \      if v1 == v2 {\n                result = append(result, v1)\n          \
    \  }\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2\
    \ {\n                result = append(result, v1)\n            }\n        }\n \
    \   }\n    return result\n}\n", "    var result []int\n    for _, v1 := range\
    \ l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n         \
    \       result = append(result, v1)\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, v1 := range l1 {\n        for\
    \ _, v2 := range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n      \
    \      if v1 == v2 {\n                result = append(result, v1)\n          \
    \  }\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2\
    \ {\n                result = append(result, v1)\n            }\n        }\n \
    \   }\n    return result\n}\n", "    var result []int\n    for _, v1 := range\
    \ l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n         \
    \       result = append(result, v1)\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    m := make(map[int]bool)\n    for _, v := range l1 {\n   \
    \     m[v] = true\n    }\n    var result []int\n    for _, v := range l2 {\n \
    \       if m[v] {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n", "    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    var r []int\n    for _, v := range l2\
    \ {\n        if m[v] {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\n", "    var result []int\n    for _, v1 := range l1 {\n        for _,\
    \ v2 := range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n\
    \        m[v]++\n    }\n    var r []int\n    for k, v := range m {\n        if\
    \ v == 2 {\n            r = append(r, k)\n        }\n    }\n    return r\n}\n",
  "    var result []int\n    for i := 0; i < len(l1); i++ {\n        for j := 0; j\
    \ < len(l2); j++ {\n            if l1[i] == l2[j] {\n                result =\
    \ append(result, l1[i])\n            }\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for i := 0; i < len(l1); i++ {\n        for j\
    \ := 0; j < len(l2); j++ {\n            if l1[i] == l2[j] {\n                result\
    \ = append(result, l1[i])\n            }\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v1 := range l1 {\n        for _, v2 :=\
    \ range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    if len(l1)\
    \ == 0 || len(l2) == 0 {\n        return []int{}\n    }\n    var r []int\n   \
    \ for _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if v1\
    \ == v2 {\n                r = append(r, v1)\n            }\n        }\n    }\n\
    \    return r\n}\n", "    m := make(map[int]bool)\n    for _, v := range l1 {\n\
    \        m[v] = true\n    }\n    var result []int\n    for _, v := range l2 {\n\
    \        if m[v] {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n", "    var result []int\n    for _, v1 := range l1 {\n\
    \        for _, v2 := range l2 {\n            if v1 == v2 {\n                result\
    \ = append(result, v1)\n            }\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2\
    \ {\n            if v1 == v2 {\n                result = append(result, v1)\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if\
    \ v1 == v2 {\n                result = append(result, v1)\n            }\n   \
    \     }\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n    for\
    \ _, v := range l1 {\n        m[v] = true\n    }\n    var r []int\n    for _,\
    \ v := range l2 {\n        if m[v] {\n            r = append(r, v)\n        }\n\
    \    }\n    return r\n}\n", "    var r []int\n    for _, v1 := range l1 {\n  \
    \      for _, v2 := range l2 {\n            if v1 == v2 {\n                r =\
    \ append(r, v1)\n            }\n        }\n    }\n    return r\n}\n", "    var\
    \ result []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n\
    \            if v1 == v2 {\n                result = append(result, v1)\n    \
    \        }\n        }\n    }\n    return result\n}\n", "    if len(l1) == 0 ||\
    \ len(l2) == 0 {\n        return []int{}\n    }\n    if len(l1) > len(l2) {\n\
    \        l1, l2 = l2, l1\n    }\n    m := make(map[int]int)\n    for _, v := range\
    \ l1 {\n        m[v] = 1\n    }\n    for _, v := range l2 {\n        if _, ok\
    \ := m[v]; ok {\n            m[v] = 2\n        }\n    }\n    var r []int\n   \
    \ for k, v := range m {\n        if v == 2 {\n            r = append(r, k)\n \
    \       }\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n    for _,\
    \ v := range l1 {\n        m[v] = true\n    }\n    var res []int\n    for _, v\
    \ := range l2 {\n        if m[v] {\n            res = append(res, v)\n       \
    \ }\n    }\n    return res\n}\n", "    var result []int\n    for _, v1 := range\
    \ l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n         \
    \       result = append(result, v1)\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, v1 := range l1 {\n        for\
    \ _, v2 := range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n      \
    \      if v1 == v2 {\n                result = append(result, v1)\n          \
    \  }\n        }\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    var r []int\n   \
    \ for _, v := range l2 {\n        if m[v] {\n            r = append(r, v)\n  \
    \      }\n    }\n    return r\n}\n", "    m := make(map[int]int)\n    for _, v\
    \ := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]++\n\
    \    }\n    var result []int\n    for k, v := range m {\n        if v > 1 {\n\
    \            result = append(result, k)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v1 := range l1 {\n        for _, v2 :=\
    \ range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for i := 0; i < len(l1); i++ {\n        for j := 0; j < len(l2);\
    \ j++ {\n            if l1[i] == l2[j] {\n                result = append(result,\
    \ l1[i])\n            }\n        }\n    }\n    return result\n}\n", "    // TODO\n\
    \    return []int{}\n}\n", "    var result []int\n    for _, v1 := range l1 {\n\
    \        for _, v2 := range l2 {\n            if v1 == v2 {\n                result\
    \ = append(result, v1)\n            }\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2\
    \ {\n            if v1 == v2 {\n                result = append(result, v1)\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if\
    \ v1 == v2 {\n                result = append(result, v1)\n            }\n   \
    \     }\n    }\n    return result\n}\n", "    var result []int\n    var i, j int\n\
    \    for i < len(l1) && j < len(l2) {\n        if l1[i] == l2[j] {\n         \
    \   result = append(result, l1[i])\n            i++\n            j++\n       \
    \ } else if l1[i] < l2[j] {\n            i++\n        } else {\n            j++\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for _,\
    \ v1 := range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n\
    \                result = append(result, v1)\n            }\n        }\n    }\n\
    \    return result\n}\n", "    var result []int\n    for _, v1 := range l1 {\n\
    \        for _, v2 := range l2 {\n            if v1 == v2 {\n                result\
    \ = append(result, v1)\n            }\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2\
    \ {\n            if v1 == v2 {\n                result = append(result, v1)\n\
    \            }\n        }\n    }\n    return result\n}\n", "    // TODO\n    return\
    \ []int{}\n}\n", "    var result []int\n    for _, v1 := range l1 {\n        for\
    \ _, v2 := range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n      \
    \      if v1 == v2 {\n                result = append(result, v1)\n          \
    \  }\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, i := range l1 {\n        for _, j := range l2 {\n            if i == j {\n\
    \                result = append(result, i)\n            }\n        }\n    }\n\
    \    return result\n}\n", "    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    r := make([]int, 0)\n    for _, v := range\
    \ l2 {\n        if m[v] {\n            r = append(r, v)\n        }\n    }\n  \
    \  return r\n}\n", "    // TODO\n    return []int{}\n}\n", "    var result []int\n\
    \    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if\
    \ v1 == v2 {\n                result = append(result, v1)\n            }\n   \
    \     }\n    }\n    return result\n}\n", "    // TODO: Implement me!\n    return\
    \ []int{}\n}\n", "    m := make(map[int]bool)\n    for _, v := range l1 {\n  \
    \      m[v] = true\n    }\n    ret := make([]int, 0)\n    for _, v := range l2\
    \ {\n        if m[v] {\n            ret = append(ret, v)\n        }\n    }\n \
    \   return ret\n}\n", "    var result []int\n    for _, v1 := range l1 {\n   \
    \     for _, v2 := range l2 {\n            if v1 == v2 {\n                result\
    \ = append(result, v1)\n            }\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2\
    \ {\n            if v1 == v2 {\n                result = append(result, v1)\n\
    \            }\n        }\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    var r []int\n   \
    \ for _, v := range l2 {\n        if m[v] {\n            r = append(r, v)\n  \
    \      }\n    }\n    return r\n}\n", "    // TODO: Implement me!\n    return []int{}\n\
    }\n", "    m := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] =\
    \ true\n    }\n    var r []int\n    for _, v := range l2 {\n        if m[v] {\n\
    \            r = append(r, v)\n        }\n    }\n    return r\n}\n", "    var\
    \ common []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n\
    \            if v1 == v2 {\n                common = append(common, v1)\n    \
    \        }\n        }\n    }\n    return common\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range l1 {\n        m[v] = 1\n    }\n    for _, v := range l2\
    \ {\n        m[v] = m[v] + 1\n    }\n    var r []int\n    for k, v := range m\
    \ {\n        if v == 2 {\n            r = append(r, k)\n        }\n    }\n   \
    \ return r\n}\n", "    m := make(map[int]bool)\n    for _, v := range l1 {\n \
    \       m[v] = true\n    }\n    var r []int\n    for _, v := range l2 {\n    \
    \    if m[v] {\n            r = append(r, v)\n        }\n    }\n    return r\n\
    }\n", "    var result []int\n    for _, v1 := range l1 {\n        for _, v2 :=\
    \ range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n      \
    \      if v1 == v2 {\n                result = append(result, v1)\n          \
    \  }\n        }\n    }\n    return result\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n\
    \        m[v]++\n    }\n    var r []int\n    for k, v := range m {\n        if\
    \ v > 1 {\n            r = append(r, k)\n        }\n    }\n    return r\n}\n",
  "    var result []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2\
    \ {\n            if v1 == v2 {\n                result = append(result, v1)\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if\
    \ v1 == v2 {\n                result = append(result, v1)\n            }\n   \
    \     }\n    }\n    return result\n}\n", "    var result []int\n    for _, v1\
    \ := range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n\
    \                result = append(result, v1)\n            }\n        }\n    }\n\
    \    return result\n}\n", "    var result []int\n    for i := 0; i < len(l1);\
    \ i++ {\n        for j := 0; j < len(l2); j++ {\n            if l1[i] == l2[j]\
    \ {\n                result = append(result, l1[i])\n            }\n        }\n\
    \    }\n    return result\n}\n", "    var result []int\n    for _, v1 := range\
    \ l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n         \
    \       result = append(result, v1)\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, v1 := range l1 {\n        for\
    \ _, v2 := range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n      \
    \      if v1 == v2 {\n                result = append(result, v1)\n          \
    \  }\n        }\n    }\n    return result\n}\n", "    result := []int{}\n    for\
    \ _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2\
    \ {\n                result = append(result, v1)\n            }\n        }\n \
    \   }\n    return result\n}\n", "    var result []int\n    for _, v1 := range\
    \ l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n         \
    \       result = append(result, v1)\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    // TODO: Implement this function.\n    return []int{}\n}\n",
  "    var result []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2\
    \ {\n            if v1 == v2 {\n                result = append(result, v1)\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var common []int\n\
    \    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if\
    \ v1 == v2 {\n                common = append(common, v1)\n            }\n   \
    \     }\n    }\n    return common\n}\n", "    var result []int\n    for _, v1\
    \ := range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n\
    \                result = append(result, v1)\n            }\n        }\n    }\n\
    \    return result\n}\n", "    var result []int\n    for _, i := range l1 {\n\
    \        for _, j := range l2 {\n            if i == j {\n                result\
    \ = append(result, i)\n            }\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    var i, j int\n    for i < len(l1) && j < len(l2) {\n\
    \        if l1[i] == l2[j] {\n            result = append(result, l1[i])\n   \
    \         i++\n            j++\n        } else if l1[i] < l2[j] {\n          \
    \  i++\n        } else {\n            j++\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v1 := range l1 {\n        for _, v2 :=\
    \ range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n      \
    \      if v1 == v2 {\n                result = append(result, v1)\n          \
    \  }\n        }\n    }\n    return result\n}\n", "    var res []int\n    for _,\
    \ v1 := range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n\
    \                res = append(res, v1)\n            }\n        }\n    }\n    return\
    \ res\n}\n", "    var common []int\n    for _, v1 := range l1 {\n        for _,\
    \ v2 := range l2 {\n            if v1 == v2 {\n                common = append(common,\
    \ v1)\n            }\n        }\n    }\n    return common\n}\n", "    var r []int\n\
    \    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if\
    \ v1 == v2 {\n                r = append(r, v1)\n            }\n        }\n  \
    \  }\n    return r\n}\n", "    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    var r []int\n    for _, v := range l2\
    \ {\n        if m[v] {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\n", "    // TODO: Implement me!\n    return []int{}\n}\n", "    var result\
    \ []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n      \
    \      if v1 == v2 {\n                result = append(result, v1)\n          \
    \  }\n        }\n    }\n    return result\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n\
    \        m[v]++\n    }\n    var result []int\n    for k, v := range m {\n    \
    \    if v == 2 {\n            result = append(result, k)\n        }\n    }\n \
    \   return result\n}\n", "    var result []int\n    for _, v1 := range l1 {\n\
    \        for _, v2 := range l2 {\n            if v1 == v2 {\n                result\
    \ = append(result, v1)\n            }\n        }\n    }\n    return result\n}\n",
  "    // TODO: implement\n    return nil\n}\n", "    var result []int\n    for _,\
    \ v1 := range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n\
    \                result = append(result, v1)\n            }\n        }\n    }\n\
    \    return result\n}\n", "    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        m[v] =\
    \ true\n    }\n    var l []int\n    for k, _ := range m {\n        l = append(l,\
    \ k)\n    }\n    return l\n}\n", "    var result []int\n    for _, e1 := range\
    \ l1 {\n        for _, e2 := range l2 {\n            if e1 == e2 {\n         \
    \       result = append(result, e1)\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, v1 := range l1 {\n        for\
    \ _, v2 := range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    var r []int\n   \
    \ for _, v := range l2 {\n        if m[v] {\n            r = append(r, v)\n  \
    \      }\n    }\n    return r\n}\n", "    var result []int\n    for _, v1 := range\
    \ l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n         \
    \       result = append(result, v1)\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, v1 := range l1 {\n        for\
    \ _, v2 := range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n      \
    \      if v1 == v2 {\n                result = append(result, v1)\n          \
    \  }\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2\
    \ {\n                result = append(result, v1)\n            }\n        }\n \
    \   }\n    return result\n}\n", "    var result []int\n    for _, v1 := range\
    \ l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n         \
    \       result = append(result, v1)\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    m := make(map[int]bool)\n    for _, v := range l1 {\n   \
    \     m[v] = true\n    }\n    var result []int\n    for _, v := range l2 {\n \
    \       if m[v] {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n", "    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    var result []int\n    for _, v := range\
    \ l2 {\n        if m[v] {\n            result = append(result, v)\n        }\n\
    \    }\n    return result\n}\n", "    var result []int\n    for _, v1 := range\
    \ l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n         \
    \       result = append(result, v1)\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, v1 := range l1 {\n        for\
    \ _, v2 := range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    var common []int\n\
    \    for _, v := range l2 {\n        if m[v] {\n            common = append(common,\
    \ v)\n        }\n    }\n    return common\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    var result []int\n\
    \    for _, v := range l2 {\n        if m[v] {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2\
    \ {\n                result = append(result, v1)\n            }\n        }\n \
    \   }\n    return result\n}\n", "    var result []int\n    for _, v1 := range\
    \ l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n         \
    \       result = append(result, v1)\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    var r []int\n    for _, v1 := range l1 {\n        for _,\
    \ v2 := range l2 {\n            if v1 == v2 {\n                r = append(r, v1)\n\
    \            }\n        }\n    }\n    return r\n}\n", "    var result []int\n\
    \    for i := 0; i < len(l1); i++ {\n        for j := 0; j < len(l2); j++ {\n\
    \            if l1[i] == l2[j] {\n                result = append(result, l1[i])\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, i := range l1 {\n        for _, j := range l2 {\n            if i\
    \ == j {\n                result = append(result, i)\n            }\n        }\n\
    \    }\n    return result\n}\n", "    m := make(map[int]bool)\n    for _, v :=\
    \ range l1 {\n        m[v] = true\n    }\n    var r []int\n    for _, v := range\
    \ l2 {\n        if m[v] {\n            r = append(r, v)\n        }\n    }\n  \
    \  return r\n}\n", "    var result []int\n    for _, v1 := range l1 {\n      \
    \  for _, v2 := range l2 {\n            if v1 == v2 {\n                result\
    \ = append(result, v1)\n            }\n        }\n    }\n    return result\n}\n",
  "    m := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] = true\n\
    \    }\n    var result []int\n    for _, v := range l2 {\n        if m[v] {\n\
    \            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v1 := range l1 {\n        for _, v2 :=\
    \ range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n      \
    \      if v1 == v2 {\n                result = append(result, v1)\n          \
    \  }\n        }\n    }\n    return result\n}\n", "    // TODO: Implement me!\n\
    \    return []int{}\n}\n", "    var result []int\n    for _, v1 := range l1 {\n\
    \        for _, v2 := range l2 {\n            if v1 == v2 {\n                result\
    \ = append(result, v1)\n            }\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2\
    \ {\n            if v1 == v2 {\n                result = append(result, v1)\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if\
    \ v1 == v2 {\n                result = append(result, v1)\n            }\n   \
    \     }\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n    for\
    \ _, v := range l1 {\n        m[v] = true\n    }\n    var result []int\n    for\
    \ _, v := range l2 {\n        if m[v] {\n            result = append(result, v)\n\
    \        }\n    }\n    return result\n}\n", "    // TODO\n    return []int{}\n\
    }\n", "    m := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] =\
    \ true\n    }\n    var result []int\n    for _, v := range l2 {\n        if m[v]\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for i := 0; i < len(l1); i++ {\n        for j\
    \ := 0; j < len(l2); j++ {\n            if l1[i] == l2[j] {\n                result\
    \ = append(result, l1[i])\n            }\n        }\n    }\n    return result\n\
    }\n", "    m := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] =\
    \ true\n    }\n    var result []int\n    for _, v := range l2 {\n        if m[v]\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v1 := range l1 {\n        for _, v2 :=\
    \ range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n      \
    \      if v1 == v2 {\n                result = append(result, v1)\n          \
    \  }\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2\
    \ {\n                result = append(result, v1)\n            }\n        }\n \
    \   }\n    return result\n}\n", "    var result []int\n    for _, v1 := range\
    \ l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n         \
    \       result = append(result, v1)\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, v1 := range l1 {\n        for\
    \ _, v2 := range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    // TODO\n\
    \    return []int{}\n}\n", "    var result []int\n    for _, v1 := range l1 {\n\
    \        for _, v2 := range l2 {\n            if v1 == v2 {\n                result\
    \ = append(result, v1)\n            }\n        }\n    }\n    return result\n}\n",
  "    var common []int\n    var i, j int\n    for i < len(l1) && j < len(l2) {\n\
    \        if l1[i] == l2[j] {\n            common = append(common, l1[i])\n   \
    \         i++\n            j++\n        } else if l1[i] < l2[j] {\n          \
    \  i++\n        } else {\n            j++\n        }\n    }\n    return common\n\
    }\n", "    var ret []int\n    for _, v1 := range l1 {\n        for _, v2 := range\
    \ l2 {\n            if v1 == v2 {\n                ret = append(ret, v1)\n   \
    \         }\n        }\n    }\n    return ret\n}\n", "    result := []int{}\n\
    \    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if\
    \ v1 == v2 {\n                result = append(result, v1)\n            }\n   \
    \     }\n    }\n    return result\n}\n", "    var result []int\n    for _, v1\
    \ := range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n\
    \                result = append(result, v1)\n            }\n        }\n    }\n\
    \    return result\n}\n", "    var result []int\n    for _, v1 := range l1 {\n\
    \        for _, v2 := range l2 {\n            if v1 == v2 {\n                result\
    \ = append(result, v1)\n            }\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2\
    \ {\n            if v1 == v2 {\n                result = append(result, v1)\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, i := range l1 {\n        for _, j := range l2 {\n            if i\
    \ == j {\n                result = append(result, i)\n            }\n        }\n\
    \    }\n    return result\n}\n", "    var result []int\n    for _, v1 := range\
    \ l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n         \
    \       result = append(result, v1)\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, i := range l1 {\n        for\
    \ _, j := range l2 {\n            if i == j {\n                result = append(result,\
    \ i)\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n      \
    \      if v1 == v2 {\n                result = append(result, v1)\n          \
    \  }\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, i := range l1 {\n        for _, j := range l2 {\n            if i == j {\n\
    \                result = append(result, i)\n            }\n        }\n    }\n\
    \    return result\n}\n", "    var result []int\n    for _, v1 := range l1 {\n\
    \        for _, v2 := range l2 {\n            if v1 == v2 {\n                result\
    \ = append(result, v1)\n            }\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2\
    \ {\n            if v1 == v2 {\n                result = append(result, v1)\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var res []int\n\
    \    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if\
    \ v1 == v2 {\n                res = append(res, v1)\n            }\n        }\n\
    \    }\n    return res\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
