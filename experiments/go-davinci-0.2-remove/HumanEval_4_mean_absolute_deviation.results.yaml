language: go_test.go
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var abs_diff_sum float64\
    \ = 0\n    var abs_diff_mean float64 = 0\n\n    for _, num := range numbers {\n\
    \        sum += num\n    }\n    mean = sum / float64(len(numbers))\n\n    for\
    \ _, num := range numbers {\n        abs_diff = num - mean\n        if abs_diff\
    \ < 0 {\n            abs_diff = -abs_diff\n        }\n        abs_diff_sum +=\
    \ abs_diff\n    }\n    abs_diff_mean = abs_diff_sum / float64(len(numbers))\n\n\
    \    return abs_diff_mean\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvslspn90_test.go:16:9: mad declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var abs_deviations []float64 = make([]float64, len(numbers))\n\n    // Calculate\
    \ the mean of the dataset\n    for _, number := range numbers {\n        sum +=\
    \ number\n    }\n    mean = sum / float64(len(numbers))\n\n    // Calculate the\
    \ absolute deviation of each element from the mean\n    for i, number := range\
    \ numbers {\n        abs_deviations[i] = number - mean\n        if abs_deviations[i]\
    \ < 0 {\n            abs_deviations[i] *= -1\n        }\n    }\n\n    // Calculate\
    \ the mean of the absolute deviations\n    sum = 0\n    for _, abs_deviation :=\
    \ range abs_deviations {\n        sum += abs_deviation\n    }\n    return sum\
    \ / float64(len(abs_deviations))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074039
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate mean of dataset\n    var sum float64\
    \ = 0\n    for _, num := range numbers {\n        sum += num\n    }\n    mean\
    \ := sum / float64(len(numbers))\n\n    // Calculate absolute difference between\
    \ each element and mean\n    var abs_diff_sum float64 = 0\n    for _, num := range\
    \ numbers {\n        abs_diff_sum += abs(num - mean)\n    }\n\n    // Return average\
    \ absolute difference\n    return abs_diff_sum / float64(len(numbers))\n}\n\n\
    func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe5bomrr5_test.go:24:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var mad float64 = 0.0\n    var count int = 0\n\n    for _, number := range\
    \ numbers {\n        sum += number\n        count++\n    }\n\n    mean = sum /\
    \ float64(count)\n\n    for _, number := range numbers {\n        mad += math.Abs(number\
    \ - mean)\n    }\n\n    return mad / float64(count)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk5i0lify_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var mad float64 = 0.0\n    var count int = 0\n\n    // Calculate the mean\n\
    \    for _, number := range numbers {\n        sum += number\n        count++\n\
    \    }\n    mean = sum / float64(count)\n\n    // Calculate the MAD\n    for _,\
    \ number := range numbers {\n        mad += (number - mean)\n    }\n    mad =\
    \ mad / float64(count)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpott1g_l8_test.go:50: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpott1g_l8_test.go:50:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpott1g_l8_test.go:50: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074039
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the input numbers\n    mean\
    \ := 0.0\n    for _, number := range numbers {\n        mean += number\n    }\n\
    \    mean /= float64(len(numbers))\n\n    // Calculate the absolute difference\
    \ between each number and the mean\n    // and sum them up\n    sum_of_absolute_differences\
    \ := 0.0\n    for _, number := range numbers {\n        sum_of_absolute_differences\
    \ += math.Abs(number - mean)\n    }\n\n    // Return the average of the absolute\
    \ differences\n    return sum_of_absolute_differences / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqr0gwbk7_test.go:25:40: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var count float64 =\
    \ 0\n\n    // Calculate mean\n    for _, number := range numbers {\n        sum\
    \ += number\n        count += 1\n    }\n    mean = sum / count\n\n    // Calculate\
    \ MAD\n    for _, number := range numbers {\n        abs_diff += abs(number -\
    \ mean)\n    }\n    mad = abs_diff / count\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxytbfnwk_test.go:29:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate mean of the dataset\n    var sum float64\
    \ = 0\n    for _, number := range numbers {\n        sum += number\n    }\n  \
    \  mean := sum / float64(len(numbers))\n\n    // Calculate absolute difference\
    \ between each element and the mean\n    var sum_absolute_difference float64 =\
    \ 0\n    for _, number := range numbers {\n        sum_absolute_difference +=\
    \ abs(number - mean)\n    }\n\n    // Calculate mean of absolute differences\n\
    \    mean_absolute_deviation := sum_absolute_difference / float64(len(numbers))\n\
    \n    return mean_absolute_deviation\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7v1jirf6_test.go:24:36: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    sum := 0.0\n    for _, number := range numbers {\n\
    \        sum += number\n    }\n    mean := sum / float64(len(numbers))\n    sum\
    \ = 0.0\n    for _, number := range numbers {\n        sum += math.Abs(number\
    \ - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgdrvns5i_test.go:21:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the dataset\n    mean :=\
    \ 0.0\n    for _, number := range numbers {\n        mean += number\n    }\n \
    \   mean /= float64(len(numbers))\n\n    // Calculate the absolute difference\
    \ between each element and the mean\n    // and sum them up\n    sum_absolute_deviation\
    \ := 0.0\n    for _, number := range numbers {\n        sum_absolute_deviation\
    \ += math.Abs(number - mean)\n    }\n\n    // Return the average absolute deviation\n\
    \    return sum_absolute_deviation / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_rjqpwja_test.go:25:35: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the dataset\n    var sum\
    \ float64 = 0\n    for _, number := range numbers {\n        sum += number\n \
    \   }\n    mean := sum / float64(len(numbers))\n\n    // Calculate the absolute\
    \ difference between each element and the mean\n    var abs_differences []float64\n\
    \    for _, number := range numbers {\n        abs_differences = append(abs_differences,\
    \ number - mean)\n    }\n\n    // Calculate the mean of the absolute differences\n\
    \    var abs_differences_sum float64 = 0\n    for _, abs_difference := range abs_differences\
    \ {\n        abs_differences_sum += abs_difference\n    }\n    mean_absolute_deviation\
    \ := abs_differences_sum / float64(len(abs_differences))\n\n    return mean_absolute_deviation\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpbm3qu8vn_test.go:52: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpbm3qu8vn_test.go:52:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpbm3qu8vn_test.go:52: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074039
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var diff float64 = 0\n    var abs_diff float64 = 0\n\
    \n    // Calculate mean\n    for _, num := range numbers {\n        sum += num\n\
    \    }\n    mean = sum / float64(len(numbers))\n\n    // Calculate MAD\n    for\
    \ _, num := range numbers {\n        diff = num - mean\n        abs_diff = diff\n\
    \        if diff < 0 {\n            abs_diff = -diff\n        }\n        mad +=\
    \ abs_diff\n    }\n    mad = mad / float64(len(numbers))\n\n    return mad\n}\n\
    \nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074039
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the input numbers\n    mean\
    \ := 0.0\n    for _, number := range numbers {\n        mean += number\n    }\n\
    \    mean /= float64(len(numbers))\n\n    // Calculate the absolute difference\
    \ between each number and the mean\n    // and sum them up\n    sum_absolute_difference\
    \ := 0.0\n    for _, number := range numbers {\n        sum_absolute_difference\
    \ += math.Abs(number - mean)\n    }\n\n    // Calculate the mean absolute deviation\n\
    \    return sum_absolute_difference / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt9xqb3ox_test.go:25:36: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var n int = len(numbers)\n\
    \n    // Calculate mean\n    for _, num := range numbers {\n        sum += num\n\
    \    }\n    mean = sum / float64(n)\n\n    // Calculate MAD\n    for _, num :=\
    \ range numbers {\n        abs_diff += math.Abs(num - mean)\n    }\n    mad =\
    \ abs_diff / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsk___wgf_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var n int = len(numbers)\n\
    \n    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / float64(n)\n\n    for _, number := range numbers {\n        abs_diff\
    \ += math.Abs(number - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return\
    \ mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsoczrr_v_test.go:26:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the dataset\n    mean :=\
    \ 0.0\n    for _, number := range numbers {\n        mean += number\n    }\n \
    \   mean /= float64(len(numbers))\n\n    // Calculate the absolute difference\
    \ between each element and the mean\n    // and sum them up\n    sum_of_abs_diff\
    \ := 0.0\n    for _, number := range numbers {\n        sum_of_abs_diff += math.Abs(number\
    \ - mean)\n    }\n\n    // Return the mean absolute deviation\n    return sum_of_abs_diff\
    \ / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcbeb9wrd_test.go:25:28: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var count int = len(numbers)\n\
    \n    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / float64(count)\n\n    for _, number := range numbers {\n        abs_diff\
    \ += abs(number - mean)\n    }\n    mad = abs_diff / float64(count)\n\n    return\
    \ mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptr1loekw_test.go:26:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_dev float64 = 0\n    var abs_dev_sum float64\
    \ = 0\n    var abs_dev_mean float64 = 0\n\n    for _, num := range numbers {\n\
    \        sum += num\n    }\n    mean = sum / float64(len(numbers))\n\n    for\
    \ _, num := range numbers {\n        abs_dev = num - mean\n        if abs_dev\
    \ < 0 {\n            abs_dev = -abs_dev\n        }\n        abs_dev_sum += abs_dev\n\
    \    }\n    abs_dev_mean = abs_dev_sum / float64(len(numbers))\n\n    return abs_dev_mean\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2est46zy_test.go:16:9: mad declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var abs_deviation float64 = 0.0\n    var mean_absolute_deviation float64\
    \ = 0.0\n\n    for _, number := range numbers {\n        sum += number\n    }\n\
    \    mean = sum / float64(len(numbers))\n\n    for _, number := range numbers\
    \ {\n        abs_deviation += abs(number - mean)\n    }\n    mean_absolute_deviation\
    \ = abs_deviation / float64(len(numbers))\n\n    return mean_absolute_deviation\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl6f5awbt_test.go:25:26: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var deviation float64 = 0\n    var mad float64 = 0\n\n    for _, number :=\
    \ range numbers {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\
    \n    for _, number := range numbers {\n        deviation += abs(number - mean)\n\
    \    }\n    mad = deviation / float64(len(numbers))\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprinoa6su_test.go:25:22: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var i int = 0\n\n  \
    \  for i = 0; i < len(numbers); i++ {\n        sum += numbers[i]\n    }\n    mean\
    \ = sum / float64(len(numbers))\n\n    for i = 0; i < len(numbers); i++ {\n  \
    \      abs_diff += numbers[i] - mean\n    }\n    mad = abs_diff / float64(len(numbers))\n\
    \n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpy5sqsipf_test.go:48: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpy5sqsipf_test.go:48:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpy5sqsipf_test.go:48: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074039
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var n int = len(numbers)\n\
    \n    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / float64(n)\n\n    for _, number := range numbers {\n        abs_diff\
    \ += abs(number - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return\
    \ mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7zrlapjz_test.go:26:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    for _, number := range numbers\
    \ {\n        sum += number\n    }\n    mean := sum / float64(len(numbers))\n \
    \   var sum_of_abs_diffs float64 = 0\n    for _, number := range numbers {\n \
    \       sum_of_abs_diffs += math.Abs(number - mean)\n    }\n    return sum_of_abs_diffs\
    \ / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi5qad7bc_test.go:21:29: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var i int = 0\n\n  \
    \  // Calculate mean\n    for i = 0; i < len(numbers); i++ {\n        sum += numbers[i]\n\
    \    }\n    mean = sum / float64(len(numbers))\n\n    // Calculate MAD\n    for\
    \ i = 0; i < len(numbers); i++ {\n        abs_diff = numbers[i] - mean\n     \
    \   if abs_diff < 0 {\n            abs_diff = -abs_diff\n        }\n        mad\
    \ += abs_diff\n    }\n    mad = mad / float64(len(numbers))\n\n    return mad\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074041
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var mad float64 = 0.0\n    var abs_diff float64 = 0.0\n    var count int\
    \ = 0\n\n    for _, number := range numbers {\n        sum += number\n       \
    \ count += 1\n    }\n    mean = sum / float64(count)\n\n    for _, number := range\
    \ numbers {\n        abs_diff += math.Abs(number - mean)\n    }\n    mad = abs_diff\
    \ / float64(count)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuq8pyflt_test.go:27:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074040
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var diff float64 = 0\n    var abs_diff float64 = 0\n\
    \n    // Calculate the mean of the input numbers\n    for _, number := range numbers\
    \ {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\n\
    \    // Calculate the absolute difference between each number and the mean\n \
    \   for _, number := range numbers {\n        diff = number - mean\n        if\
    \ diff < 0 {\n            abs_diff = -diff\n        } else {\n            abs_diff\
    \ = diff\n        }\n        mad += abs_diff\n    }\n\n    // Return the average\
    \ absolute difference\n    return mad / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074041
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate mean of the input numbers\n    var sum\
    \ float64 = 0\n    for _, number := range numbers {\n        sum += number\n \
    \   }\n    mean := sum / float64(len(numbers))\n\n    // Calculate the absolute\
    \ difference between each element and the mean\n    var absolute_differences []float64\n\
    \    for _, number := range numbers {\n        absolute_differences = append(absolute_differences,\n\
    \                                     number - mean)\n    }\n\n    // Calculate\
    \ the mean of the absolute differences\n    var sum_absolute_differences float64\
    \ = 0\n    for _, absolute_difference := range absolute_differences {\n      \
    \  sum_absolute_differences += absolute_difference\n    }\n    mean_absolute_difference\
    \ := sum_absolute_differences / float64(len(absolute_differences))\n\n    return\
    \ mean_absolute_difference\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp67utxj99_test.go:53: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp67utxj99_test.go:53:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp67utxj99_test.go:53: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074041
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var mad float64 = 0.0\n    var abs_diff float64 = 0.0\n    var count int\
    \ = 0\n\n    // Calculate the mean of the dataset\n    for _, number := range\
    \ numbers {\n        sum += number\n        count += 1\n    }\n    mean = sum\
    \ / float64(count)\n\n    // Calculate the absolute difference between each element\
    \ and the mean\n    for _, number := range numbers {\n        abs_diff += float64(int(number\
    \ - mean))\n    }\n\n    // Calculate the mean absolute deviation\n    mad = abs_diff\
    \ / float64(count)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpejmbjyjg_test.go:53: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpejmbjyjg_test.go:53:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpejmbjyjg_test.go:53: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074041
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the input numbers\n    mean\
    \ := 0.0\n    for _, number := range numbers {\n        mean += number\n    }\n\
    \    mean /= float64(len(numbers))\n\n    // Calculate the absolute difference\
    \ between each element and the mean\n    // and sum them\n    sum_absolute_differences\
    \ := 0.0\n    for _, number := range numbers {\n        sum_absolute_differences\
    \ += math.Abs(number - mean)\n    }\n\n    // Return the average absolute difference\n\
    \    return sum_absolute_differences / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90l62kt__test.go:25:37: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074040
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var n int = len(numbers)\n\
    \n    for _, num := range numbers {\n        sum += num\n    }\n    mean = sum\
    \ / float64(n)\n\n    for _, num := range numbers {\n        abs_diff += math.Abs(num\
    \ - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5pzr28ek_test.go:26:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074040
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var abs_diff_sum float64\
    \ = 0\n    var abs_diff_mean float64 = 0\n\n    // Calculate the mean of the dataset\n\
    \    for _, num := range numbers {\n        sum += num\n    }\n    mean = sum\
    \ / float64(len(numbers))\n\n    // Calculate the absolute difference between\
    \ each element and the mean\n    for _, num := range numbers {\n        abs_diff\
    \ = num - mean\n        if abs_diff < 0 {\n            abs_diff = -abs_diff\n\
    \        }\n        abs_diff_sum += abs_diff\n    }\n\n    // Calculate the mean\
    \ of the absolute differences\n    abs_diff_mean = abs_diff_sum / float64(len(numbers))\n\
    \n    return abs_diff_mean\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoatp6lms_test.go:16:9: mad declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074040
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var mad float64 = 0.0\n    var abs_diff float64 = 0.0\n    var num_elements\
    \ int = len(numbers)\n\n    // Calculate the mean of the dataset\n    for _, value\
    \ := range numbers {\n        sum += value\n    }\n    mean = sum / float64(num_elements)\n\
    \n    // Calculate the absolute difference between each element and the mean\n\
    \    for _, value := range numbers {\n        abs_diff += (value - mean)\n   \
    \ }\n    mad = abs_diff / float64(num_elements)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpbyktb7i8_test.go:50: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpbyktb7i8_test.go:50:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpbyktb7i8_test.go:50: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074041
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var absolute_difference float64 = 0\n    var number_of_elements\
    \ int = len(numbers)\n\n    // Calculate the mean of the dataset\n    for _, number\
    \ := range numbers {\n        sum += number\n    }\n    mean = sum / float64(number_of_elements)\n\
    \n    // Calculate the absolute difference between each element and the mean\n\
    \    for _, number := range numbers {\n        absolute_difference += abs(number\
    \ - mean)\n    }\n\n    // Calculate the mean absolute deviation\n    mad = absolute_difference\
    \ / float64(number_of_elements)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7c2uobnu_test.go:28:32: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074040
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var abs_diff_sum float64\
    \ = 0\n    var abs_diff_mean float64 = 0\n\n    for _, number := range numbers\
    \ {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\n\
    \    for _, number := range numbers {\n        abs_diff = number - mean\n    \
    \    if abs_diff < 0 {\n            abs_diff = -abs_diff\n        }\n        abs_diff_sum\
    \ += abs_diff\n    }\n    abs_diff_mean = abs_diff_sum / float64(len(numbers))\n\
    \n    return abs_diff_mean\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6h_h5i5y_test.go:16:9: mad declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074040
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var mad float64 = 0.0\n    var abs_diff float64 = 0.0\n    var abs_diff_sum\
    \ float64 = 0.0\n    var abs_diff_mean float64 = 0.0\n\n    for _, number := range\
    \ numbers {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\
    \n    for _, number := range numbers {\n        abs_diff = number - mean\n   \
    \     if abs_diff < 0 {\n            abs_diff = -abs_diff\n        }\n       \
    \ abs_diff_sum += abs_diff\n    }\n    abs_diff_mean = abs_diff_sum / float64(len(numbers))\n\
    \n    return abs_diff_mean\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl0rvntva_test.go:16:9: mad declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074040
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the dataset\n    var mean\
    \ float64 = 0.0\n    for _, number := range numbers {\n        mean += number\n\
    \    }\n    mean /= float64(len(numbers))\n\n    // Calculate the absolute difference\
    \ between each element and the mean\n    var abs_differences []float64 = make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        abs_differences[i]\
    \ = number - mean\n        if abs_differences[i] < 0 {\n            abs_differences[i]\
    \ *= -1\n        }\n    }\n\n    // Calculate the mean of the absolute differences\n\
    \    var mean_abs_diff float64 = 0.0\n    for _, abs_diff := range abs_differences\
    \ {\n        mean_abs_diff += abs_diff\n    }\n    mean_abs_diff /= float64(len(abs_differences))\n\
    \n    return mean_abs_diff\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074041
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var mad float64 = 0.0\n    var count int = 0\n\n    for _, number := range\
    \ numbers {\n        sum += number\n        count++\n    }\n\n    mean = sum /\
    \ float64(count)\n\n    for _, number := range numbers {\n        mad += math.Abs(number\
    \ - mean)\n    }\n\n    return mad / float64(count)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk5i0lify_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var i int = 0\n\n  \
    \  // Calculate mean\n    for i = 0; i < len(numbers); i++ {\n        sum += numbers[i]\n\
    \    }\n    mean = sum / float64(len(numbers))\n\n    // Calculate MAD\n    for\
    \ i = 0; i < len(numbers); i++ {\n        abs_diff = numbers[i] - mean\n     \
    \   if abs_diff < 0 {\n            abs_diff = -abs_diff\n        }\n        mad\
    \ += abs_diff\n    }\n    mad = mad / float64(len(numbers))\n\n    return mad\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074041
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var n int = len(numbers)\n\
    \n    // Calculate mean\n    for _, num := range numbers {\n        sum += num\n\
    \    }\n    mean = sum / float64(n)\n\n    // Calculate MAD\n    for _, num :=\
    \ range numbers {\n        abs_diff += math.Abs(num - mean)\n    }\n    mad =\
    \ abs_diff / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsk___wgf_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var n float64 = float64(len(numbers))\n\n    for _,\
    \ number := range numbers {\n        sum += number\n    }\n    mean = sum / n\n\
    \n    for _, number := range numbers {\n        mad += abs(number - mean)\n  \
    \  }\n    mad = mad / n\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptm1sxan2_test.go:25:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074040
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var count int = len(numbers)\n\
    \n    for _, num := range numbers {\n        sum += num\n    }\n    mean = sum\
    \ / float64(count)\n\n    for _, num := range numbers {\n        abs_diff += math.Abs(num\
    \ - mean)\n    }\n    mad = abs_diff / float64(count)\n\n    return mad\n}\n\n\
    func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpschztgc__test.go:26:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074040
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the dataset\n    var mean\
    \ float64 = 0.0\n    for _, number := range numbers {\n        mean += number\n\
    \    }\n    mean /= float64(len(numbers))\n\n    // Calculate the absolute difference\
    \ between each element and the mean\n    var absolute_differences []float64 =\
    \ make([]float64, len(numbers))\n    for i, number := range numbers {\n      \
    \  absolute_differences[i] = number - mean\n        if absolute_differences[i]\
    \ < 0 {\n            absolute_differences[i] *= -1\n        }\n    }\n\n    //\
    \ Calculate the mean of the absolute differences\n    var mean_absolute_deviation\
    \ float64 = 0.0\n    for _, absolute_difference := range absolute_differences\
    \ {\n        mean_absolute_deviation += absolute_difference\n    }\n    mean_absolute_deviation\
    \ /= float64(len(absolute_differences))\n\n    return mean_absolute_deviation\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074041
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var abs_deviation float64 = 0\n    var abs_deviations []float64 = make([]float64,\
    \ len(numbers))\n    var mean_abs_deviation float64 = 0\n\n    // Calculate mean\n\
    \    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / float64(len(numbers))\n\n    // Calculate absolute deviation\n    for\
    \ _, number := range numbers {\n        abs_deviation = number - mean\n      \
    \  if abs_deviation < 0 {\n            abs_deviation = -abs_deviation\n      \
    \  }\n        abs_deviations = append(abs_deviations, abs_deviation)\n    }\n\n\
    \    // Calculate mean absolute deviation\n    for _, abs_deviation := range abs_deviations\
    \ {\n        mean_abs_deviation += abs_deviation\n    }\n    mean_abs_deviation\
    \ = mean_abs_deviation / float64(len(abs_deviations))\n\n    return mean_abs_deviation\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpl5e9zmop_test.go:59: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpl5e9zmop_test.go:59:\
    \ expected '%!s(float64=1)', got '%!s(float64=0.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpl5e9zmop_test.go:59: expected '%!s(float64=1.2)', got '%!s(float64=0.6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074041
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var n int = len(numbers)\n\
    \n    // Calculate mean\n    for _, number := range numbers {\n        sum +=\
    \ number\n    }\n    mean = sum / float64(n)\n\n    // Calculate MAD\n    for\
    \ _, number := range numbers {\n        abs_diff += math.Abs(number - mean)\n\
    \    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg6wmjo_i_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074040
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate mean\n    var sum float64 = 0\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean := sum\
    \ / float64(len(numbers))\n\n    // Calculate MAD\n    var sum_of_absolute_differences\
    \ float64 = 0\n    for _, number := range numbers {\n        sum_of_absolute_differences\
    \ += float64(abs(number - mean))\n    }\n    return sum_of_absolute_differences\
    \ / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptmcmwlbn_test.go:24:48: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074041
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var mad float64 = 0.0\n    var abs_diff float64 = 0.0\n    var count float64\
    \ = 0.0\n\n    for _, number := range numbers {\n        sum += number\n     \
    \   count += 1.0\n    }\n    mean = sum / count\n\n    for _, number := range\
    \ numbers {\n        abs_diff += (number - mean)\n    }\n    mad = abs_diff /\
    \ count\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpbhiwngvc_test.go:49: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpbhiwngvc_test.go:49:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpbhiwngvc_test.go:49: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074042
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var n int = len(numbers)\n\
    \n    // Calculate mean\n    for _, number := range numbers {\n        sum +=\
    \ number\n    }\n    mean = sum / float64(n)\n\n    // Calculate MAD\n    for\
    \ _, number := range numbers {\n        abs_diff += math.Abs(number - mean)\n\
    \    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg6wmjo_i_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074040
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var diff float64 = 0\n    var abs_diff float64 = 0\n\
    \n    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / float64(len(numbers))\n\n    for _, number := range numbers {\n    \
    \    diff = number - mean\n        abs_diff = diff\n        if diff < 0 {\n  \
    \          abs_diff = -diff\n        }\n        mad += abs_diff\n    }\n    mad\
    \ = mad / float64(len(numbers))\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074042
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var n int = len(numbers)\n\
    \n    // Calculate the mean of the dataset\n    for _, number := range numbers\
    \ {\n        sum += number\n    }\n    mean = sum / float64(n)\n\n    // Calculate\
    \ the mean absolute deviation\n    for _, number := range numbers {\n        abs_diff\
    \ += math.Abs(number - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return\
    \ mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwe18jkfo_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074041
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var n float64 = float64(len(numbers))\n\
    \n    for _, num := range numbers {\n        sum += num\n    }\n    mean = sum\
    \ / n\n\n    for _, num := range numbers {\n        abs_diff += (num - mean)\n\
    \    }\n    mad = abs_diff / n\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp1bz6poli_test.go:48: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp1bz6poli_test.go:48:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp1bz6poli_test.go:48: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074042
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var n float64 = float64(len(numbers))\n\n    for _,\
    \ number := range numbers {\n        sum += number\n    }\n    mean = sum / n\n\
    \n    for _, number := range numbers {\n        mad += abs(number - mean)\n  \
    \  }\n    mad = mad / n\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptm1sxan2_test.go:25:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074040
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the input numbers\n    mean\
    \ := 0.0\n    for _, number := range numbers {\n        mean += number\n    }\n\
    \    mean /= float64(len(numbers))\n\n    // Calculate the absolute difference\
    \ between each number and the mean\n    // and sum them up\n    sum_of_absolute_differences\
    \ := 0.0\n    for _, number := range numbers {\n        sum_of_absolute_differences\
    \ += math.Abs(number - mean)\n    }\n\n    // Return the mean of the absolute\
    \ differences\n    return sum_of_absolute_differences / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps9vhfe8a_test.go:25:40: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074043
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the dataset\n    var sum\
    \ float64 = 0\n    for _, number := range numbers {\n        sum += number\n \
    \   }\n    mean := sum / float64(len(numbers))\n\n    // Calculate the absolute\
    \ difference between each element and the mean\n    var abs_differences []float64\n\
    \    for _, number := range numbers {\n        abs_differences = append(abs_differences,\
    \ number - mean)\n    }\n\n    // Calculate the mean of the absolute differences\n\
    \    var abs_differences_sum float64 = 0\n    for _, abs_difference := range abs_differences\
    \ {\n        abs_differences_sum += abs_difference\n    }\n    mean_absolute_deviation\
    \ := abs_differences_sum / float64(len(abs_differences))\n\n    return mean_absolute_deviation\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpbm3qu8vn_test.go:52: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpbm3qu8vn_test.go:52:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpbm3qu8vn_test.go:52: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074039
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var abs_deviations []float64 = make([]float64, len(numbers))\n\n    // Calculate\
    \ mean\n    for _, number := range numbers {\n        sum += number\n    }\n \
    \   mean = sum / float64(len(numbers))\n\n    // Calculate absolute deviations\n\
    \    for index, number := range numbers {\n        abs_deviations[index] = number\
    \ - mean\n        if abs_deviations[index] < 0 {\n            abs_deviations[index]\
    \ *= -1\n        }\n    }\n\n    // Calculate mean absolute deviation\n    sum\
    \ = 0\n    for _, abs_deviation := range abs_deviations {\n        sum += abs_deviation\n\
    \    }\n    return sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074044
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var n int = len(numbers)\n\
    \n    // Calculate mean\n    for _, number := range numbers {\n        sum +=\
    \ number\n    }\n    mean = sum / float64(n)\n\n    // Calculate MAD\n    for\
    \ _, number := range numbers {\n        abs_diff += math.Abs(number - mean)\n\
    \    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg6wmjo_i_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074040
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var num_elements float64\
    \ = float64(len(numbers))\n\n    // Calculate the mean\n    for _, element :=\
    \ range numbers {\n        sum += element\n    }\n    mean = sum / num_elements\n\
    \n    // Calculate the mean absolute deviation\n    for _, element := range numbers\
    \ {\n        abs_diff += abs(element - mean)\n    }\n    mad = abs_diff / num_elements\n\
    \n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr0nbo54j_test.go:28:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074043
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var n float64 = float64(len(numbers))\n    var mad float64 = 0\n\n    for _,\
    \ number := range numbers {\n        sum += number\n    }\n    mean = sum / n\n\
    \n    for _, number := range numbers {\n        mad += abs(number - mean)\n  \
    \  }\n    mad = mad / n\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_vhn8s7j_test.go:25:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074043
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var mad float64 = 0.0\n    var abs_diff float64 = 0.0\n    var count float64\
    \ = 0.0\n\n    for _, number := range numbers {\n        sum += number\n     \
    \   count += 1.0\n    }\n    mean = sum / count\n\n    for _, number := range\
    \ numbers {\n        abs_diff += (number - mean)\n    }\n    mad = abs_diff /\
    \ count\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpbhiwngvc_test.go:49: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpbhiwngvc_test.go:49:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpbhiwngvc_test.go:49: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074042
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var diff float64 = 0\n    var abs_diff float64 = 0\n\
    \n    // Calculate the mean of the dataset\n    for _, number := range numbers\
    \ {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\n\
    \    // Calculate the absolute difference between each element and the mean\n\
    \    for _, number := range numbers {\n        diff = number - mean\n        abs_diff\
    \ += diff\n    }\n\n    // Calculate the average absolute difference\n    mad\
    \ = abs_diff / float64(len(numbers))\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpqm1a_pbx_test.go:53: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpqm1a_pbx_test.go:53:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpqm1a_pbx_test.go:53: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074044
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate mean\n    var sum float64 = 0\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean := sum\
    \ / float64(len(numbers))\n\n    // Calculate absolute difference between each\
    \ element and mean\n    var absolute_differences []float64\n    for _, number\
    \ := range numbers {\n        absolute_differences = append(absolute_differences,\
    \ number - mean)\n    }\n\n    // Calculate absolute value of each element\n \
    \   var absolute_values []float64\n    for _, absolute_difference := range absolute_differences\
    \ {\n        absolute_values = append(absolute_values, absolute_difference)\n\
    \    }\n\n    // Calculate sum of absolute values\n    var sum_absolute_values\
    \ float64 = 0\n    for _, absolute_value := range absolute_values {\n        sum_absolute_values\
    \ += absolute_value\n    }\n\n    // Calculate mean absolute deviation\n    mean_absolute_deviation\
    \ := sum_absolute_values / float64(len(absolute_values))\n\n    return mean_absolute_deviation\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp2ir46jpv_test.go:60: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp2ir46jpv_test.go:60:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp2ir46jpv_test.go:60: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074044
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var abs_deviation float64 = 0.0\n    var mean_absolute_deviation float64\
    \ = 0.0\n\n    // Calculate mean\n    for _, number := range numbers {\n     \
    \   sum += number\n    }\n    mean = sum / float64(len(numbers))\n\n    // Calculate\
    \ absolute deviation from mean\n    for _, number := range numbers {\n       \
    \ abs_deviation += abs(number - mean)\n    }\n\n    // Calculate mean absolute\
    \ deviation\n    mean_absolute_deviation = abs_deviation / float64(len(numbers))\n\
    \n    return mean_absolute_deviation\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpape2eqmi_test.go:27:26: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074043
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var mad float64 = 0.0\n    var count float64 = 0.0\n    var abs_diff float64\
    \ = 0.0\n\n    // Calculate mean\n    for _, num := range numbers {\n        sum\
    \ += num\n        count += 1.0\n    }\n    mean = sum / count\n\n    // Calculate\
    \ MAD\n    for _, num := range numbers {\n        abs_diff += abs(num - mean)\n\
    \    }\n    mad = abs_diff / count\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfuatcl5a_test.go:29:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074043
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var count int = len(numbers)\n\
    \n    // Calculate mean\n    for _, number := range numbers {\n        sum +=\
    \ number\n    }\n    mean = sum / float64(count)\n\n    // Calculate MAD\n   \
    \ for _, number := range numbers {\n        abs_diff += math.Abs(number - mean)\n\
    \    }\n    mad = abs_diff / float64(count)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vktggou_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074043
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var mad float64 = 0.0\n    var count float64 = 0.0\n    var diff float64\
    \ = 0.0\n\n    for _, num := range numbers {\n        sum += num\n        count\
    \ += 1.0\n    }\n    mean = sum / count\n\n    for _, num := range numbers {\n\
    \        diff += (num - mean)\n    }\n    mad = diff / count\n\n    return mad\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp3nrtkwoy_test.go:49: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp3nrtkwoy_test.go:49:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp3nrtkwoy_test.go:49: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074044
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var count int = len(numbers)\n\
    \n    // Calculate mean\n    for _, number := range numbers {\n        sum +=\
    \ number\n    }\n    mean = sum / float64(count)\n\n    // Calculate MAD\n   \
    \ for _, number := range numbers {\n        abs_diff += math.Abs(number - mean)\n\
    \    }\n    mad = abs_diff / float64(count)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vktggou_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074043
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Find the mean of the dataset\n    var sum float64\
    \ = 0\n    for _, num := range numbers {\n        sum += num\n    }\n    mean\
    \ := sum / float64(len(numbers))\n\n    // Find the absolute difference between\
    \ each element and the mean\n    var abs_differences []float64\n    for _, num\
    \ := range numbers {\n        abs_differences = append(abs_differences, math.Abs(num\
    \ - mean))\n    }\n\n    // Find the mean of the absolute differences\n    var\
    \ sum_abs_differences float64 = 0\n    for _, num := range abs_differences {\n\
    \        sum_abs_differences += num\n    }\n    return sum_abs_differences / float64(len(abs_differences))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6gcrslaz_test.go:24:51: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074043
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var count float64 = 0.0\n    var mad float64 = 0.0\n\n    for _, number :=\
    \ range numbers {\n        sum += number\n        count += 1.0\n    }\n\n    mean\
    \ = sum / count\n\n    for _, number := range numbers {\n        mad += abs(number\
    \ - mean)\n    }\n\n    return mad / count\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphdgt35o3_test.go:27:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074043
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate mean\n    var sum float64 = 0\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean := sum\
    \ / float64(len(numbers))\n\n    // Calculate MAD\n    var mad float64 = 0\n \
    \   for _, number := range numbers {\n        mad += math.Abs(number - mean)\n\
    \    }\n    mad /= float64(len(numbers))\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsghp21pl_test.go:24:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074043
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var count int = len(numbers)\n\
    \n    for _, num := range numbers {\n        sum += num\n    }\n    mean = sum\
    \ / float64(count)\n\n    for _, num := range numbers {\n        abs_diff += (num\
    \ - mean)\n    }\n    mad = abs_diff / float64(count)\n\n    return mad\n}\n\n\
    func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpow7qqobg_test.go:48: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpow7qqobg_test.go:48:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpow7qqobg_test.go:48: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074044
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var length float64 =\
    \ float64(len(numbers))\n\n    for _, number := range numbers {\n        sum +=\
    \ number\n    }\n    mean = sum / length\n\n    for _, number := range numbers\
    \ {\n        abs_diff += math.Abs(number - mean)\n    }\n    mad = abs_diff /\
    \ length\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkdvf_bb_test.go:26:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074043
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var abs_deviations []float64 = make([]float64, len(numbers))\n\n    for _,\
    \ number := range numbers {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\
    \n    for i, number := range numbers {\n        abs_deviations[i] = number - mean\n\
    \        if abs_deviations[i] < 0 {\n            abs_deviations[i] *= -1\n   \
    \     }\n    }\n\n    var abs_deviations_sum float64 = 0\n    for _, abs_deviation\
    \ := range abs_deviations {\n        abs_deviations_sum += abs_deviation\n   \
    \ }\n\n    return abs_deviations_sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074044
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var count int = len(numbers)\n\
    \n    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / float64(count)\n\n    for _, number := range numbers {\n        abs_diff\
    \ += math.Abs(number - mean)\n    }\n    mad = abs_diff / float64(count)\n\n \
    \   return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphb9jbd2s_test.go:26:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074043
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var count float64 =\
    \ 0\n\n    // Calculate mean\n    for _, number := range numbers {\n        sum\
    \ += number\n        count += 1\n    }\n    mean = sum / count\n\n    // Calculate\
    \ MAD\n    for _, number := range numbers {\n        abs_diff += number - mean\n\
    \    }\n    mad = abs_diff / count\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpzte4g2ym_test.go:51: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpzte4g2ym_test.go:51:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpzte4g2ym_test.go:51: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074044
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var diff float64 = 0\n    var abs_diff float64 = 0\n\
    \n    for _, num := range numbers {\n        sum += num\n    }\n    mean = sum\
    \ / float64(len(numbers))\n\n    for _, num := range numbers {\n        diff =\
    \ num - mean\n        abs_diff = diff\n        if diff < 0 {\n            abs_diff\
    \ = -diff\n        }\n        mad += abs_diff\n    }\n    mad = mad / float64(len(numbers))\n\
    \n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074044
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var mad float64 = 0.0\n    var diff float64 = 0.0\n    var count int = 0\n\
    \n    for _, num := range numbers {\n        sum += num\n        count++\n   \
    \ }\n    mean = sum / float64(count)\n\n    for _, num := range numbers {\n  \
    \      diff += math.Abs(num - mean)\n    }\n    mad = diff / float64(count)\n\n\
    \    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpenaw4ybp_test.go:27:17: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074043
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var abs_deviation float64 = 0\n    var mean_abs_deviation float64 = 0\n\n \
    \   // Calculate mean\n    for _, num := range numbers {\n        sum += num\n\
    \    }\n    mean = sum / float64(len(numbers))\n\n    // Calculate mean absolute\
    \ deviation\n    for _, num := range numbers {\n        abs_deviation += abs(num\
    \ - mean)\n    }\n    mean_abs_deviation = abs_deviation / float64(len(numbers))\n\
    \n    return mean_abs_deviation\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyud7tvr__test.go:27:26: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074043
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var count int = 0\n    var deviation float64 = 0.0\n    var mean_absolute_deviation\
    \ float64 = 0.0\n\n    // Calculate mean\n    for _, number := range numbers {\n\
    \        sum += number\n        count++\n    }\n    mean = sum / float64(count)\n\
    \n    // Calculate mean absolute deviation\n    for _, number := range numbers\
    \ {\n        deviation += number - mean\n    }\n    mean_absolute_deviation =\
    \ deviation / float64(count)\n\n    return mean_absolute_deviation\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpvlf5byd2_test.go:51: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpvlf5byd2_test.go:51:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpvlf5byd2_test.go:51: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074044
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the dataset\n    mean :=\
    \ 0.0\n    for _, number := range numbers {\n        mean += number\n    }\n \
    \   mean /= float64(len(numbers))\n\n    // Calculate the absolute difference\
    \ between each element and the mean\n    // and sum them up\n    sum_absolute_differences\
    \ := 0.0\n    for _, number := range numbers {\n        sum_absolute_differences\
    \ += math.Abs(number - mean)\n    }\n\n    // Return the average absolute difference\n\
    \    return sum_absolute_differences / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1da6l8n0_test.go:25:37: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074043
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var n int = len(numbers)\n\
    \n    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / float64(n)\n\n    for _, number := range numbers {\n        abs_diff\
    \ += (number - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp15c19x_d_test.go:48: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp15c19x_d_test.go:48:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp15c19x_d_test.go:48: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074045
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the dataset\n    mean :=\
    \ 0.0\n    for _, number := range numbers {\n        mean += number\n    }\n \
    \   mean /= float64(len(numbers))\n\n    // Calculate the absolute difference\
    \ between each element and the mean\n    // and sum them up\n    sum_absolute_difference\
    \ := 0.0\n    for _, number := range numbers {\n        sum_absolute_difference\
    \ += math.Abs(number - mean)\n    }\n\n    // Return the average absolute difference\n\
    \    return sum_absolute_difference / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjck_opma_test.go:25:36: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074045
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64\n    var mean float64\n    var mad\
    \ float64\n    var diff float64\n\n    for _, number := range numbers {\n    \
    \    sum += number\n    }\n    mean = sum / float64(len(numbers))\n\n    for _,\
    \ number := range numbers {\n        diff += number - mean\n    }\n    mad = diff\
    \ / float64(len(numbers))\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp718i0y_h_test.go:47: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp718i0y_h_test.go:47:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp718i0y_h_test.go:47: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074045
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the dataset\n    mean :=\
    \ 0.0\n    for _, number := range numbers {\n        mean += number\n    }\n \
    \   mean /= float64(len(numbers))\n\n    // Calculate the absolute difference\
    \ between each element and the mean\n    // and sum them up\n    sum_of_absolute_differences\
    \ := 0.0\n    for _, number := range numbers {\n        sum_of_absolute_differences\
    \ += math.Abs(number - mean)\n    }\n\n    // Return the mean of the absolute\
    \ differences\n    return sum_of_absolute_differences / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzv88ievl_test.go:25:40: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074045
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var diff float64 = 0\n    var count int = len(numbers)\n\
    \n    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / float64(count)\n\n    for _, number := range numbers {\n        diff\
    \ += number - mean\n    }\n    mad = diff / float64(count)\n\n    return mad\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpuj960sh7_test.go:48: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpuj960sh7_test.go:48:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpuj960sh7_test.go:48: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074045
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var diff float64 = 0\n    var i int = 0\n\n    //\
    \ Calculate mean\n    for i = 0; i < len(numbers); i++ {\n        sum += numbers[i]\n\
    \    }\n    mean = sum / float64(len(numbers))\n\n    // Calculate MAD\n    for\
    \ i = 0; i < len(numbers); i++ {\n        diff += numbers[i] - mean\n    }\n \
    \   mad = diff / float64(len(numbers))\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp1z62ocsx_test.go:50: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp1z62ocsx_test.go:50:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp1z62ocsx_test.go:50: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074045
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var diff float64 = 0\n    var length int = len(numbers)\n\
    \n    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / float64(length)\n\n    for _, number := range numbers {\n        diff\
    \ += number - mean\n    }\n    mad = diff / float64(length)\n\n    return mad\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpxc_wa001_test.go:48: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpxc_wa001_test.go:48:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpxc_wa001_test.go:48: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074045
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the input numbers\n    mean\
    \ := 0.0\n    for _, number := range numbers {\n        mean += number\n    }\n\
    \    mean /= float64(len(numbers))\n\n    // Calculate the absolute difference\
    \ between each number and the mean\n    // and sum them up\n    sum_of_absolute_differences\
    \ := 0.0\n    for _, number := range numbers {\n        sum_of_absolute_differences\
    \ += abs(number - mean)\n    }\n\n    // Divide the sum of absolute differences\
    \ by the number of elements\n    // to get the Mean Absolute Deviation\n    return\
    \ sum_of_absolute_differences / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy73n7tak_test.go:25:40: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074045
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    for _, num := range numbers {\n        sum += num\n\
    \    }\n    mean = sum / float64(len(numbers))\n    for _, num := range numbers\
    \ {\n        mad += (num - mean)\n    }\n    mad = mad / float64(len(numbers))\n\
    \    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpxz7f2mgh_test.go:43: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpxz7f2mgh_test.go:43:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpxz7f2mgh_test.go:43: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074046
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate mean\n    var sum float64 = 0\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean := sum\
    \ / float64(len(numbers))\n\n    // Calculate MAD\n    var mad float64 = 0\n \
    \   for _, number := range numbers {\n        mad += abs(number - mean)\n    }\n\
    \    mad /= float64(len(numbers))\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgut11cd9_test.go:24:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074045
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var n int = len(numbers)\n\n    for _, number := range\
    \ numbers {\n        sum += number\n    }\n    mean = sum / float64(n)\n\n   \
    \ for _, number := range numbers {\n        mad += (number - mean)\n    }\n  \
    \  mad = mad / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpwzliwlge_test.go:47: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpwzliwlge_test.go:47:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpwzliwlge_test.go:47: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074046
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var mad float64 = 0.0\n    var abs_diff float64 = 0.0\n    var num_numbers\
    \ int = len(numbers)\n\n    // Calculate the mean\n    for _, number := range\
    \ numbers {\n        sum += number\n    }\n    mean = sum / float64(num_numbers)\n\
    \n    // Calculate the absolute difference between each element and the mean\n\
    \    // and sum them up\n    for _, number := range numbers {\n        abs_diff\
    \ += float64(int64(number - mean))\n    }\n\n    // Calculate the mean absolute\
    \ deviation\n    mad = abs_diff / float64(num_numbers)\n\n    return mad\n}\n\n\
    func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp7u6i0mee_test.go:53: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp7u6i0mee_test.go:53:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp7u6i0mee_test.go:53: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074046
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var n int = len(numbers)\n\n    for _, v := range\
    \ numbers {\n        sum += v\n    }\n    mean = sum / float64(n)\n\n    for _,\
    \ v := range numbers {\n        mad += abs(v - mean)\n    }\n    mad = mad / float64(n)\n\
    \n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxcu4sqn9_test.go:25:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074046
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var deviation float64 = 0\n    var mean_absolute_deviation float64 = 0\n\n\
    \    // Calculate the mean of the dataset\n    for _, number := range numbers\
    \ {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\n\
    \    // Calculate the absolute difference between each element and the mean\n\
    \    for _, number := range numbers {\n        deviation += (number - mean)\n\
    \    }\n    mean_absolute_deviation = deviation / float64(len(numbers))\n\n  \
    \  return mean_absolute_deviation\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp4dq1az6g_test.go:49: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp4dq1az6g_test.go:49:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp4dq1az6g_test.go:49: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074046
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var n int = len(numbers)\n\
    \n    for _, x := range numbers {\n        sum += x\n    }\n    mean = sum / float64(n)\n\
    \n    for _, x := range numbers {\n        abs_diff += abs(x - mean)\n    }\n\
    \    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cvv2yvd_test.go:26:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074046
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the dataset\n    mean :=\
    \ 0.0\n    for _, number := range numbers {\n        mean += number\n    }\n \
    \   mean /= float64(len(numbers))\n\n    // Calculate the absolute difference\
    \ between each element and the mean\n    // and sum them up\n    sum_of_absolute_differences\
    \ := 0.0\n    for _, number := range numbers {\n        sum_of_absolute_differences\
    \ += math.Abs(number - mean)\n    }\n\n    // Calculate the mean of the absolute\
    \ differences\n    mean_absolute_deviation := sum_of_absolute_differences / float64(len(numbers))\n\
    \n    return mean_absolute_deviation\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpak7zcq75_test.go:25:40: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074046
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var diff float64 = 0\n    var abs_diff float64 = 0\n\
    \n    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / float64(len(numbers))\n\n    for _, number := range numbers {\n    \
    \    diff = number - mean\n        abs_diff = diff\n        if diff < 0 {\n  \
    \          abs_diff = -diff\n        }\n        mad += abs_diff\n    }\n    mad\
    \ = mad / float64(len(numbers))\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074042
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var mad float64 = 0.0\n    var diff float64 = 0.0\n    var abs_diff float64\
    \ = 0.0\n    var count float64 = 0.0\n\n    for _, number := range numbers {\n\
    \        sum += number\n        count += 1.0\n    }\n    mean = sum / count\n\n\
    \    for _, number := range numbers {\n        diff = number - mean\n        abs_diff\
    \ = diff\n        if diff < 0 {\n            abs_diff = -diff\n        }\n   \
    \     mad += abs_diff\n    }\n    mad = mad / count\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074047
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the dataset\n    mean :=\
    \ 0.0\n    for _, number := range numbers {\n        mean += number\n    }\n \
    \   mean /= float64(len(numbers))\n\n    // Calculate the absolute difference\
    \ between each element and the mean\n    // and sum them up\n    sum_absolute_differences\
    \ := 0.0\n    for _, number := range numbers {\n        sum_absolute_differences\
    \ += math.Abs(number - mean)\n    }\n\n    // Return the average absolute difference\n\
    \    return sum_absolute_differences / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1da6l8n0_test.go:25:37: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074043
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the dataset\n    var sum\
    \ float64 = 0\n    for _, number := range numbers {\n        sum += number\n \
    \   }\n    mean := sum / float64(len(numbers))\n\n    // Calculate the absolute\
    \ difference between each element and the mean\n    var sum_of_differences float64\
    \ = 0\n    for _, number := range numbers {\n        sum_of_differences += abs(number\
    \ - mean)\n    }\n\n    // Return the average of the absolute differences\n  \
    \  return sum_of_differences / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx99qfqt6_test.go:24:31: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074046
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var deviation float64 = 0\n    var mad float64 = 0\n\n    for _, number :=\
    \ range numbers {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\
    \n    for _, number := range numbers {\n        deviation += abs(number - mean)\n\
    \    }\n    mad = deviation / float64(len(numbers))\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprinoa6su_test.go:25:22: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var abs_deviation float64 = 0.0\n    var mean_absolute_deviation float64\
    \ = 0.0\n\n    for _, number := range numbers {\n        sum += number\n    }\n\
    \    mean = sum / float64(len(numbers))\n\n    for _, number := range numbers\
    \ {\n        abs_deviation += abs(number - mean)\n    }\n    mean_absolute_deviation\
    \ = abs_deviation / float64(len(numbers))\n\n    return mean_absolute_deviation\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl6f5awbt_test.go:25:26: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var mad float64 = 0.0\n    var abs_diff float64 = 0.0\n    var n int = len(numbers)\n\
    \n    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / float64(n)\n\n    for _, number := range numbers {\n        abs_diff\
    \ += math.Abs(number - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return\
    \ mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3sud7nl4_test.go:26:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074046
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var n int = len(numbers)\n\
    \n    // Calculate mean\n    for _, num := range numbers {\n        sum += num\n\
    \    }\n    mean = sum / float64(n)\n\n    // Calculate MAD\n    for _, num :=\
    \ range numbers {\n        abs_diff += math.Abs(num - mean)\n    }\n    mad =\
    \ abs_diff / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsk___wgf_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate mean\n    var sum float64 = 0\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean := sum\
    \ / float64(len(numbers))\n\n    // Calculate absolute difference between each\
    \ element and mean\n    var abs_diff_sum float64 = 0\n    for _, number := range\
    \ numbers {\n        abs_diff_sum += abs(number - mean)\n    }\n\n    // Return\
    \ average absolute difference\n    return abs_diff_sum / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1t4b0_z_test.go:24:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074046
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64\n    var mean float64\n    var abs_deviation\
    \ float64\n    var abs_deviations []float64\n    var mean_abs_deviation float64\n\
    \n    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / float64(len(numbers))\n\n    for _, number := range numbers {\n    \
    \    abs_deviation = number - mean\n        if abs_deviation < 0 {\n         \
    \   abs_deviation = -abs_deviation\n        }\n        abs_deviations = append(abs_deviations,\
    \ abs_deviation)\n    }\n\n    for _, abs_deviation := range abs_deviations {\n\
    \        mean_abs_deviation += abs_deviation\n    }\n    mean_abs_deviation =\
    \ mean_abs_deviation / float64(len(abs_deviations))\n\n    return mean_abs_deviation\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074047
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate mean of the input dataset\n    mean :=\
    \ 0.0\n    for _, number := range numbers {\n        mean += number\n    }\n \
    \   mean /= float64(len(numbers))\n\n    // Calculate absolute difference between\
    \ each element and the mean\n    // and sum them\n    sum_absolute_difference\
    \ := 0.0\n    for _, number := range numbers {\n        sum_absolute_difference\
    \ += math.Abs(number - mean)\n    }\n\n    // Return the average of the absolute\
    \ differences\n    return sum_absolute_difference / float64(len(numbers))\n}\n\
    \nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptmzicyd8_test.go:25:36: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074046
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the input numbers\n    mean\
    \ := 0.0\n    for _, number := range numbers {\n        mean += number\n    }\n\
    \    mean /= float64(len(numbers))\n\n    // Calculate the absolute difference\
    \ between each number and the mean\n    // and sum them up\n    sum_of_absolute_differences\
    \ := 0.0\n    for _, number := range numbers {\n        sum_of_absolute_differences\
    \ += abs(number - mean)\n    }\n\n    // Return the mean of the absolute differences\n\
    \    return sum_of_absolute_differences / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1wm22ssx_test.go:25:40: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074047
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var mad float64 = 0.0\n    var abs_diff float64 = 0.0\n    var n int = len(numbers)\n\
    \n    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / float64(n)\n\n    for _, number := range numbers {\n        abs_diff\
    \ += math.Abs(number - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return\
    \ mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3sud7nl4_test.go:26:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074046
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var n int = len(numbers)\n\
    \n    // Calculate mean\n    for _, number := range numbers {\n        sum +=\
    \ number\n    }\n    mean = sum / float64(n)\n\n    // Calculate MAD\n    for\
    \ _, number := range numbers {\n        abs_diff += math.Abs(number - mean)\n\
    \    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg6wmjo_i_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074040
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the dataset\n    mean :=\
    \ 0.0\n    for _, number := range numbers {\n        mean += number\n    }\n \
    \   mean /= float64(len(numbers))\n\n    // Calculate the absolute difference\
    \ between each element and the mean\n    // and sum them up\n    sum_absolute_differences\
    \ := 0.0\n    for _, number := range numbers {\n        sum_absolute_differences\
    \ += math.Abs(number - mean)\n    }\n\n    // Return the average of the absolute\
    \ differences\n    return sum_absolute_differences / float64(len(numbers))\n}\n\
    \nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt61ll8ao_test.go:25:37: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074047
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate mean\n    var sum float64 = 0\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean := sum\
    \ / float64(len(numbers))\n\n    // Calculate absolute difference between each\
    \ element and the mean\n    var abs_diffs []float64\n    for _, number := range\
    \ numbers {\n        abs_diffs = append(abs_diffs, number - mean)\n    }\n\n \
    \   // Calculate sum of absolute differences\n    var abs_diff_sum float64 = 0\n\
    \    for _, abs_diff := range abs_diffs {\n        abs_diff_sum += abs_diff\n\
    \    }\n\n    // Calculate mean absolute deviation\n    return abs_diff_sum /\
    \ float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp1eswtw5l_test.go:52: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp1eswtw5l_test.go:52:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp1eswtw5l_test.go:52: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074048
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var num_elements int\
    \ = len(numbers)\n\n    for _, number := range numbers {\n        sum += number\n\
    \    }\n    mean = sum / float64(num_elements)\n\n    for _, number := range numbers\
    \ {\n        abs_diff += number - mean\n    }\n    mad = abs_diff / float64(num_elements)\n\
    \n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmptuzbyde9_test.go:48: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmptuzbyde9_test.go:48:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmptuzbyde9_test.go:48: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074048
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var deviation float64 = 0\n    var mad float64 = 0\n\n    // Calculate the\
    \ mean of the dataset\n    for _, number := range numbers {\n        sum += number\n\
    \    }\n    mean = sum / float64(len(numbers))\n\n    // Calculate the absolute\
    \ deviation from the mean\n    for _, number := range numbers {\n        deviation\
    \ += abs(number - mean)\n    }\n\n    // Calculate the Mean Absolute Deviation\n\
    \    mad = deviation / float64(len(numbers))\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp41nol5jm_test.go:27:22: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074048
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var n int = len(numbers)\n\
    \n    // Calculate mean\n    for _, number := range numbers {\n        sum +=\
    \ number\n    }\n    mean = sum / float64(n)\n\n    // Calculate MAD\n    for\
    \ _, number := range numbers {\n        abs_diff += math.Abs(number - mean)\n\
    \    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg6wmjo_i_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074040
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var abs_deviation float64 = 0\n    var mean_abs_deviation float64 = 0\n\n \
    \   // Calculate the mean of the dataset\n    for _, number := range numbers {\n\
    \        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\n    //\
    \ Calculate the absolute deviation of each element from the mean\n    for _, number\
    \ := range numbers {\n        abs_deviation += abs(number - mean)\n    }\n\n \
    \   // Calculate the mean absolute deviation\n    mean_abs_deviation = abs_deviation\
    \ / float64(len(numbers))\n\n    return mean_abs_deviation\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpifsmlddp_test.go:27:26: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074048
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var mad float64 = 0.0\n    var abs_diff float64 = 0.0\n    var i int = 0\n\
    \n    // Calculate mean\n    for _, number := range numbers {\n        sum +=\
    \ number\n    }\n    mean = sum / float64(len(numbers))\n\n    // Calculate MAD\n\
    \    for _, number := range numbers {\n        abs_diff = number - mean\n    \
    \    if abs_diff < 0 {\n            abs_diff = -abs_diff\n        }\n        mad\
    \ += abs_diff\n    }\n    mad = mad / float64(len(numbers))\n\n    return mad\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpij_9euxc_test.go:18:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074048
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var deviation float64 = 0\n    var mad float64 = 0\n\n    for _, number :=\
    \ range numbers {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\
    \n    for _, number := range numbers {\n        deviation += abs(number - mean)\n\
    \    }\n    mad = deviation / float64(len(numbers))\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprinoa6su_test.go:25:22: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var n int = len(numbers)\n\
    \n    for _, num := range numbers {\n        sum += num\n    }\n    mean = sum\
    \ / float64(n)\n\n    for _, num := range numbers {\n        abs_diff += math.Abs(num\
    \ - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5pzr28ek_test.go:26:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074040
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var n int = len(numbers)\n\n    for _, num := range\
    \ numbers {\n        sum += num\n    }\n    mean = sum / float64(n)\n\n    for\
    \ _, num := range numbers {\n        mad += math.Abs(num - mean)\n    }\n    mad\
    \ = mad / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_n298y6_test.go:25:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074048
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var n int = len(numbers)\n\
    \n    // Calculate mean\n    for _, number := range numbers {\n        sum +=\
    \ number\n    }\n    mean = sum / float64(n)\n\n    // Calculate MAD\n    for\
    \ _, number := range numbers {\n        abs_diff += math.Abs(number - mean)\n\
    \    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg6wmjo_i_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074040
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the dataset\n    mean :=\
    \ 0.0\n    for _, number := range numbers {\n        mean += number\n    }\n \
    \   mean /= float64(len(numbers))\n\n    // Calculate the absolute difference\
    \ between each element and the mean\n    // and sum them up\n    sum_absolute_difference\
    \ := 0.0\n    for _, number := range numbers {\n        sum_absolute_difference\
    \ += math.Abs(number - mean)\n    }\n\n    // Return the average absolute difference\n\
    \    return sum_absolute_difference / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjck_opma_test.go:25:36: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074045
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var count int = len(numbers)\n\
    \n    // Calculate the mean of the dataset\n    for _, number := range numbers\
    \ {\n        sum += number\n    }\n    mean = sum / float64(count)\n\n    // Calculate\
    \ the absolute difference between each element and the mean\n    for _, number\
    \ := range numbers {\n        abs_diff += abs(number - mean)\n    }\n\n    //\
    \ Calculate the mean absolute deviation\n    mad = abs_diff / float64(count)\n\
    \n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd5f_yvs6_test.go:28:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074048
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var mad float64 = 0.0\n    var diff float64 = 0.0\n    var abs_diff float64\
    \ = 0.0\n    var count float64 = 0.0\n\n    for _, number := range numbers {\n\
    \        sum += number\n        count += 1.0\n    }\n    mean = sum / count\n\n\
    \    for _, number := range numbers {\n        diff = number - mean\n        abs_diff\
    \ = diff\n        if diff < 0 {\n            abs_diff = -diff\n        }\n   \
    \     mad += abs_diff\n    }\n    mad = mad / count\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074047
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate mean\n    var sum float64 = 0\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean := sum\
    \ / float64(len(numbers))\n\n    // Calculate absolute difference between each\
    \ element and mean\n    var abs_diff float64 = 0\n    for _, number := range numbers\
    \ {\n        abs_diff += abs(number - mean)\n    }\n\n    // Return mean absolute\
    \ difference\n    return abs_diff / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp01cozlfr_test.go:24:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074048
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the dataset\n    var sum\
    \ float64 = 0\n    for _, value := range numbers {\n        sum += value\n   \
    \ }\n    mean := sum / float64(len(numbers))\n\n    // Calculate the absolute\
    \ difference between each element and the mean\n    var abs_differences []float64\n\
    \    for _, value := range numbers {\n        abs_differences = append(abs_differences,\
    \ value - mean)\n    }\n\n    // Calculate the mean of the absolute differences\n\
    \    sum = 0\n    for _, value := range abs_differences {\n        sum += value\n\
    \    }\n    return sum / float64(len(abs_differences))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp9uaoyvhp_test.go:50: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp9uaoyvhp_test.go:50:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp9uaoyvhp_test.go:50: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074048
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var abs_deviations float64 = 0.0\n    var mad float64 = 0.0\n\n    for _,\
    \ number := range numbers {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\
    \n    for _, number := range numbers {\n        abs_deviations += abs(number -\
    \ mean)\n    }\n    mad = abs_deviations / float64(len(numbers))\n\n    return\
    \ mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp03eanjk7_test.go:25:27: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074048
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate mean\n    var sum float64 = 0\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean := sum\
    \ / float64(len(numbers))\n\n    // Calculate absolute differences\n    var abs_differences\
    \ []float64\n    for _, number := range numbers {\n        abs_differences = append(abs_differences,\
    \ number - mean)\n    }\n\n    // Calculate mean of absolute differences\n   \
    \ var sum_abs_differences float64 = 0\n    for _, abs_difference := range abs_differences\
    \ {\n        sum_abs_differences += abs_difference\n    }\n    mean_abs_differences\
    \ := sum_abs_differences / float64(len(abs_differences))\n\n    return mean_abs_differences\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp9q4uqz_0_test.go:52: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp9q4uqz_0_test.go:52:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp9q4uqz_0_test.go:52: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074049
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var n int = len(numbers)\n\
    \n    // Calculate the mean of the dataset\n    for _, number := range numbers\
    \ {\n        sum += number\n    }\n    mean = sum / float64(n)\n\n    // Calculate\
    \ the average absolute difference between each element and the mean\n    for _,\
    \ number := range numbers {\n        abs_diff += abs(number - mean)\n    }\n \
    \   mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpervghcgg_test.go:28:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074048
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var mad float64 = 0.0\n    var count int = 0\n\n    for _, number := range\
    \ numbers {\n        sum += number\n        count++\n    }\n\n    mean = sum /\
    \ float64(count)\n\n    for _, number := range numbers {\n        mad += math.Abs(number\
    \ - mean)\n    }\n\n    return mad / float64(count)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk5i0lify_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var abs_deviation float64 = 0\n    var mean_absolute_deviation float64 = 0\n\
    \n    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / float64(len(numbers))\n\n    for _, number := range numbers {\n    \
    \    abs_deviation += abs(number - mean)\n    }\n    mean_absolute_deviation =\
    \ abs_deviation / float64(len(numbers))\n\n    return mean_absolute_deviation\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8i048n9_test.go:25:26: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074048
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var n int = len(numbers)\n\
    \n    // Calculate mean\n    for _, number := range numbers {\n        sum +=\
    \ number\n    }\n    mean = sum / float64(n)\n\n    // Calculate MAD\n    for\
    \ _, number := range numbers {\n        abs_diff += math.Abs(number - mean)\n\
    \    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg6wmjo_i_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074040
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var n int = len(numbers)\n    for _, number := range numbers {\n        sum\
    \ += number\n    }\n    mean = sum / float64(n)\n    var sum_of_absolute_differences\
    \ float64 = 0.0\n    for _, number := range numbers {\n        sum_of_absolute_differences\
    \ += math.Abs(number - mean)\n    }\n    return sum_of_absolute_differences /\
    \ float64(n)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdz2cp117_test.go:23:40: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074048
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate mean\n    var sum float64 = 0\n    for\
    \ _, num := range numbers {\n        sum += num\n    }\n    mean := sum / float64(len(numbers))\n\
    \n    // Calculate absolute difference between each element and mean\n    var\
    \ abs_diff_sum float64 = 0\n    for _, num := range numbers {\n        abs_diff_sum\
    \ += abs(num - mean)\n    }\n\n    // Calculate and return Mean Absolute Deviation\n\
    \    return abs_diff_sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3lny3fl6_test.go:24:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074049
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var abs_deviations []float64\n    var mad float64 = 0.0\n\n    // Calculate\
    \ the mean of the dataset\n    for _, num := range numbers {\n        sum += num\n\
    \    }\n    mean = sum / float64(len(numbers))\n\n    // Calculate the absolute\
    \ deviation of each element from the mean\n    for _, num := range numbers {\n\
    \        abs_deviations = append(abs_deviations, num - mean)\n    }\n\n    //\
    \ Calculate the mean of the absolute deviations\n    for _, abs_deviation := range\
    \ abs_deviations {\n        mad += abs_deviation\n    }\n    mad = mad / float64(len(abs_deviations))\n\
    \n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpbk3gfg5j_test.go:54: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpbk3gfg5j_test.go:54:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpbk3gfg5j_test.go:54: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074049
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var mad float64 = 0.0\n    var count int = 0\n\n    for _, number := range\
    \ numbers {\n        sum += number\n        count++\n    }\n\n    mean = sum /\
    \ float64(count)\n\n    for _, number := range numbers {\n        mad += math.Abs(number\
    \ - mean)\n    }\n\n    return mad / float64(count)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk5i0lify_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var abs_deviations []float64\n    var abs_deviation float64 = 0\n    var mean_abs_deviation\
    \ float64 = 0\n\n    // Calculate the mean\n    for _, number := range numbers\
    \ {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\n\
    \    // Calculate the absolute deviations\n    for _, number := range numbers\
    \ {\n        abs_deviation = number - mean\n        if abs_deviation < 0 {\n \
    \           abs_deviation = -abs_deviation\n        }\n        abs_deviations\
    \ = append(abs_deviations, abs_deviation)\n    }\n\n    // Calculate the mean\
    \ absolute deviation\n    for _, abs_deviation := range abs_deviations {\n   \
    \     mean_abs_deviation += abs_deviation\n    }\n    mean_abs_deviation = mean_abs_deviation\
    \ / float64(len(abs_deviations))\n\n    return mean_abs_deviation\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074049
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64\n    var mean float64\n    var mad\
    \ float64\n    var abs_diff float64\n\n    for _, number := range numbers {\n\
    \        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\n    for\
    \ _, number := range numbers {\n        abs_diff += math.Abs(number - mean)\n\
    \    }\n    mad = abs_diff / float64(len(numbers))\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpac8pw30h_test.go:25:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074049
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var count int = len(numbers)\n\
    \n    // Calculate mean\n    for _, num := range numbers {\n        sum += num\n\
    \    }\n    mean = sum / float64(count)\n\n    // Calculate MAD\n    for _, num\
    \ := range numbers {\n        abs_diff += math.Abs(num - mean)\n    }\n    mad\
    \ = abs_diff / float64(count)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprvtpgfn__test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074049
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var n float64 = float64(len(numbers))\n\n    // Calculate\
    \ the mean of the dataset\n    for _, number := range numbers {\n        sum +=\
    \ number\n    }\n    mean = sum / n\n\n    // Calculate the absolute difference\
    \ between each element and the mean\n    // and sum them up\n    for _, number\
    \ := range numbers {\n        mad += abs(number - mean)\n    }\n\n    // Return\
    \ the average absolute difference\n    return mad / n\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptp7le7wj_test.go:28:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var count int = len(numbers)\n\n    // Calculate the\
    \ mean of the dataset\n    for _, number := range numbers {\n        sum += number\n\
    \    }\n    mean = sum / float64(count)\n\n    // Calculate the mean absolute\
    \ deviation\n    for _, number := range numbers {\n        mad += math.Abs(number\
    \ - mean)\n    }\n    mad = mad / float64(count)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpluk7u3nv_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var mad float64 = 0.0\n    var abs_diff float64 = 0.0\n    var count int\
    \ = 0\n\n    for _, number := range numbers {\n        sum += number\n       \
    \ count += 1\n    }\n    mean = sum / float64(count)\n\n    for _, number := range\
    \ numbers {\n        abs_diff += math.Abs(number - mean)\n    }\n    mad = abs_diff\
    \ / float64(count)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuq8pyflt_test.go:27:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074040
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the input numbers\n    mean\
    \ := 0.0\n    for _, number := range numbers {\n        mean += number\n    }\n\
    \    mean /= float64(len(numbers))\n\n    // Calculate the absolute difference\
    \ between each element and the mean\n    // and sum them up\n    sum_absolute_differences\
    \ := 0.0\n    for _, number := range numbers {\n        sum_absolute_differences\
    \ += math.Abs(number - mean)\n    }\n\n    // Return the mean absolute deviation\n\
    \    return sum_absolute_differences / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6fq_9ljp_test.go:25:37: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var abs_deviation float64 = 0.0\n    var mean_abs_deviation float64 = 0.0\n\
    \n    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / float64(len(numbers))\n\n    for _, number := range numbers {\n    \
    \    abs_deviation += abs(number - mean)\n    }\n    mean_abs_deviation = abs_deviation\
    \ / float64(len(numbers))\n\n    return mean_abs_deviation\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphxtlp_d0_test.go:25:26: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074050
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_dev float64 = 0\n    var abs_dev_sum float64\
    \ = 0\n    var abs_dev_mean float64 = 0\n\n    for _, number := range numbers\
    \ {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\n\
    \    for _, number := range numbers {\n        abs_dev = number - mean\n     \
    \   if abs_dev < 0 {\n            abs_dev = -abs_dev\n        }\n        abs_dev_sum\
    \ += abs_dev\n    }\n    abs_dev_mean = abs_dev_sum / float64(len(numbers))\n\n\
    \    return abs_dev_mean\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp07wyehtt_test.go:16:9: mad declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074051
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var deviation float64 = 0\n    var mad float64 = 0\n\n    for _, number :=\
    \ range numbers {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\
    \n    for _, number := range numbers {\n        deviation += abs(number - mean)\n\
    \    }\n    mad = deviation / float64(len(numbers))\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprinoa6su_test.go:25:22: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate mean of dataset\n    mean := 0.0\n  \
    \  for _, number := range numbers {\n        mean += number\n    }\n    mean /=\
    \ float64(len(numbers))\n\n    // Calculate absolute difference between each element\
    \ and mean\n    // and sum them up\n    sum_absolute_difference := 0.0\n    for\
    \ _, number := range numbers {\n        sum_absolute_difference += math.Abs(number\
    \ - mean)\n    }\n\n    // Calculate mean absolute deviation\n    return sum_absolute_difference\
    \ / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3g1jmn5s_test.go:25:36: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074051
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var abs_diff_sum float64\
    \ = 0\n    var abs_diff_mean float64 = 0\n\n    // Calculate the mean of the dataset\n\
    \    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / float64(len(numbers))\n\n    // Calculate the absolute difference between\
    \ each element and the mean\n    for _, number := range numbers {\n        abs_diff\
    \ = number - mean\n        if abs_diff < 0 {\n            abs_diff = -abs_diff\n\
    \        }\n        abs_diff_sum += abs_diff\n    }\n\n    // Calculate the mean\
    \ of the absolute differences\n    abs_diff_mean = abs_diff_sum / float64(len(numbers))\n\
    \n    return abs_diff_mean\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwzuxk5rs_test.go:16:9: mad declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074051
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var i int = 0\n\n  \
    \  // Calculate the mean\n    for i = 0; i < len(numbers); i++ {\n        sum\
    \ += numbers[i]\n    }\n    mean = sum / float64(len(numbers))\n\n    // Calculate\
    \ the absolute difference between each element and the mean\n    for i = 0; i\
    \ < len(numbers); i++ {\n        abs_diff += numbers[i] - mean\n    }\n\n    //\
    \ Calculate the mean absolute deviation\n    mad = abs_diff / float64(len(numbers))\n\
    \n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpks3vpoml_test.go:52: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpks3vpoml_test.go:52:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpks3vpoml_test.go:52: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074052
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var abs_diff_sum float64\
    \ = 0\n    var abs_diff_mean float64 = 0\n\n    // Calculate the mean of the dataset\n\
    \    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / float64(len(numbers))\n\n    // Calculate the absolute difference between\
    \ each element and the mean\n    for _, number := range numbers {\n        abs_diff\
    \ = number - mean\n        if abs_diff < 0 {\n            abs_diff = -abs_diff\n\
    \        }\n        abs_diff_sum += abs_diff\n    }\n\n    // Calculate the mean\
    \ of the absolute differences\n    abs_diff_mean = abs_diff_sum / float64(len(numbers))\n\
    \n    return abs_diff_mean\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwzuxk5rs_test.go:16:9: mad declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074051
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var n int = len(numbers)\n\
    \n    // Calculate the mean of the dataset\n    for _, x := range numbers {\n\
    \        sum += x\n    }\n    mean = sum / float64(n)\n\n    // Calculate the\
    \ absolute difference between each element and the mean\n    // and sum them up\n\
    \    for _, x := range numbers {\n        abs_diff += abs(x - mean)\n    }\n\n\
    \    // Calculate the mean absolute deviation\n    mad = abs_diff / float64(n)\n\
    \n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dmh4bg2_test.go:29:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074051
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the dataset\n    var sum\
    \ float64 = 0\n    for _, number := range numbers {\n        sum += number\n \
    \   }\n    mean := sum / float64(len(numbers))\n\n    // Calculate the absolute\
    \ difference between each element and the mean\n    var sum_of_absolute_differences\
    \ float64 = 0\n    for _, number := range numbers {\n        sum_of_absolute_differences\
    \ += abs(number - mean)\n    }\n\n    // Return the average of the absolute differences\n\
    \    return sum_of_absolute_differences / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprhihhxtw_test.go:24:40: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074051
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the dataset\n    mean :=\
    \ 0.0\n    for _, number := range numbers {\n        mean += number\n    }\n \
    \   mean /= float64(len(numbers))\n\n    // Calculate the absolute difference\
    \ between each element and the mean\n    abs_diff := 0.0\n    for _, number :=\
    \ range numbers {\n        abs_diff += number - mean\n    }\n\n    // Return the\
    \ mean absolute difference\n    return abs_diff / float64(len(numbers))\n}\n\n\
    func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpocru74v2_test.go:46: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpocru74v2_test.go:46:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpocru74v2_test.go:46: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074052
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var abs_deviations []float64 = make([]float64, len(numbers))\n\n    for _,\
    \ number := range numbers {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\
    \n    for i, number := range numbers {\n        abs_deviations[i] = number - mean\n\
    \        if abs_deviations[i] < 0 {\n            abs_deviations[i] *= -1\n   \
    \     }\n    }\n\n    var sum_abs_deviations float64 = 0\n    for _, abs_deviation\
    \ := range abs_deviations {\n        sum_abs_deviations += abs_deviation\n   \
    \ }\n\n    return sum_abs_deviations / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074052
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var abs_deviations []float64 = make([]float64, len(numbers))\n\n    for _,\
    \ number := range numbers {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\
    \n    for i, number := range numbers {\n        abs_deviations[i] = number - mean\n\
    \        if abs_deviations[i] < 0 {\n            abs_deviations[i] *= -1\n   \
    \     }\n    }\n\n    var abs_deviations_sum float64 = 0\n    for _, abs_deviation\
    \ := range abs_deviations {\n        abs_deviations_sum += abs_deviation\n   \
    \ }\n\n    return abs_deviations_sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074044
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var n int = len(numbers)\n\
    \n    // Calculate mean of the dataset\n    for _, num := range numbers {\n  \
    \      sum += num\n    }\n    mean = sum / float64(n)\n\n    // Calculate Mean\
    \ Absolute Deviation\n    for _, num := range numbers {\n        abs_diff += math.Abs(num\
    \ - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10ntcl9b_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074052
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64\n    var mean float64\n    var abs_diff\
    \ float64\n    var abs_diff_sum float64\n    var mad float64\n\n    for _, number\
    \ := range numbers {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\
    \n    for _, number := range numbers {\n        abs_diff = number - mean\n   \
    \     if abs_diff < 0 {\n            abs_diff = -abs_diff\n        }\n       \
    \ abs_diff_sum += abs_diff\n    }\n    mad = abs_diff_sum / float64(len(numbers))\n\
    \n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074053
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    mean := mean(numbers)\n    var sum float64 = 0\n \
    \   for _, number := range numbers {\n        sum += abs(number - mean)\n    }\n\
    \    return sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa8pzpogs_test.go:14:13: undefined: mean

    /tmp/tmpa8pzpogs_test.go:17:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074053
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate mean\n    var sum float64 = 0\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean := sum\
    \ / float64(len(numbers))\n\n    // Calculate absolute difference from mean\n\
    \    var abs_diff_sum float64 = 0\n    for _, number := range numbers {\n    \
    \    abs_diff_sum += abs(number - mean)\n    }\n\n    // Return mean absolute\
    \ difference\n    return abs_diff_sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpylxoo46n_test.go:24:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074053
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var deviation float64 = 0\n    var absolute_deviation float64 = 0\n    var\
    \ mean_absolute_deviation float64 = 0\n\n    for _, number := range numbers {\n\
    \        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\n    for\
    \ _, number := range numbers {\n        deviation = number - mean\n        absolute_deviation\
    \ += deviation\n    }\n    mean_absolute_deviation = absolute_deviation / float64(len(numbers))\n\
    \n    return mean_absolute_deviation\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpklp81fj4_test.go:49: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpklp81fj4_test.go:49:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpklp81fj4_test.go:49: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074053
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64\n    var mean float64\n    var mad\
    \ float64\n    var diff float64\n\n    for _, number := range numbers {\n    \
    \    sum += number\n    }\n    mean = sum / float64(len(numbers))\n\n    for _,\
    \ number := range numbers {\n        diff += number - mean\n    }\n    mad = diff\
    \ / float64(len(numbers))\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp718i0y_h_test.go:47: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp718i0y_h_test.go:47:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp718i0y_h_test.go:47: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074045
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var n int = len(numbers)\n\
    \n    // Calculate the mean of the input numbers\n    for _, num := range numbers\
    \ {\n        sum += num\n    }\n    mean = sum / float64(n)\n\n    // Calculate\
    \ the absolute difference between each element and the mean\n    for _, num :=\
    \ range numbers {\n        abs_diff += abs(num - mean)\n    }\n\n    // Calculate\
    \ the mean absolute deviation\n    mad = abs_diff / float64(n)\n\n    return mad\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0gx9xdnz_test.go:28:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074053
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate mean\n    var sum float64 = 0\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean := sum\
    \ / float64(len(numbers))\n\n    // Calculate MAD\n    var mad float64 = 0\n \
    \   for _, number := range numbers {\n        mad += (number - mean)\n    }\n\
    \    mad /= float64(len(numbers))\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp4qnzu7n__test.go:46: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp4qnzu7n__test.go:46:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp4qnzu7n__test.go:46: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074054
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate mean\n    var sum float64 = 0\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean := sum\
    \ / float64(len(numbers))\n\n    // Calculate absolute difference from mean\n\
    \    var abs_diff float64 = 0\n    for _, number := range numbers {\n        abs_diff\
    \ += number - mean\n    }\n\n    // Calculate mean absolute deviation\n    return\
    \ abs_diff / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpkpms7a7i_test.go:46: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpkpms7a7i_test.go:46:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpkpms7a7i_test.go:46: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074054
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var mad float64 = 0.0\n    var abs_diff float64 = 0.0\n    var n int = len(numbers)\n\
    \n    // Calculate mean\n    for _, number := range numbers {\n        sum +=\
    \ number\n    }\n    mean = sum / float64(n)\n\n    // Calculate MAD\n    for\
    \ _, number := range numbers {\n        abs_diff += math.Abs(number - mean)\n\
    \    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyhnvu8cg_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074053
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var count int = len(numbers)\n\n    // Calculate the\
    \ mean\n    for _, number := range numbers {\n        sum += number\n    }\n \
    \   mean = sum / float64(count)\n\n    // Calculate the MAD\n    for _, number\
    \ := range numbers {\n        mad += math.Abs(number - mean)\n    }\n    mad =\
    \ mad / float64(count)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe62wum20_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074054
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var num_numbers int\
    \ = len(numbers)\n\n    for _, num := range numbers {\n        sum += num\n  \
    \  }\n    mean = sum / float64(num_numbers)\n\n    for _, num := range numbers\
    \ {\n        abs_diff += math.Abs(num - mean)\n    }\n    mad = abs_diff / float64(num_numbers)\n\
    \n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpei5y6zog_test.go:26:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074054
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var abs_deviations []float64 = make([]float64, len(numbers))\n\n    // Calculate\
    \ mean\n    for _, num := range numbers {\n        sum += num\n    }\n    mean\
    \ = sum / float64(len(numbers))\n\n    // Calculate absolute deviations\n    for\
    \ i, num := range numbers {\n        abs_deviations[i] = num - mean\n        if\
    \ abs_deviations[i] < 0 {\n            abs_deviations[i] *= -1\n        }\n  \
    \  }\n\n    // Calculate mean absolute deviation\n    sum = 0\n    for _, num\
    \ := range abs_deviations {\n        sum += num\n    }\n    return sum / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074055
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean\n    var sum float64 = 0\n \
    \   for _, number := range numbers {\n        sum += number\n    }\n    mean :=\
    \ sum / float64(len(numbers))\n\n    // Calculate the absolute difference between\
    \ each element and the mean\n    var abs_diff_sum float64 = 0\n    for _, number\
    \ := range numbers {\n        abs_diff_sum += abs(number - mean)\n    }\n\n  \
    \  // Return the mean absolute difference\n    return abs_diff_sum / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4efxakh__test.go:24:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074054
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var n int = len(numbers)\n\
    \n    // Calculate mean of the dataset\n    for _, num := range numbers {\n  \
    \      sum += num\n    }\n    mean = sum / float64(n)\n\n    // Calculate Mean\
    \ Absolute Deviation\n    for _, num := range numbers {\n        abs_diff += abs(num\
    \ - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphgd4mse6_test.go:28:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074054
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var n int = len(numbers)\n\n    for _, number := range\
    \ numbers {\n        sum += number\n    }\n    mean = sum / float64(n)\n\n   \
    \ for _, number := range numbers {\n        mad += math.Abs(number - mean)\n \
    \   }\n    mad = mad / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9y8sgvpj_test.go:25:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074055
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64\n    var mean float64\n    var deviation\
    \ float64\n    var absolute_deviation float64\n    var mean_absolute_deviation\
    \ float64\n\n    // Calculate the mean\n    for _, number := range numbers {\n\
    \        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\n    //\
    \ Calculate the mean absolute deviation\n    for _, number := range numbers {\n\
    \        deviation = number - mean\n        absolute_deviation = deviation\n \
    \       if absolute_deviation < 0 {\n            absolute_deviation = -absolute_deviation\n\
    \        }\n        mean_absolute_deviation += absolute_deviation\n    }\n   \
    \ mean_absolute_deviation /= float64(len(numbers))\n\n    return mean_absolute_deviation\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // calculate mean\n    var sum float64 = 0\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean := sum\
    \ / float64(len(numbers))\n\n    // calculate absolute difference from mean\n\
    \    var abs_differences []float64\n    for _, number := range numbers {\n   \
    \     abs_differences = append(abs_differences, number - mean)\n    }\n\n    //\
    \ calculate mean of absolute differences\n    var sum_abs_differences float64\
    \ = 0\n    for _, abs_difference := range abs_differences {\n        sum_abs_differences\
    \ += abs_difference\n    }\n    mean_abs_differences := sum_abs_differences /\
    \ float64(len(abs_differences))\n\n    return mean_abs_differences\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpefry57qo_test.go:52: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpefry57qo_test.go:52:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpefry57qo_test.go:52: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate mean\n    var sum float64 = 0\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean := sum\
    \ / float64(len(numbers))\n\n    // Calculate absolute difference between each\
    \ element and mean\n    var abs_differences []float64\n    for _, number := range\
    \ numbers {\n        abs_differences = append(abs_differences, number - mean)\n\
    \    }\n\n    // Calculate mean of absolute differences\n    var sum_abs_differences\
    \ float64 = 0\n    for _, abs_difference := range abs_differences {\n        sum_abs_differences\
    \ += abs_difference\n    }\n    mean_abs_differences := sum_abs_differences /\
    \ float64(len(abs_differences))\n\n    return mean_abs_differences\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp99jkhwgq_test.go:52: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp99jkhwgq_test.go:52:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp99jkhwgq_test.go:52: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate mean\n    var sum float64 = 0\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean := sum\
    \ / float64(len(numbers))\n\n    // Calculate MAD\n    var mad float64 = 0\n \
    \   for _, number := range numbers {\n        mad += math.Abs(number - mean)\n\
    \    }\n    mad /= float64(len(numbers))\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsghp21pl_test.go:24:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074043
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the dataset\n    var sum\
    \ float64 = 0\n    for _, number := range numbers {\n        sum += number\n \
    \   }\n    mean := sum / float64(len(numbers))\n\n    // Calculate the absolute\
    \ difference between each element and the mean\n    var abs_differences []float64\n\
    \    for _, number := range numbers {\n        abs_differences = append(abs_differences,\
    \ number - mean)\n    }\n\n    // Calculate the mean of the absolute differences\n\
    \    var abs_diff_sum float64 = 0\n    for _, abs_diff := range abs_differences\
    \ {\n        abs_diff_sum += abs_diff\n    }\n    mean_absolute_deviation := abs_diff_sum\
    \ / float64(len(abs_differences))\n\n    return mean_absolute_deviation\n}\n\n\
    func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp3on1z5mc_test.go:52: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp3on1z5mc_test.go:52:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp3on1z5mc_test.go:52: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var n int = len(numbers)\n\
    \n    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / float64(n)\n\n    for _, number := range numbers {\n        abs_diff\
    \ += math.Abs(number - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return\
    \ mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsoczrr_v_test.go:26:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074038
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var abs_diff_sum float64\
    \ = 0\n    var abs_diff_mean float64 = 0\n\n    // Calculate mean\n    for _,\
    \ number := range numbers {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\
    \n    // Calculate absolute difference between each element and mean\n    for\
    \ _, number := range numbers {\n        abs_diff = number - mean\n        if abs_diff\
    \ < 0 {\n            abs_diff = -abs_diff\n        }\n        abs_diff_sum +=\
    \ abs_diff\n    }\n\n    // Calculate mean absolute difference\n    abs_diff_mean\
    \ = abs_diff_sum / float64(len(numbers))\n\n    return abs_diff_mean\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpifwps9ag_test.go:16:9: mad declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074056
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var mad float64 = 0.0\n    var abs_diff float64 = 0.0\n    var n int = len(numbers)\n\
    \n    // Calculate mean of the dataset\n    for _, number := range numbers {\n\
    \        sum += number\n    }\n    mean = sum / float64(n)\n\n    // Calculate\
    \ MAD\n    for _, number := range numbers {\n        abs_diff += math.Abs(number\
    \ - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplyn293us_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074056
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the input numbers\n    mean\
    \ := 0.0\n    for _, number := range numbers {\n        mean += number\n    }\n\
    \    mean /= float64(len(numbers))\n\n    // Calculate the absolute difference\
    \ between each element and the mean\n    // and sum them up\n    sum_of_absolute_differences\
    \ := 0.0\n    for _, number := range numbers {\n        sum_of_absolute_differences\
    \ += math.Abs(number - mean)\n    }\n\n    // Return the average absolute difference\n\
    \    return sum_of_absolute_differences / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhq9zwae_test.go:25:40: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074057
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate mean of the dataset\n    mean := 0.0\n\
    \    for _, number := range numbers {\n        mean += number\n    }\n    mean\
    \ /= float64(len(numbers))\n\n    // Calculate absolute difference between each\
    \ element and mean\n    // and sum them up\n    sum_absolute_difference := 0.0\n\
    \    for _, number := range numbers {\n        sum_absolute_difference += abs(number\
    \ - mean)\n    }\n\n    // Calculate Mean Absolute Deviation\n    return sum_absolute_difference\
    \ / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp74moaycg_test.go:25:36: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074057
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate mean of the dataset\n    var sum float64\
    \ = 0\n    for _, number := range numbers {\n        sum += number\n    }\n  \
    \  mean := sum / float64(len(numbers))\n\n    // Calculate absolute difference\
    \ between each element and mean\n    var sum_of_abs_diff float64 = 0\n    for\
    \ _, number := range numbers {\n        sum_of_abs_diff += math.Abs(number - mean)\n\
    \    }\n\n    // Return mean of absolute differences\n    return sum_of_abs_diff\
    \ / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5l64sic6_test.go:24:28: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074057
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var abs_deviation float64 = 0\n    var mean_absolute_deviation float64 = 0\n\
    \n    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / float64(len(numbers))\n\n    for _, number := range numbers {\n    \
    \    abs_deviation += abs(number - mean)\n    }\n    mean_absolute_deviation =\
    \ abs_deviation / float64(len(numbers))\n\n    return mean_absolute_deviation\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8i048n9_test.go:25:26: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074048
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var abs_deviations float64 = 0\n    var mean_abs_deviation float64 = 0\n\n\
    \    // Calculate the mean\n    for _, number := range numbers {\n        sum\
    \ += number\n    }\n    mean = sum / float64(len(numbers))\n\n    // Calculate\
    \ the mean absolute deviation\n    for _, number := range numbers {\n        abs_deviations\
    \ += abs(number - mean)\n    }\n    mean_abs_deviation = abs_deviations / float64(len(numbers))\n\
    \n    return mean_abs_deviation\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp01co79y8_test.go:27:27: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074057
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var mad float64 = 0.0\n    var n int = len(numbers)\n\n    // Calculate the\
    \ mean of the dataset\n    for _, number := range numbers {\n        sum += number\n\
    \    }\n    mean = sum / float64(n)\n\n    // Calculate the absolute difference\
    \ between each element and the mean\n    for _, number := range numbers {\n  \
    \      mad += math.Abs(number - mean)\n    }\n\n    // Return the average absolute\
    \ difference\n    return mad / float64(n)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp92hu9iy9_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074057
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var mad float64 = 0.0\n    var count float64 = 0.0\n    var abs_diff float64\
    \ = 0.0\n\n    for _, number := range numbers {\n        sum += number\n     \
    \   count += 1.0\n    }\n    mean = sum / count\n\n    for _, number := range\
    \ numbers {\n        abs_diff += math.Abs(number - mean)\n    }\n    mad = abs_diff\
    \ / count\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp99ce06kl_test.go:27:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074057
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate mean\n    var sum float64 = 0\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n    mean := sum\
    \ / float64(len(numbers))\n\n    // Calculate MAD\n    var sum_of_absolute_differences\
    \ float64 = 0\n    for _, number := range numbers {\n        sum_of_absolute_differences\
    \ += float64(abs(number - mean))\n    }\n    return sum_of_absolute_differences\
    \ / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptmcmwlbn_test.go:24:48: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074041
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var diff float64 = 0\n    var n int = len(numbers)\n\
    \n    // Calculate mean\n    for _, number := range numbers {\n        sum +=\
    \ number\n    }\n    mean = sum / float64(n)\n\n    // Calculate MAD\n    for\
    \ _, number := range numbers {\n        diff += abs(number - mean)\n    }\n  \
    \  mad = diff / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpxbq30q_test.go:28:17: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074057
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var n int = len(numbers)\n\
    \n    for _, num := range numbers {\n        sum += num\n    }\n    mean = sum\
    \ / float64(n)\n\n    for _, num := range numbers {\n        abs_diff += math.Abs(num\
    \ - mean)\n    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5pzr28ek_test.go:26:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074040
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var i int = 0\n\n  \
    \  // Calculate mean\n    for i = 0; i < len(numbers); i++ {\n        sum += numbers[i]\n\
    \    }\n    mean = sum / float64(len(numbers))\n\n    // Calculate MAD\n    for\
    \ i = 0; i < len(numbers); i++ {\n        abs_diff = numbers[i] - mean\n     \
    \   if abs_diff < 0 {\n            abs_diff = -abs_diff\n        }\n        mad\
    \ += abs_diff\n    }\n    mad = mad / float64(len(numbers))\n\n    return mad\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074041
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var abs_diff_sum float64\
    \ = 0\n    var abs_diff_mean float64 = 0\n\n    // Calculate mean\n    for _,\
    \ num := range numbers {\n        sum += num\n    }\n    mean = sum / float64(len(numbers))\n\
    \n    // Calculate absolute difference between each element and mean\n    for\
    \ _, num := range numbers {\n        abs_diff = num - mean\n        if abs_diff\
    \ < 0 {\n            abs_diff = -abs_diff\n        }\n        abs_diff_sum +=\
    \ abs_diff\n    }\n\n    // Calculate mean absolute difference\n    abs_diff_mean\
    \ = abs_diff_sum / float64(len(numbers))\n\n    return abs_diff_mean\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo_va46ne_test.go:16:9: mad declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074057
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var n int = len(numbers)\n\
    \n    // Calculate the mean\n    for _, number := range numbers {\n        sum\
    \ += number\n    }\n    mean = sum / float64(n)\n\n    // Calculate the MAD\n\
    \    for _, number := range numbers {\n        abs_diff += math.Abs(number - mean)\n\
    \    }\n    mad = abs_diff / float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb79cixlb_test.go:28:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074057
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var diff float64 = 0\n    var abs_diff float64 = 0\n\
    \n    // Calculate the mean of the input numbers\n    for _, number := range numbers\
    \ {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\n\
    \    // Calculate the absolute difference between each number and the mean\n \
    \   for _, number := range numbers {\n        diff = number - mean\n        if\
    \ diff < 0 {\n            abs_diff = -diff\n        } else {\n            abs_diff\
    \ = diff\n        }\n        mad += abs_diff\n    }\n\n    // Return the average\
    \ absolute difference\n    return mad / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074041
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var n int = len(numbers)\n\n    for _, x := range\
    \ numbers {\n        sum += x\n    }\n    mean = sum / float64(n)\n\n    for _,\
    \ x := range numbers {\n        mad += abs(x - mean)\n    }\n    mad = mad / float64(n)\n\
    \n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpecrowma7_test.go:25:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074058
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the input numbers\n    mean\
    \ := 0.0\n    for _, number := range numbers {\n        mean += number\n    }\n\
    \    mean /= float64(len(numbers))\n\n    // Calculate the absolute difference\
    \ between each number and the mean\n    // and sum them up\n    sum_absolute_differences\
    \ := 0.0\n    for _, number := range numbers {\n        sum_absolute_differences\
    \ += math.Abs(number - mean)\n    }\n\n    // Return the average absolute difference\n\
    \    return sum_absolute_differences / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp97jawq2u_test.go:25:37: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074058
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate mean\n    var sum float64 = 0\n    for\
    \ _, value := range numbers {\n        sum += value\n    }\n    mean := sum /\
    \ float64(len(numbers))\n\n    // Calculate absolute difference between each element\
    \ and mean\n    var abs_diff float64 = 0\n    for _, value := range numbers {\n\
    \        abs_diff += abs(value - mean)\n    }\n\n    // Calculate mean absolute\
    \ deviation\n    return abs_diff / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsqufct_4_test.go:24:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var i int = 0\n\n  \
    \  // Calculate mean\n    for i = 0; i < len(numbers); i++ {\n        sum += numbers[i]\n\
    \    }\n    mean = sum / float64(len(numbers))\n\n    // Calculate MAD\n    for\
    \ i = 0; i < len(numbers); i++ {\n        abs_diff = numbers[i] - mean\n     \
    \   if abs_diff < 0 {\n            abs_diff = -abs_diff\n        }\n        mad\
    \ += abs_diff\n    }\n    mad = mad / float64(len(numbers))\n\n    return mad\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074041
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the dataset\n    mean :=\
    \ 0.0\n    for _, number := range numbers {\n        mean += number\n    }\n \
    \   mean /= float64(len(numbers))\n\n    // Calculate the absolute difference\
    \ between each element and the mean\n    // and sum them up\n    sum_absolute_differences\
    \ := 0.0\n    for _, number := range numbers {\n        sum_absolute_differences\
    \ += math.Abs(number - mean)\n    }\n\n    // Return the average absolute difference\n\
    \    return sum_absolute_differences / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1da6l8n0_test.go:25:37: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074043
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    var abs_diff float64 = 0\n    var i int = 0\n\n  \
    \  // Calculate the mean of the dataset\n    for i = 0; i < len(numbers); i++\
    \ {\n        sum += numbers[i]\n    }\n    mean = sum / float64(len(numbers))\n\
    \n    // Calculate the absolute difference between each element and the mean\n\
    \    for i = 0; i < len(numbers); i++ {\n        abs_diff += abs(numbers[i] -\
    \ mean)\n    }\n\n    // Calculate the mean absolute deviation\n    mad = abs_diff\
    \ / float64(len(numbers))\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi2qbcgdm_test.go:28:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074058
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n\
    \    var mad float64 = 0.0\n    var n float64 = float64(len(numbers))\n\n    for\
    \ _, num := range numbers {\n        sum += num\n    }\n    mean = sum / n\n\n\
    \    for _, num := range numbers {\n        mad += math.Abs(num - mean)\n    }\n\
    \    mad = mad / n\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1uljho_r_test.go:25:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074058
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    var sum float64 = 0\n    var mean float64 = 0\n  \
    \  var mad float64 = 0\n    for _, number := range numbers {\n        sum += number\n\
    \    }\n    mean = sum / float64(len(numbers))\n    for _, number := range numbers\
    \ {\n        mad += abs(number - mean)\n    }\n    return mad / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpohfx4bsy_test.go:22:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074058
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers\
    \ []float64) float64 {\n    // Calculate the mean of the dataset\n    var sum\
    \ float64 = 0\n    for _, number := range numbers {\n        sum += number\n \
    \   }\n    mean := sum / float64(len(numbers))\n\n    // Calculate the absolute\
    \ difference between each element and the mean\n    var abs_diffs []float64\n\
    \    for _, number := range numbers {\n        abs_diffs = append(abs_diffs, number\
    \ - mean)\n    }\n\n    // Calculate the average of the absolute differences\n\
    \    var abs_diffs_sum float64 = 0\n    for _, abs_diff := range abs_diffs {\n\
    \        abs_diffs_sum += abs_diff\n    }\n    return abs_diffs_sum / float64(len(abs_diffs))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp4sr3sxn__test.go:50: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp4sr3sxn__test.go:50:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp4sr3sxn__test.go:50: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074058
