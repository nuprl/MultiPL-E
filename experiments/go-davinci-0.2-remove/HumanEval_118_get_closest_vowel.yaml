name: HumanEval_118_get_closest_vowel
language: go_test.go
prompt: "package get_closest_vowel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// You are given a word. Your task is to find the closest vowel that stands\
  \ between \n// two consonants from the right side of the word (case sensitive).\n\
  // Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n// find any vowel met the above condition. \n// You may assume that the\
  \ given string contains English letter only.\n// Example:\nfunc get_closest_vowel(word\
  \ string) string {\n"
tests: "func TestGet_Closest_Vowel(t *testing.T) {\n  candidate := get_closest_vowel\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"yogurt\"), expected: \"u\" },\n\
  \     { actual: candidate(\"full\"), expected: \"u\" },\n     { actual: candidate(\"\
  easy\"), expected: \"\" },\n     { actual: candidate(\"eAsy\"), expected: \"\" },\n\
  \     { actual: candidate(\"ali\"), expected: \"\" },\n     { actual: candidate(\"\
  bad\"), expected: \"a\" },\n     { actual: candidate(\"most\"), expected: \"o\"\
  \ },\n     { actual: candidate(\"ab\"), expected: \"\" },\n     { actual: candidate(\"\
  ba\"), expected: \"\" },\n     { actual: candidate(\"quick\"), expected: \"\" },\n\
  \     { actual: candidate(\"anime\"), expected: \"i\" },\n     { actual: candidate(\"\
  Asia\"), expected: \"\" },\n     { actual: candidate(\"Above\"), expected: \"o\"\
  \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
  , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for\
    \ i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n    \
    \        if word[i] == v[0] {\n                return v\n            }\n     \
    \   }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"\
    i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _,\
    \ v := range vowels {\n            if word[i] == v[0] {\n                return\
    \ string(word[i])\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   var vowels = map[string]bool{\"a\": true, \"e\": true, \"i\": true, \"o\"\
    : true, \"u\": true}\n    var last_vowel string\n    var last_consonant string\n\
    \    for i := len(word) - 1; i >= 0; i-- {\n        char := string(word[i])\n\
    \        if vowels[char] {\n            last_vowel = char\n        } else {\n\
    \            if last_vowel != \"\" {\n                return last_vowel\n    \
    \        }\n            last_consonant = char\n        }\n    }\n    return \"\
    \"\n}\n", "    var vowels = map[string]bool{\n        \"a\": true,\n        \"\
    e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n\
    \    }\n    var prev_consonant bool\n    var closest_vowel string\n    for i :=\
    \ len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])] {\n       \
    \     if prev_consonant {\n                closest_vowel = string(word[i])\n \
    \               break\n            }\n        } else {\n            prev_consonant\
    \ = true\n        }\n    }\n    return closest_vowel\n}\n", "    if len(word)\
    \ < 3 {\n        return \"\"\n    }\n    vowels := []string{\"a\", \"e\", \"i\"\
    , \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i],\
    \ vowels) {\n            if i == len(word) - 1 {\n                continue\n \
    \           }\n            if is_vowel(word[i + 1], vowels) {\n              \
    \  continue\n            }\n            return string(word[i])\n        }\n  \
    \  }\n    return \"\"\n}\n", "    if len(word) == 0 {\n        return \"\"\n \
    \   }\n    vowels := map[string]bool{\"a\": true, \"e\": true, \"i\": true, \"\
    o\": true, \"u\": true}\n    consonants := map[string]bool{\"b\": true, \"c\"\
    : true, \"d\": true, \"f\": true, \"g\": true, \"h\": true, \"j\": true, \"k\"\
    : true, \"l\": true, \"m\": true, \"n\": true, \"p\": true, \"q\": true, \"r\"\
    : true, \"s\": true, \"t\": true, \"v\": true, \"w\": true, \"x\": true, \"y\"\
    : true, \"z\": true}\n    for i := len(word) - 1; i >= 0; i-- {\n        if _,\
    \ ok := consonants[string(word[i])]; ok {\n            for j := i - 1; j >= 0;\
    \ j-- {\n                if _, ok := vowels[string(word[j])]; ok {\n         \
    \           return string(word[j])\n                }\n            }\n       \
    \     return \"\"\n        }\n    }\n    return \"\"\n}\n", "    vowels := map[string]bool{\n\
    \        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"\
    o\": true,\n        \"u\": true,\n    }\n    var last_consonant string\n    var\
    \ last_vowel string\n    for _, c := range word {\n        if vowels[string(c)]\
    \ {\n            last_vowel = string(c)\n        } else {\n            last_consonant\
    \ = string(c)\n        }\n        if last_consonant != \"\" && last_vowel != \"\
    \" {\n            return last_vowel\n        }\n    }\n    return \"\"\n}\n",
  "    vowels := \"aeiou\"\n    last_consonant := -1\n    for i := len(word) - 1;\
    \ i >= 0; i-- {\n        if strings.Contains(vowels, string(word[i])) {\n    \
    \        if last_consonant == -1 {\n                return \"\"\n            }\n\
    \            return string(word[i])\n        }\n        last_consonant = i\n \
    \   }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"\
    o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i],\
    \ vowels) {\n            if i == len(word) - 1 {\n                return \"\"\n\
    \            }\n            if !is_vowel(word[i + 1], vowels) {\n            \
    \    return string(word[i])\n            }\n        }\n    }\n    return \"\"\n\
    }\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i :=\
    \ len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n         \
    \   if word[i] == v[0] {\n                return string(word[i])\n           \
    \ }\n        }\n    }\n    return \"\"\n}\n", "    var vowels = []string{\"a\"\
    , \"e\", \"i\", \"o\", \"u\"}\n    var result string\n    var index int\n    var\
    \ found bool\n    for i := len(word) - 1; i >= 0; i-- {\n        for j := 0; j\
    \ < len(vowels); j++ {\n            if word[i] == vowels[j][0] {\n           \
    \     if found {\n                    if i > index {\n                       \
    \ result = \"\"\n                    } else {\n                        result\
    \ = string(word[i])\n                    }\n                } else {\n       \
    \             result = string(word[i])\n                    index = i\n      \
    \              found = true\n                }\n            }\n        }\n   \
    \     if found && word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i]\
    \ != 'o' && word[i] != 'u' {\n            break\n        }\n    }\n    return\
    \ result\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n \
    \   var last_consonant_index int\n    var last_vowel_index int\n    var last_vowel\
    \ string\n    for i, c := range word {\n        if is_vowel(c) {\n           \
    \ last_vowel_index = i\n            last_vowel = string(c)\n        } else {\n\
    \            if last_vowel_index > last_consonant_index {\n                return\
    \ last_vowel\n            }\n            last_consonant_index = i\n        }\n\
    \    }\n    return \"\"\n}\n", "    vowels := map[string]bool{\"a\": true, \"\
    e\": true, \"i\": true, \"o\": true, \"u\": true}\n    var last_vowel string\n\
    \    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])]\
    \ {\n            last_vowel = string(word[i])\n            break\n        }\n\
    \    }\n    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])]\
    \ {\n            continue\n        }\n        if vowels[string(word[i-1])] {\n\
    \            return string(word[i-1])\n        }\n    }\n    return last_vowel\n\
    }\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i :=\
    \ len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i], vowels) {\n     \
    \       return string(word[i])\n        }\n    }\n    return \"\"\n}\n", "   \
    \ var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var last_vowel_index\
    \ = -1\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels\
    \ {\n            if word[i:i+1] == v {\n                last_vowel_index = i\n\
    \                break\n            }\n        }\n        if last_vowel_index\
    \ != -1 {\n            break\n        }\n    }\n    if last_vowel_index == -1\
    \ {\n        return \"\"\n    }\n    for i := last_vowel_index - 1; i >= 0; i--\
    \ {\n        for _, v := range vowels {\n            if word[i:i+1] == v {\n \
    \               return \"\"\n            }\n        }\n        if word[i:i+1]\
    \ != \" \" {\n            return word[last_vowel_index:last_vowel_index+1]\n \
    \       }\n    }\n    return \"\"\n}\n", "    vowels := map[string]bool{\n   \
    \     \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\"\
    : true,\n        \"u\": true,\n    }\n    var last_consonant string\n    var last_vowel\
    \ string\n    for i := len(word) - 1; i >= 0; i-- {\n        if _, ok := vowels[string(word[i])];\
    \ ok {\n            last_vowel = string(word[i])\n            if last_consonant\
    \ != \"\" {\n                return last_vowel\n            }\n        } else\
    \ {\n            last_consonant = string(word[i])\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := \"aeiou\"\n    var last_consonant_index int\n   \
    \ var last_vowel_index int\n    for i := len(word) - 1; i >= 0; i-- {\n      \
    \  if strings.Contains(vowels, string(word[i])) {\n            last_vowel_index\
    \ = i\n            if last_consonant_index > 0 {\n                return string(word[last_vowel_index])\n\
    \            }\n        } else {\n            last_consonant_index = i\n     \
    \   }\n    }\n    return \"\"\n}\n", "    if len(word) < 3 {\n        return \"\
    \"\n    }\n    vowels := map[string]bool{\"a\": true, \"e\": true, \"i\": true,\
    \ \"o\": true, \"u\": true}\n    for i := len(word) - 1; i >= 0; i-- {\n     \
    \   if vowels[string(word[i])] {\n            if i == len(word) - 1 {\n      \
    \          return \"\"\n            }\n            if !vowels[string(word[i +\
    \ 1])] {\n                return string(word[i])\n            }\n        }\n \
    \   }\n    return \"\"\n}\n", "    var vowels = []string{\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"}\n    var consonants = []string{\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n    var result string\n    var is_vowel\
    \ bool\n    var is_consonant bool\n    var is_first_consonant bool\n    var is_second_consonant\
    \ bool\n    var is_first_vowel bool\n    var is_second_vowel bool\n    var is_first_letter\
    \ bool\n    var is_second_letter bool\n    var is_third_letter bool\n    var is_fourth_letter\
    \ bool\n    var is_fifth_letter bool\n    var is_sixth_letter bool\n    var is_seventh_letter\
    \ bool\n    var is_eighth_letter bool\n    var is_ninth_letter bool\n    var is_tenth_letter\
    \ bool\n    var is_eleventh_letter bool\n    var is_twelfth_letter bool\n    var\
    \ is_thirteenth_letter bool\n    var is_fourteenth_letter bool\n    var is_fifteenth_letter\
    \ bool\n    var is_sixteenth_letter bool\n    var is_seventeenth_letter bool\n\
    \    var is_eighteenth_letter bool\n    var is_nineteenth_letter bool\n    var\
    \ is_twentieth_letter bool\n    var is_twenty_first_letter bool\n    var is_twenty_second_letter\
    \ bool\n    var is_twenty_third_letter bool\n    var is_twenty_fourth_letter bool\n\
    \    var is_twenty_fifth_letter bool\n    var is_twenty_sixth_letter bool\n  \
    \  var is_twenty_seventh_letter bool\n    var is_twenty_eighth_letter bool\n \
    \   var is_twenty_ninth_letter bool\n    var is_thirtieth_letter bool\n    var\
    \ is_thirty_first_letter bool\n    var is_thirty_second_letter bool\n    var is_th",
  "    // your code here\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"\
    e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n       \
    \ if is_vowel(word[i], vowels) {\n            if i == len(word) - 1 {\n      \
    \          continue\n            }\n            if is_vowel(word[i + 1], vowels)\
    \ {\n                continue\n            }\n            return string(word[i])\n\
    \        }\n    }\n    return \"\"\n}\n", "    // your code here\n    return \"\
    \"\n}\n", "    vowels := map[string]int{\"a\":1, \"e\":1, \"i\":1, \"o\":1, \"\
    u\":1}\n    for i := len(word) - 1; i >= 0; i-- {\n        if _, ok := vowels[string(word[i])];\
    \ ok {\n            if i == len(word) - 1 {\n                return \"\"\n   \
    \         }\n            if _, ok := vowels[string(word[i+1])]; !ok {\n      \
    \          return string(word[i])\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := map[rune]bool{'a': true, 'e': true, 'i': true, 'o':\
    \ true, 'u': true}\n    var last_vowel rune\n    for i := len(word) - 1; i >=\
    \ 0; i-- {\n        if vowels[rune(word[i])] {\n            last_vowel = rune(word[i])\n\
    \            break\n        }\n    }\n    for i := len(word) - 1; i >= 0; i--\
    \ {\n        if !vowels[rune(word[i])] {\n            if i == len(word) - 1 {\n\
    \                return string(last_vowel)\n            }\n            if vowels[rune(word[i+1])]\
    \ {\n                return string(rune(word[i+1]))\n            }\n        }\n\
    \    }\n    return \"\"\n}\n", "    vowels := \"aeiou\"\n    var result string\n\
    \    for i := len(word) - 1; i >= 0; i-- {\n        if strings.Contains(vowels,\
    \ string(word[i])) {\n            result = string(word[i])\n            break\n\
    \        }\n    }\n    return result\n}\n", "    vowels := []string{\"a\", \"\
    e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n       \
    \ if contains(vowels, string(word[i])) {\n            if i == len(word) - 1 {\n\
    \                continue\n            }\n            if i == 0 {\n          \
    \      continue\n            }\n            if contains(vowels, string(word[i+1]))\
    \ {\n                continue\n            }\n            if contains(vowels,\
    \ string(word[i-1])) {\n                continue\n            }\n            return\
    \ string(word[i])\n        }\n    }\n    return \"\"\n}\n", "    var vowels =\
    \ map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\"\
    : true,\n        \"o\": true,\n        \"u\": true,\n    }\n    var last_consonant_index\
    \ int\n    var last_vowel_index int\n    var last_vowel string\n    for i, c :=\
    \ range word {\n        if vowels[string(c)] {\n            last_vowel_index =\
    \ i\n            last_vowel = string(c)\n        } else {\n            if last_vowel_index\
    \ > last_consonant_index {\n                return last_vowel\n            }\n\
    \            last_consonant_index = i\n        }\n    }\n    return \"\"\n}\n",
  "    // your code here\n    return \"\"\n}\n", "    vowels := map[string]bool{\n\
    \        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"\
    o\": true,\n        \"u\": true,\n    }\n    var closest_vowel string\n    var\
    \ closest_vowel_index int\n    for i := len(word) - 1; i >= 0; i-- {\n       \
    \ if vowels[string(word[i])] {\n            closest_vowel = string(word[i])\n\
    \            closest_vowel_index = i\n            break\n        }\n    }\n  \
    \  if closest_vowel_index == 0 {\n        return \"\"\n    }\n    for i := closest_vowel_index\
    \ - 1; i >= 0; i-- {\n        if !vowels[string(word[i])] {\n            return\
    \ closest_vowel\n        }\n    }\n    return \"\"\n}\n", "    vowels := map[string]bool{\"\
    a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    var last_consonant\
    \ string\n    var last_vowel string\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if vowels[string(word[i])] {\n            last_vowel = string(word[i])\n\
    \        } else {\n            if last_vowel != \"\" {\n                return\
    \ last_vowel\n            }\n            last_consonant = string(word[i])\n  \
    \      }\n    }\n    return \"\"\n}\n", "    var vowels = []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    var result string\n    var distance int\n    var found\
    \ bool\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels\
    \ {\n            if word[i] == v[0] {\n                if !found {\n         \
    \           result = v\n                    distance = len(word) - i\n       \
    \             found = true\n                } else {\n                    if len(word)\
    \ - i < distance {\n                        result = v\n                     \
    \   distance = len(word) - i\n                    }\n                }\n     \
    \       }\n        }\n    }\n    return result\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if is_vowel(word[i], vowels) {\n            if i == len(word) - 1 {\n\
    \                return \"\"\n            }\n            if !is_vowel(word[i +\
    \ 1], vowels) {\n                return string(word[i])\n            }\n     \
    \   }\n    }\n    return \"\"\n}\n", "    var vowels = map[string]bool{\n    \
    \    \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\":\
    \ true,\n        \"u\": true,\n    }\n    var last_consonant_index int = -1\n\
    \    var last_vowel_index int = -1\n    for i, c := range word {\n        if vowels[string(c)]\
    \ {\n            last_vowel_index = i\n        } else {\n            if last_vowel_index\
    \ > last_consonant_index {\n                return string(word[last_vowel_index])\n\
    \            }\n            last_consonant_index = i\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n\
    \            if word[i] == v[0] {\n                return string(word[i])\n  \
    \          }\n        }\n    }\n    return \"\"\n}\n", "    var vowels = []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    var result string\n    var min_distance\
    \ = len(word)\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v :=\
    \ range vowels {\n            if word[i] == v[0] {\n                var distance\
    \ = len(word) - i\n                if distance < min_distance {\n            \
    \        min_distance = distance\n                    result = v\n           \
    \     }\n            }\n        }\n    }\n    return result\n}\n", "    var vowels\
    \ = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\"\
    : true,\n        \"o\": true,\n        \"u\": true,\n    }\n    var result string\n\
    \    var last_vowel_index int\n    for i := len(word) - 1; i >= 0; i-- {\n   \
    \     if _, ok := vowels[string(word[i])]; ok {\n            last_vowel_index\
    \ = i\n            break\n        }\n    }\n    for i := last_vowel_index - 1;\
    \ i >= 0; i-- {\n        if _, ok := vowels[string(word[i])]; !ok {\n        \
    \    result = string(word[last_vowel_index])\n            break\n        }\n \
    \   }\n    return result\n}\n", "    if len(word) < 3 {\n        return \"\"\n\
    \    }\n    for i := len(word) - 1; i >= 2; i-- {\n        if is_vowel(word[i])\
    \ {\n            if !is_vowel(word[i-1]) && !is_vowel(word[i-2]) {\n         \
    \       return string(word[i])\n            }\n        }\n    }\n    return \"\
    \"\n}\n", "    // your code here\n    return \"\"\n}\n", "    var vowels = []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    var result string\n    var distance int\n\
    \    var vowels_found int\n    var last_consonant_index int\n    var last_vowel_index\
    \ int\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels\
    \ {\n            if word[i] == v[0] {\n                if vowels_found == 0 {\n\
    \                    vowels_found++\n                    last_vowel_index = i\n\
    \                    distance = last_consonant_index - last_vowel_index\n    \
    \                result = string(word[i])\n                } else {\n        \
    \            if last_consonant_index - i < distance {\n                      \
    \  distance = last_consonant_index - i\n                        result = string(word[i])\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ vowels_found > 0 {\n            if word[i] != 'a' && word[i] != 'e' && word[i]\
    \ != 'i' && word[i] != 'o' && word[i] != 'u' {\n                last_consonant_index\
    \ = i\n            }\n        }\n    }\n    return result\n}\n", "    vowels :=\
    \ []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >=\
    \ 0; i-- {\n        for _, v := range vowels {\n            if word[i] == v[0]\
    \ {\n                return v\n            }\n        }\n    }\n    return \"\"\
    \n}\n", "    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\"\
    : true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n  \
    \  }\n    var prev_is_vowel = false\n    var result string\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if vowels[string(word[i])] {\n            if !prev_is_vowel\
    \ {\n                result = string(word[i])\n                break\n       \
    \     }\n            prev_is_vowel = true\n        } else {\n            prev_is_vowel\
    \ = false\n        }\n    }\n    return result\n}\n", "    vowels := map[string]bool{\n\
    \        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"\
    o\": true,\n        \"u\": true,\n    }\n    for i := len(word) - 1; i >= 0; i--\
    \ {\n        if vowels[string(word[i])] {\n            if i == len(word) - 1 {\n\
    \                return \"\"\n            }\n            if !vowels[string(word[i+1])]\
    \ {\n                return string(word[i])\n            }\n        }\n    }\n\
    \    return \"\"\n}\n", "    vowels := map[rune]bool{'a': true, 'e': true, 'i':\
    \ true, 'o': true, 'u': true}\n    var prev_vowel rune\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if vowels[rune(word[i])] {\n            prev_vowel\
    \ = rune(word[i])\n            break\n        }\n    }\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if !vowels[rune(word[i])] {\n            if vowels[prev_vowel]\
    \ {\n                return string(prev_vowel)\n            }\n        } else\
    \ {\n            prev_vowel = rune(word[i])\n        }\n    }\n    return \"\"\
    \n}\n", "    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var\
    \ result string\n    var last_vowel string\n    var last_consonant string\n  \
    \  for i := len(word) - 1; i >= 0; i-- {\n        if contains(vowels, string(word[i]))\
    \ {\n            last_vowel = string(word[i])\n            if last_consonant !=\
    \ \"\" {\n                result = last_vowel\n                break\n       \
    \     }\n        } else {\n            last_consonant = string(word[i])\n    \
    \    }\n    }\n    return result\n}\n", "    vowels := []string{\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for\
    \ _, v := range vowels {\n            if word[i] == v[0] {\n                return\
    \ string(word[i])\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := \"aeiou\"\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ strings.Contains(vowels, string(word[i])) {\n            if i == len(word) -\
    \ 1 {\n                return \"\"\n            } else if i == 0 {\n         \
    \       return \"\"\n            } else if strings.Contains(vowels, string(word[i\
    \ + 1])) {\n                return \"\"\n            } else {\n              \
    \  return string(word[i])\n            }\n        }\n    }\n    return \"\"\n\
    }\n", "    vowels := map[rune]bool{'a': true, 'e': true, 'i': true, 'o': true,\
    \ 'u': true}\n    var last_consonant rune\n    var last_vowel rune\n    for _,\
    \ c := range word {\n        if vowels[c] {\n            last_vowel = c\n    \
    \    } else {\n            last_consonant = c\n        }\n        if last_consonant\
    \ != 0 && last_vowel != 0 {\n            return string(last_vowel)\n        }\n\
    \    }\n    return \"\"\n}\n", "    vowels := map[string]bool{\n        \"a\"\
    : true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n  \
    \      \"u\": true,\n    }\n    for i := len(word) - 1; i >= 0; i-- {\n      \
    \  if vowels[string(word[i])] {\n            return string(word[i])\n        }\n\
    \    }\n    return \"\"\n}\n", "    vowels := map[string]bool{\"a\": true, \"\
    e\": true, \"i\": true, \"o\": true, \"u\": true}\n    last_vowel := \"\"\n  \
    \  for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])] {\n\
    \            last_vowel = string(word[i])\n            break\n        }\n    }\n\
    \    if last_vowel == \"\" {\n        return \"\"\n    }\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if vowels[string(word[i])] {\n            continue\n\
    \        }\n        if i > 0 && vowels[string(word[i-1])] {\n            return\
    \ string(word[i-1])\n        }\n    }\n    return last_vowel\n}\n", "    vowels\
    \ := map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"\
    i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    var prev_char,\
    \ curr_char string\n    for i := len(word) - 1; i >= 0; i-- {\n        curr_char\
    \ = string(word[i])\n        if vowels[curr_char] {\n            if prev_char\
    \ != \"\" && !vowels[prev_char] {\n                return curr_char\n        \
    \    }\n        }\n        prev_char = curr_char\n    }\n    return \"\"\n}\n",
  "    vowels := map[string]bool{\"a\": true, \"e\": true, \"i\": true, \"o\": true,\
    \ \"u\": true}\n    last_vowel := \"\"\n    for i := len(word) - 1; i >= 0; i--\
    \ {\n        if vowels[string(word[i])] {\n            last_vowel = string(word[i])\n\
    \            break\n        }\n    }\n    for i := len(word) - 1; i >= 0; i--\
    \ {\n        if !vowels[string(word[i])] {\n            if i == len(word) - 1\
    \ {\n                return \"\"\n            }\n            if vowels[string(word[i\
    \ + 1])] {\n                return string(word[i + 1])\n            }\n      \
    \  }\n    }\n    return last_vowel\n}\n", "    var vowels = []string{\"a\", \"\
    e\", \"i\", \"o\", \"u\"}\n    var result string\n    var prev_char string\n \
    \   var prev_prev_char string\n    for i := len(word) - 1; i >= 0; i-- {\n   \
    \     if is_vowel(word[i]) {\n            if !is_vowel(prev_char) {\n        \
    \        result = string(word[i])\n                break\n            }\n    \
    \    } else {\n            if is_vowel(prev_char) && !is_vowel(prev_prev_char)\
    \ {\n                result = string(prev_char)\n                break\n     \
    \       }\n        }\n        prev_prev_char = prev_char\n        prev_char =\
    \ string(word[i])\n    }\n    return result\n}\n", "    vowels := map[string]bool{\"\
    a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if vowels[string(word[i])] {\n            if i >\
    \ 0 && !vowels[string(word[i-1])] {\n                return string(word[i])\n\
    \            }\n        }\n    }\n    return \"\"\n}\n", "    vowels := \"aeiou\"\
    \n    for i := len(word) - 1; i >= 0; i-- {\n        if strings.Contains(vowels,\
    \ string(word[i])) {\n            if i > 0 && !strings.Contains(vowels, string(word[i-1]))\
    \ {\n                return string(word[i])\n            }\n        }\n    }\n\
    \    return \"\"\n}\n", "    if len(word) < 3 {\n        return \"\"\n    }\n\
    \    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i], vowels) {\n            if i\
    \ > 0 && !is_vowel(word[i-1], vowels) {\n                return string(word[i])\n\
    \            }\n        }\n    }\n    return \"\"\n}\n", "    // your code here\n\
    \    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"\
    u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels\
    \ {\n            if word[i] == v[0] {\n                return string(word[i])\n\
    \            }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if is_vowel(word[i], vowels) {\n            if i == len(word) - 1 {\n\
    \                return \"\"\n            }\n            if !is_vowel(word[i+1],\
    \ vowels) {\n                return string(word[i])\n            }\n        }\n\
    \    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"\
    o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i],\
    \ vowels) {\n            if i == len(word) - 1 {\n                return \"\"\n\
    \            }\n            if !is_vowel(word[i+1], vowels) {\n              \
    \  return string(word[i])\n            }\n        }\n    }\n    return \"\"\n\
    }\n", "    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\"\
    : true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n  \
    \  }\n    var last_consonant_index = -1\n    var last_vowel_index = -1\n    for\
    \ i, c := range word {\n        if vowels[string(c)] {\n            last_vowel_index\
    \ = i\n        } else {\n            if last_vowel_index > last_consonant_index\
    \ {\n                return string(word[last_vowel_index])\n            }\n  \
    \          last_consonant_index = i\n        }\n    }\n    return \"\"\n}\n",
  "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i], vowels) {\n            if i\
    \ == len(word) - 1 {\n                return \"\"\n            }\n           \
    \ if !is_vowel(word[i+1], vowels) {\n                return string(word[i])\n\
    \            }\n        }\n    }\n    return \"\"\n}\n", "    var vowels = []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    var result = \"\"\n    var found = false\n\
    \    var last_vowel = \"\"\n    for i := len(word) - 1; i >= 0; i-- {\n      \
    \  for _, v := range vowels {\n            if word[i:i+1] == v {\n           \
    \     last_vowel = word[i:i+1]\n                found = true\n               \
    \ break\n            }\n        }\n        if found {\n            break\n   \
    \     }\n    }\n    if found {\n        for i := len(word) - 1; i >= 0; i-- {\n\
    \            if word[i:i+1] == last_vowel {\n                result = word[i:i+1]\n\
    \                break\n            }\n            for _, v := range vowels {\n\
    \                if word[i:i+1] == v {\n                    result = word[i:i+1]\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\",\
    \ \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range\
    \ vowels {\n            if word[i] == v[0] {\n                return v\n     \
    \       }\n        }\n    }\n    return \"\"\n}\n", "    var vowels = []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    var last_vowel string\n    var last_consonant\
    \ string\n    var last_vowel_index int\n    var last_consonant_index int\n   \
    \ for i, c := range word {\n        if is_vowel(string(c)) {\n            last_vowel\
    \ = string(c)\n            last_vowel_index = i\n        } else {\n          \
    \  last_consonant = string(c)\n            last_consonant_index = i\n        }\n\
    \        if last_vowel != \"\" && last_consonant != \"\" {\n            break\n\
    \        }\n    }\n    if last_vowel == \"\" || last_consonant == \"\" {\n   \
    \     return \"\"\n    }\n    for i := len(word) - 1; i > 0; i-- {\n        if\
    \ is_vowel(string(word[i])) {\n            if last_vowel_index < i && i < last_consonant_index\
    \ {\n                return string(word[i])\n            }\n        }\n    }\n\
    \    return \"\"\n}\n", "    var vowels = []string{\"a\", \"e\", \"i\", \"o\"\
    , \"u\"}\n    var result string\n    var distance int\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i]\
    \ == v[0] {\n                if distance == 0 {\n                    result =\
    \ v\n                    distance = len(word) - i\n                } else if len(word)\
    \ - i < distance {\n                    result = v\n                    distance\
    \ = len(word) - i\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n \
    \   for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i], vowels)\
    \ {\n            if i > 0 && !is_vowel(word[i-1], vowels) {\n                return\
    \ string(word[i])\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i], vowels) {\n            if i\
    \ == len(word) - 1 {\n                return \"\"\n            }\n           \
    \ if is_vowel(word[i+1], vowels) {\n                continue\n            }\n\
    \            return string(word[i])\n        }\n    }\n    return \"\"\n}\n",
  "    vowels := \"aeiou\"\n    var last_vowel_index int = -1\n    var last_consonant_index\
    \ int = -1\n    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[strings.Index(vowels,\
    \ string(word[i]))] != 0 {\n            last_vowel_index = i\n            if last_consonant_index\
    \ > 0 {\n                return string(word[last_vowel_index])\n            }\n\
    \        } else {\n            last_consonant_index = i\n        }\n    }\n  \
    \  return \"\"\n}\n", "    vowels := map[rune]bool{'a': true, 'e': true, 'i':\
    \ true, 'o': true, 'u': true}\n    var prev_consonant rune\n    var prev_vowel\
    \ rune\n    for _, c := range word {\n        if vowels[c] {\n            prev_vowel\
    \ = c\n        } else {\n            if prev_vowel != 0 {\n                return\
    \ string(prev_vowel)\n            }\n            prev_consonant = c\n        }\n\
    \    }\n    return \"\"\n}\n", "    vowels := map[string]bool{\"a\": true, \"\
    e\": true, \"i\": true, \"o\": true, \"u\": true}\n    last_vowel := \"\"\n  \
    \  for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])] {\n\
    \            last_vowel = string(word[i])\n            break\n        }\n    }\n\
    \    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])]\
    \ {\n            if last_vowel != string(word[i]) {\n                return string(word[i])\n\
    \            }\n        } else {\n            last_vowel = \"\"\n        }\n \
    \   }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"\
    o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i],\
    \ vowels) {\n            if i == len(word) - 1 {\n                return \"\"\n\
    \            }\n            if !is_vowel(word[i + 1], vowels) {\n            \
    \    return string(word[i])\n            }\n        }\n    }\n    return \"\"\n\
    }\n", "    // your code here\n    return \"\"\n}\n", "    if len(word) == 0 {\n\
    \        return \"\"\n    }\n    vowels := map[string]bool{\"a\": true, \"e\"\
    : true, \"i\": true, \"o\": true, \"u\": true}\n    for i := len(word) - 1; i\
    \ >= 0; i-- {\n        if vowels[string(word[i])] {\n            if i == len(word)\
    \ - 1 {\n                return \"\"\n            }\n            if !vowels[string(word[i\
    \ + 1])] {\n                return string(word[i])\n            }\n        }\n\
    \    }\n    return \"\"\n}\n", "    vowels := \"aeiou\"\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if vowels[strings.Index(vowels, string(word[i]))]\
    \ != -1 {\n            return string(word[i])\n        }\n    }\n    return \"\
    \"\n}\n", "    var vowels = map[rune]bool{\n        'a': true,\n        'e': true,\n\
    \        'i': true,\n        'o': true,\n        'u': true,\n    }\n    var prev_consonant\
    \ bool\n    var closest_vowel string\n    for i := len(word) - 1; i >= 0; i--\
    \ {\n        if vowels[rune(word[i])] {\n            if prev_consonant {\n   \
    \             closest_vowel = string(word[i])\n                break\n       \
    \     }\n        } else {\n            prev_consonant = true\n        }\n    }\n\
    \    return closest_vowel\n}\n", "    vowels := map[string]int{\n        \"a\"\
    : 1,\n        \"e\": 1,\n        \"i\": 1,\n        \"o\": 1,\n        \"u\":\
    \ 1,\n    }\n    var closest_vowel string\n    var closest_vowel_index int\n \
    \   var closest_vowel_distance int\n    var prev_char_is_vowel bool\n    var next_char_is_vowel\
    \ bool\n    var prev_char_is_consonant bool\n    var next_char_is_consonant bool\n\
    \    for i, char := range word {\n        if _, ok := vowels[string(char)]; ok\
    \ {\n            prev_char_is_vowel = true\n            next_char_is_vowel = true\n\
    \            if i > 0 {\n                if _, ok := vowels[string(word[i-1])];\
    \ !ok {\n                    prev_char_is_consonant = true\n                }\n\
    \            }\n            if i < len(word) - 1 {\n                if _, ok :=\
    \ vowels[string(word[i+1])]; !ok {\n                    next_char_is_consonant\
    \ = true\n                }\n            }\n            if prev_char_is_consonant\
    \ && next_char_is_consonant {\n                if closest_vowel_distance == 0\
    \ {\n                    closest_vowel_distance = i\n                    closest_vowel_index\
    \ = i\n                    closest_vowel = string(char)\n                } else\
    \ {\n                    if i < closest_vowel_distance {\n                   \
    \     closest_vowel_distance = i\n                        closest_vowel_index\
    \ = i\n                        closest_vowel = string(char)\n                \
    \    }\n                }\n            }\n        }\n    }\n    return closest_vowel\n\
    }\n", "    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var result\
    \ string\n    var found bool\n    var last_consonant_index int\n    var last_vowel_index\
    \ int\n    var vowel_index int\n    var vowel_distance int\n    var min_vowel_distance\
    \ int\n    var min_vowel_index int\n    var min_vowel_index_found bool\n    for\
    \ i := len(word) - 1; i >= 0; i-- {\n        for j := 0; j < len(vowels); j++\
    \ {\n            if word[i] == vowels[j][0] {\n                if found {\n  \
    \                  vowel_index = i\n                    vowel_distance = last_consonant_index\
    \ - vowel_index\n                    if min_vowel_index_found {\n            \
    \            if vowel_distance < min_vowel_distance {\n                      \
    \      min_vowel_distance = vowel_distance\n                            min_vowel_index\
    \ = vowel_index\n                        }\n                    } else {\n   \
    \                     min_vowel_distance = vowel_distance\n                  \
    \      min_vowel_index = vowel_index\n                        min_vowel_index_found\
    \ = true\n                    }\n                } else {\n                  \
    \  last_vowel_index = i\n                }\n            }\n        }\n       \
    \ if !found {\n            if last_vowel_index != i {\n                found =\
    \ true\n                last_consonant_index = i\n            }\n        }\n \
    \   }\n    if min_vowel_index_found {\n        result = string(word[min_vowel_index])\n\
    \    }\n    return result\n}\n", "    var vowels = []string{\"a\", \"e\", \"i\"\
    , \"o\", \"u\"}\n    var prev_char, curr_char, next_char string\n    var prev_char_is_vowel,\
    \ next_char_is_vowel bool\n    var curr_char_index int\n    var closest_vowel\
    \ string\n    var closest_vowel_index int\n    var closest_vowel_distance int\n\
    \    var curr_vowel_distance int\n\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        curr_char = string(word[i])\n        if i == 0 {\n            prev_char\
    \ = \"\"\n        } else {\n            prev_char = string(word[i-1])\n      \
    \  }\n        if i == len(word) - 1 {\n            next_char = \"\"\n        }\
    \ else {\n            next_char = string(word[i+1])\n        }\n\n        prev_char_is_vowel\
    \ = false\n        next_char_is_vowel = false\n        for _, v := range vowels\
    \ {\n            if prev_char == v {\n                prev_char_is_vowel = true\n\
    \            }\n            if next_char == v {\n                next_char_is_vowel\
    \ = true\n            }\n        }\n\n        if !prev_char_is_vowel && !next_char_is_vowel\
    \ {\n            for j, v := range vowels {\n                if curr_char == v\
    \ {\n                    curr_char_index = j\n                    break\n    \
    \            }\n            }\n            curr_vowel_distance = len(vowels) -\
    \ curr_char_index\n            if closest_vowel_distance == 0 || curr_vowel_distance\
    \ < closest_vowel_distance {\n                closest_vowel_distance = curr_vowel_distance\n\
    \                closest_vowel = curr_char\n                closest_vowel_index\
    \ = i\n            }\n        }\n    }\n    return closest_vowel\n}\n", "    vowels\
    \ := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1;\
    \ i >= 0; i-- {\n        if is_vowel(word[i], vowels) {\n            if i > 0\
    \ && !is_vowel(word[i-1], vowels) {\n                return string(word[i])\n\
    \            }\n        }\n    }\n    return \"\"\n}\n", "    if len(word) < 3\
    \ {\n        return \"\"\n    }\n    vowels := []string{\"a\", \"e\", \"i\", \"\
    o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if is_consonant(word[i])\
    \ {\n            for j := i - 1; j >= 0; j-- {\n                if is_vowel(word[j])\
    \ {\n                    return string(word[j])\n                }\n         \
    \   }\n            return \"\"\n        }\n    }\n    return \"\"\n}\n", "   \
    \ vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i], vowels) {\n            if i\
    \ == len(word) - 1 {\n                return \"\"\n            }\n           \
    \ if !is_vowel(word[i+1], vowels) {\n                return string(word[i])\n\
    \            }\n        }\n    }\n    return \"\"\n}\n", "    vowels := map[rune]bool{'a':\
    \ true, 'e': true, 'i': true, 'o': true, 'u': true}\n    last_vowel := -1\n  \
    \  for i := len(word) - 1; i >= 0; i-- {\n        if vowels[rune(word[i])] {\n\
    \            last_vowel = i\n            break\n        }\n    }\n    if last_vowel\
    \ == -1 {\n        return \"\"\n    }\n    for i := last_vowel - 1; i >= 0; i--\
    \ {\n        if !vowels[rune(word[i])] {\n            return string(word[last_vowel])\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowels := map[string]bool{\"a\"\
    : true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if vowels[string(word[i])] {\n            if i +\
    \ 1 < len(word) && !vowels[string(word[i + 1])] {\n                return string(word[i])\n\
    \            }\n        }\n    }\n    return \"\"\n}\n", "    var vowels = []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    var result string\n    var distance int\n\
    \    var prev_is_vowel bool\n    var curr_is_vowel bool\n    var curr_distance\
    \ int\n    var curr_vowel string\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        curr_is_vowel = false\n        for _, v := range vowels {\n         \
    \   if word[i] == v[0] {\n                curr_is_vowel = true\n             \
    \   curr_vowel = v\n                break\n            }\n        }\n        if\
    \ curr_is_vowel {\n            if !prev_is_vowel {\n                curr_distance\
    \ = len(word) - i\n                if distance == 0 || curr_distance < distance\
    \ {\n                    distance = curr_distance\n                    result\
    \ = curr_vowel\n                }\n            }\n        }\n        prev_is_vowel\
    \ = curr_is_vowel\n    }\n    return result\n}\n", "    var vowels = map[string]bool{\n\
    \        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"\
    o\": true,\n        \"u\": true,\n    }\n    var last_consonant_index int\n  \
    \  var last_vowel_index int\n    for i := len(word) - 1; i >= 0; i-- {\n     \
    \   if vowels[string(word[i])] {\n            last_vowel_index = i\n        }\
    \ else {\n            if last_vowel_index > last_consonant_index {\n         \
    \       return string(word[last_vowel_index])\n            }\n            last_consonant_index\
    \ = i\n        }\n    }\n    return \"\"\n}\n", "    var vowels = map[string]bool{\n\
    \        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"\
    o\": true,\n        \"u\": true,\n    }\n    var result string\n    var last_vowel_index\
    \ int\n    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])]\
    \ {\n            last_vowel_index = i\n            break\n        }\n    }\n \
    \   for i := last_vowel_index - 1; i >= 0; i-- {\n        if !vowels[string(word[i])]\
    \ {\n            result = string(word[last_vowel_index])\n            break\n\
    \        }\n    }\n    return result\n}\n", "    vowels := []string{\"a\", \"\
    e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n       \
    \ for _, v := range vowels {\n            if word[i] == v[0] {\n             \
    \   return v\n            }\n        }\n    }\n    return \"\"\n}\n", "    //\
    \ your code here\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for\
    \ _, v := range vowels {\n            if word[i] == v[0] {\n                return\
    \ string(word[i])\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i], vowels) {\n            if i\
    \ < len(word) - 1 && !is_vowel(word[i + 1], vowels) {\n                return\
    \ string(word[i])\n            }\n        } else {\n            if i < len(word)\
    \ - 1 && is_vowel(word[i + 1], vowels) {\n                return string(word[i\
    \ + 1])\n            }\n        }\n    }\n    return \"\"\n}\n", "    var vowels\
    \ = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var result string\n    var\
    \ last_vowel_index int\n    var last_consonant_index int\n    var last_vowel_distance\
    \ int\n    var last_consonant_distance int\n    var found_vowel bool\n    var\
    \ found_consonant bool\n    for i, char := range word {\n        if contains(vowels,\
    \ string(char)) {\n            if !found_vowel {\n                last_vowel_index\
    \ = i\n                found_vowel = true\n            } else {\n            \
    \    last_vowel_distance = i - last_vowel_index\n                last_vowel_index\
    \ = i\n            }\n        } else {\n            if !found_consonant {\n  \
    \              last_consonant_index = i\n                found_consonant = true\n\
    \            } else {\n                last_consonant_distance = i - last_consonant_index\n\
    \                last_consonant_index = i\n            }\n        }\n        if\
    \ found_vowel && found_consonant {\n            if last_vowel_distance < last_consonant_distance\
    \ {\n                result = string(word[last_vowel_index])\n            }\n\
    \        }\n    }\n    return result\n}\n", "    vowels := map[string]bool{\"\
    a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if vowels[string(word[i])] {\n            if i ==\
    \ len(word) - 1 {\n                return \"\"\n            }\n            if\
    \ !vowels[string(word[i + 1])] {\n                return string(word[i])\n   \
    \         }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        for _, v := range vowels {\n            if word[i] == v[0] {\n      \
    \          return string(word[i])\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    var vowels = map[string]int{\n        \"a\": 1,\n        \"\
    e\": 1,\n        \"i\": 1,\n        \"o\": 1,\n        \"u\": 1,\n    }\n    var\
    \ last_vowel string\n    for i := len(word) - 1; i >= 0; i-- {\n        if _,\
    \ ok := vowels[string(word[i])]; ok {\n            last_vowel = string(word[i])\n\
    \            break\n        }\n    }\n    if last_vowel == \"\" {\n        return\
    \ \"\"\n    }\n    var closest_vowel string\n    var closest_vowel_distance int\n\
    \    for i := len(word) - 1; i >= 0; i-- {\n        if _, ok := vowels[string(word[i])];\
    \ ok {\n            if closest_vowel_distance == 0 {\n                closest_vowel\
    \ = string(word[i])\n                closest_vowel_distance = len(word) - i\n\
    \            } else {\n                if len(word) - i < closest_vowel_distance\
    \ {\n                    closest_vowel = string(word[i])\n                   \
    \ closest_vowel_distance = len(word) - i\n                }\n            }\n \
    \       }\n    }\n    return closest_vowel\n}\n", "    vowels := map[rune]bool{'a':\
    \ true, 'e': true, 'i': true, 'o': true, 'u': true}\n    var last_consonant rune\n\
    \    var last_vowel rune\n    for _, c := range word {\n        if vowels[c] {\n\
    \            last_vowel = c\n        } else {\n            last_consonant = c\n\
    \        }\n        if last_consonant != 0 && last_vowel != 0 {\n            return\
    \ string(last_vowel)\n        }\n    }\n    return \"\"\n}\n", "    vowels :=\
    \ map[string]bool{\"a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n\
    \    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])]\
    \ {\n            if i == len(word) - 1 {\n                return \"\"\n      \
    \      }\n            if !vowels[string(word[i + 1])] {\n                return\
    \ string(word[i])\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   if len(word) == 0 {\n        return \"\"\n    }\n    vowels := map[string]bool{\n\
    \        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"\
    o\": true,\n        \"u\": true,\n    }\n    for i := len(word) - 1; i >= 0; i--\
    \ {\n        if vowels[string(word[i])] {\n            if i == len(word) - 1 {\n\
    \                return \"\"\n            }\n            if !vowels[string(word[i+1])]\
    \ {\n                return string(word[i])\n            }\n        }\n    }\n\
    \    return \"\"\n}\n", "    vowels := map[string]bool{\n        \"a\": true,\n\
    \        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"\
    u\": true,\n    }\n    var last_consonant string\n    for i := len(word) - 1;\
    \ i >= 0; i-- {\n        if vowels[string(word[i])] {\n            if last_consonant\
    \ != \"\" {\n                return string(word[i])\n            }\n        }\
    \ else {\n            last_consonant = string(word[i])\n        }\n    }\n   \
    \ return \"\"\n}\n", "    if len(word) < 3 {\n        return \"\"\n    }\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n    \
    \        if i == len(word) - 1 {\n                return \"\"\n            }\n\
    \            if is_vowel(word[i+1]) {\n                continue\n            }\n\
    \            return string(word[i])\n        }\n    }\n    return \"\"\n}\n",
  "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i], vowels) {\n            if i\
    \ == len(word) - 1 {\n                continue\n            }\n            if\
    \ !is_vowel(word[i + 1], vowels) {\n                return string(word[i])\n \
    \           }\n        }\n    }\n    return \"\"\n}\n", "    vowels := map[string]bool{\n\
    \        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"\
    o\": true,\n        \"u\": true,\n    }\n    for i := len(word) - 1; i >= 0; i--\
    \ {\n        if vowels[string(word[i])] {\n            if i == len(word) - 1 {\n\
    \                return \"\"\n            }\n            if !vowels[string(word[i+1])]\
    \ {\n                return string(word[i])\n            }\n        }\n    }\n\
    \    return \"\"\n}\n", "    vowels := map[string]int{\"a\": 1, \"e\": 1, \"i\"\
    : 1, \"o\": 1, \"u\": 1}\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ _, ok := vowels[string(word[i])]; ok {\n            if i > 0 && i < len(word)\
    \ - 1 {\n                if _, ok := vowels[string(word[i-1])]; !ok && _, ok :=\
    \ vowels[string(word[i+1])]; !ok {\n                    return string(word[i])\n\
    \                }\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i], vowels) {\n            if i\
    \ > 0 && !is_vowel(word[i-1], vowels) {\n                return string(word[i])\n\
    \            }\n        }\n    }\n    return \"\"\n}\n", "    // your code here\n\
    \    return \"\"\n}\n", "    var vowels = map[string]bool{\n        \"a\": true,\n\
    \        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"\
    u\": true,\n    }\n    var last_consonant_index int = -1\n    var last_vowel_index\
    \ int = -1\n    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])]\
    \ {\n            last_vowel_index = i\n        } else {\n            if last_vowel_index\
    \ != -1 {\n                last_consonant_index = i\n                break\n \
    \           }\n        }\n    }\n    if last_consonant_index == -1 {\n       \
    \ return \"\"\n    }\n    return string(word[last_vowel_index])\n}\n", "    vowels\
    \ := map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"\
    i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    var closest_vowel\
    \ string\n    var closest_index int\n    for i, c := range word {\n        if\
    \ vowels[string(c)] {\n            closest_vowel = string(c)\n            closest_index\
    \ = i\n            break\n        }\n    }\n    for i, c := range word {\n   \
    \     if vowels[string(c)] {\n            if i > closest_index {\n           \
    \     closest_vowel = string(c)\n                closest_index = i\n         \
    \   }\n        }\n    }\n    return closest_vowel\n}\n", "    if len(word) < 3\
    \ {\n        return \"\"\n    }\n    vowels := []string{\"a\", \"e\", \"i\", \"\
    o\", \"u\"}\n    for i := len(word) - 1; i >= 2; i-- {\n        if !is_vowel(word[i],\
    \ vowels) && is_vowel(word[i-1], vowels) && !is_vowel(word[i-2], vowels) {\n \
    \           return string(word[i-1])\n        }\n    }\n    return \"\"\n}\n",
  "    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var result string\n\
    \    var found bool\n    var last_consonant int\n    var last_vowel int\n    var\
    \ last_vowel_index int\n    var last_consonant_index int\n    var last_vowel_distance\
    \ int\n    var last_consonant_distance int\n    for i, c := range word {\n   \
    \     if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n        \
    \    last_vowel = i\n            last_vowel_index = i\n            last_vowel_distance\
    \ = i - last_consonant\n            if last_vowel_distance < last_consonant_distance\
    \ {\n                found = true\n                result = vowels[last_vowel_index]\n\
    \            }\n        } else {\n            last_consonant = i\n           \
    \ last_consonant_index = i\n            last_consonant_distance = i - last_vowel\n\
    \            if last_consonant_distance < last_vowel_distance {\n            \
    \    found = true\n                result = vowels[last_vowel_index]\n       \
    \     }\n        }\n    }\n    if found {\n        return result\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n\
    \            if word[i] == v[0] {\n                return v\n            }\n \
    \       }\n    }\n    return \"\"\n}\n", "    vowels := map[string]bool{\"a\"\
    : true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if vowels[string(word[i])] {\n            return\
    \ string(word[i])\n        }\n    }\n    return \"\"\n}\n", "    var vowels =\
    \ []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var result string\n    var\
    \ last_vowel_index int\n    var last_consonant_index int\n    var found_vowel\
    \ bool\n    var found_consonant bool\n    var found_vowel_after_consonant bool\n\
    \    var found_consonant_after_vowel bool\n    var found_vowel_after_consonant_index\
    \ int\n    var found_consonant_after_vowel_index int\n    for i := len(word) -\
    \ 1; i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i:i+1]\
    \ == v {\n                last_vowel_index = i\n                found_vowel =\
    \ true\n                if found_consonant_after_vowel {\n                   \
    \ found_vowel_after_consonant = true\n                    found_vowel_after_consonant_index\
    \ = i\n                }\n                break\n            }\n        }\n  \
    \      if !found_vowel {\n            last_consonant_index = i\n            found_consonant\
    \ = true\n            if found_vowel_after_consonant {\n                found_consonant_after_vowel\
    \ = true\n                found_consonant_after_vowel_index = i\n            }\n\
    \        }\n        if found_vowel_after_consonant && found_consonant_after_vowel\
    \ {\n            break\n        }\n    }\n    if found_vowel_after_consonant &&\
    \ found_consonant_after_vowel {\n        if found_vowel_after_consonant_index\
    \ - last_consonant_index < last_vowel_index - found_consonant_after_vowel_index\
    \ {\n            result = word[found_vowel_after_consonant_index:found_vowel_after_consonant_index+1]\n\
    \        } else {\n            result = word[last_vowel_index:last_vowel_index+1",
  "    // your code here\n    return \"\"\n}\n", "    if len(word) < 3 {\n       \
    \ return \"\"\n    }\n    vowels := map[string]bool{\"a\": true, \"e\": true,\
    \ \"i\": true, \"o\": true, \"u\": true}\n    for i := len(word) - 1; i >= 0;\
    \ i-- {\n        if _, ok := vowels[string(word[i])]; ok {\n            if i ==\
    \ len(word) - 1 {\n                return \"\"\n            }\n            if\
    \ _, ok := vowels[string(word[i + 1])]; !ok {\n                return string(word[i])\n\
    \            }\n        }\n    }\n    return \"\"\n}\n", "    vowels := map[string]bool{\"\
    a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    consonants\
    \ := map[string]bool{\"b\": true, \"c\": true, \"d\": true, \"f\": true, \"g\"\
    : true, \"h\": true, \"j\": true, \"k\": true, \"l\": true, \"m\": true, \"n\"\
    : true, \"p\": true, \"q\": true, \"r\": true, \"s\": true, \"t\": true, \"v\"\
    : true, \"w\": true, \"x\": true, \"y\": true, \"z\": true}\n    var result string\n\
    \    var last_consonant string\n    for i := len(word) - 1; i >= 0; i-- {\n  \
    \      if _, ok := vowels[string(word[i])]; ok {\n            if last_consonant\
    \ != \"\" {\n                result = string(word[i])\n                break\n\
    \            }\n        } else if _, ok := consonants[string(word[i])]; ok {\n\
    \            last_consonant = string(word[i])\n        }\n    }\n    return result\n\
    }\n", "    vowels := map[string]bool{\"a\": true, \"e\": true, \"i\": true, \"\
    o\": true, \"u\": true}\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ vowels[string(word[i])] {\n            if i + 1 < len(word) && !vowels[string(word[i\
    \ + 1])] {\n                return string(word[i])\n            }\n        } else\
    \ {\n            if i + 1 < len(word) && vowels[string(word[i + 1])] {\n     \
    \           return string(word[i + 1])\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    vowels := map[string]bool{\n\
    \        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"\
    o\": true,\n        \"u\": true,\n    }\n    last_vowel := \"\"\n    for i :=\
    \ len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])] {\n       \
    \     last_vowel = string(word[i])\n            break\n        }\n    }\n    if\
    \ last_vowel == \"\" {\n        return \"\"\n    }\n    for i := len(word) - 1;\
    \ i >= 0; i-- {\n        if vowels[string(word[i])] {\n            continue\n\
    \        }\n        if vowels[string(word[i-1])] {\n            return string(word[i-1])\n\
    \        }\n    }\n    return last_vowel\n}\n", "    var vowels = []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    var result string\n    var vowel_index int\n\
    \    var vowel_distance int\n    var word_length = len(word)\n    for i := word_length\
    \ - 1; i > 0; i-- {\n        for j := 0; j < len(vowels); j++ {\n            if\
    \ word[i] == vowels[j][0] {\n                if vowel_distance == 0 {\n      \
    \              vowel_distance = word_length - i\n                    vowel_index\
    \ = i\n                } else if word_length - i < vowel_distance {\n        \
    \            vowel_distance = word_length - i\n                    vowel_index\
    \ = i\n                }\n            }\n        }\n    }\n    if vowel_index\
    \ > 0 {\n        result = string(word[vowel_index])\n    }\n    return result\n\
    }\n", "    vowels := map[string]bool{\n        \"a\": true,\n        \"e\": true,\n\
    \        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])] {\n\
    \            return string(word[i])\n        }\n    }\n    return \"\"\n}\n",
  "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i], vowels) {\n            if i\
    \ == len(word) - 1 {\n                return \"\"\n            } else {\n    \
    \            if is_vowel(word[i+1], vowels) {\n                    continue\n\
    \                } else {\n                    return string(word[i])\n      \
    \          }\n            }\n        }\n    }\n    return \"\"\n}\n", "    vowels\
    \ := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1;\
    \ i >= 0; i-- {\n        if contains(vowels, string(word[i])) {\n            if\
    \ i == len(word) - 1 {\n                continue\n            }\n            if\
    \ !contains(vowels, string(word[i + 1])) {\n                return string(word[i])\n\
    \            }\n        }\n    }\n    return \"\"\n}\n", "    vowels := map[string]bool{\n\
    \        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"\
    o\": true,\n        \"u\": true,\n    }\n    var result string\n    var last_vowel\
    \ string\n    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])]\
    \ {\n            last_vowel = string(word[i])\n            break\n        }\n\
    \    }\n    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])]\
    \ {\n            result = string(word[i])\n            break\n        }\n    }\n\
    \    if result == \"\" {\n        return result\n    }\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if vowels[string(word[i])] {\n            continue\n\
    \        }\n        if vowels[string(word[i-1])] {\n            result = string(word[i-1])\n\
    \            break\n        }\n    }\n    if result == \"\" {\n        return\
    \ last_vowel\n    }\n    return result\n}\n", "    vowels := []string{\"a\", \"\
    e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n       \
    \ if is_vowel(word[i], vowels) {\n            if i == len(word) - 1 {\n      \
    \          return \"\"\n            }\n            if !is_vowel(word[i+1], vowels)\
    \ {\n                return string(word[i])\n            }\n        }\n    }\n\
    \    return \"\"\n}\n", "    vowels := map[string]bool{\n        \"a\": true,\n\
    \        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"\
    u\": true,\n    }\n    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])]\
    \ {\n            return string(word[i])\n        }\n    }\n    return \"\"\n}\n",
  "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i], vowels) {\n            if i\
    \ == len(word) - 1 {\n                return \"\"\n            }\n           \
    \ if is_vowel(word[i + 1], vowels) {\n                continue\n            }\n\
    \            return string(word[i])\n        }\n    }\n    return \"\"\n}\n",
  "    // your code here\n    return \"\"\n}\n", "    var vowels = []string{\"a\"\
    , \"e\", \"i\", \"o\", \"u\"}\n    var result string\n    var min int = len(word)\n\
    \    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n\
    \            if word[i] == v[0] {\n                if i < min {\n            \
    \        min = i\n                    result = v\n                }\n        \
    \    }\n        }\n    }\n    return result\n}\n", "    vowels := map[string]bool{\"\
    a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    var prev_is_vowel\
    \ bool\n    var prev_vowel string\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if vowels[string(word[i])] {\n            if prev_is_vowel {\n      \
    \          return prev_vowel\n            }\n            prev_is_vowel = true\n\
    \            prev_vowel = string(word[i])\n        } else {\n            if prev_is_vowel\
    \ {\n                return string(word[i])\n            }\n            prev_is_vowel\
    \ = false\n        }\n    }\n    return \"\"\n}\n", "    if len(word) == 0 {\n\
    \        return \"\"\n    }\n    vowels := []string{\"a\", \"e\", \"i\", \"o\"\
    , \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range\
    \ vowels {\n            if word[i] == v[0] {\n                return v\n     \
    \       }\n        }\n    }\n    return \"\"\n}\n", "    if len(word) < 3 {\n\
    \        return \"\"\n    }\n    vowels := []string{\"a\", \"e\", \"i\", \"o\"\
    , \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i],\
    \ vowels) {\n            if i == len(word) - 1 {\n                return \"\"\n\
    \            }\n            if !is_vowel(word[i + 1], vowels) {\n            \
    \    return string(word[i])\n            }\n        }\n    }\n    return \"\"\n\
    }\n", "    vowels := map[string]bool{\n        \"a\": true,\n        \"e\": true,\n\
    \        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n   \
    \ var last_vowel string\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ vowels[string(word[i])] {\n            last_vowel = string(word[i])\n      \
    \      break\n        }\n    }\n    for i := len(word) - 1; i >= 0; i-- {\n  \
    \      if !vowels[string(word[i])] {\n            if i > 0 && vowels[string(word[i-1])]\
    \ {\n                return string(word[i-1])\n            }\n        }\n    }\n\
    \    return last_vowel\n}\n", "    var vowels = []string{\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"}\n    var result string\n    var index int\n    var found bool\n\
    \    for i := len(word) - 1; i >= 0; i-- {\n        for j := 0; j < len(vowels);\
    \ j++ {\n            if word[i] == vowels[j][0] {\n                if found {\n\
    \                    if i > index {\n                        result = string(word[i])\n\
    \                        index = i\n                    }\n                } else\
    \ {\n                    result = string(word[i])\n                    index =\
    \ i\n                    found = true\n                }\n            }\n    \
    \    }\n    }\n    return result\n}\n", "    if len(word) == 0 {\n        return\
    \ \"\"\n    }\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i], vowels)\
    \ {\n            if i == len(word) - 1 {\n                return \"\"\n      \
    \      }\n            if !is_vowel(word[i + 1], vowels) {\n                return\
    \ string(word[i])\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   // your code here\n    return \"\"\n}\n", "    vowels := map[rune]bool{\n\
    \        'a': true,\n        'e': true,\n        'i': true,\n        'o': true,\n\
    \        'u': true,\n    }\n    var last_consonant rune\n    var last_vowel rune\n\
    \    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[rune(word[i])] {\n\
    \            last_vowel = rune(word[i])\n            if last_consonant != 0 {\n\
    \                return string(last_vowel)\n            }\n        } else {\n\
    \            last_consonant = rune(word[i])\n        }\n    }\n    return \"\"\
    \n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i\
    \ := len(word) - 1; i >= 0; i-- {\n        if contains(vowels, string(word[i]))\
    \ {\n            if i == len(word) - 1 {\n                return \"\"\n      \
    \      }\n            if !contains(vowels, string(word[i + 1])) {\n          \
    \      return string(word[i])\n            }\n        }\n    }\n    return \"\"\
    \n}\n", "    vowels := map[rune]bool{'a': true, 'e': true, 'i': true, 'o': true,\
    \ 'u': true}\n    var last_vowel rune\n    for i := len(word) - 1; i >= 0; i--\
    \ {\n        if vowels[rune(word[i])] {\n            last_vowel = rune(word[i])\n\
    \            break\n        }\n    }\n    if last_vowel == 0 {\n        return\
    \ \"\"\n    }\n    for i := len(word) - 1; i >= 0; i-- {\n        if !vowels[rune(word[i])]\
    \ {\n            if i == len(word) - 1 {\n                return string(last_vowel)\n\
    \            }\n            if vowels[rune(word[i+1])] {\n                return\
    \ string(last_vowel)\n            }\n        }\n    }\n    return \"\"\n}\n",
  "    vowels := \"aeiou\"\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ vowels[vowels[i]] {\n            if i > 0 && !vowels[word[i-1]] {\n        \
    \        return string(word[i])\n            }\n        }\n    }\n    return \"\
    \"\n}\n", "    // your code here\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        for _, v := range vowels {\n            if word[i] == v[0] {\n      \
    \          return string(word[i])\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n\
    \    var consonants = []string{\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"}\n    var result string\n    var distance int\n    var min_distance\
    \ int\n    var is_vowel bool\n    var is_consonant bool\n    var is_first_vowel\
    \ bool\n    var is_first_consonant bool\n    var is_last_vowel bool\n    var is_last_consonant\
    \ bool\n    var is_first_char bool\n    var is_last_char bool\n    var is_first_char_vowel\
    \ bool\n    var is_last_char_vowel bool\n    var is_first_char_consonant bool\n\
    \    var is_last_char_consonant bool\n    var is_first_char_vowel_or_consonant\
    \ bool\n    var is_last_char_vowel_or_consonant bool\n    var is_first_char_vowel_or_consonant_or_empty\
    \ bool\n    var is_last_char_vowel_or_consonant_or_empty bool\n    var is_first_char_vowel_or_consonant_or_empty_or_space\
    \ bool\n    var is_last_char_vowel_or_consonant_or_empty_or_space bool\n    var\
    \ is_first_char_vowel_or_consonant_or_empty_or_space_or_number bool\n    var is_last_char_vowel_or_consonant_or_empty_or_space_or_number\
    \ bool\n    var is_first_char_vowel_or_consonant_or_empty_or_space_or_number_or_symbol\
    \ bool\n    var is_last_char_vowel_or_consonant_or_empty_or_space_or_number_or_",
  "    // your code here\n    return \"\"\n}\n", "    if len(word) < 3 {\n       \
    \ return \"\"\n    }\n    for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i])\
    \ {\n            if i == len(word) - 1 {\n                return \"\"\n      \
    \      }\n            if is_vowel(word[i-1]) {\n                continue\n   \
    \         }\n            return string(word[i])\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := map[string]bool{\n        \"a\": true,\n        \"\
    e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n\
    \    }\n    var prev_char string\n    var prev_prev_char string\n    for i :=\
    \ len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])] {\n       \
    \     if prev_char != \"\" && !vowels[prev_char] {\n                return string(word[i])\n\
    \            }\n        } else {\n            if prev_char != \"\" && vowels[prev_char]\
    \ {\n                return prev_char\n            }\n        }\n        prev_prev_char\
    \ = prev_char\n        prev_char = string(word[i])\n    }\n    return \"\"\n}\n",
  "    vowels := map[string]bool{\n        \"a\": true,\n        \"e\": true,\n  \
    \      \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    var\
    \ prev_vowel string\n    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])]\
    \ {\n            prev_vowel = string(word[i])\n            break\n        }\n\
    \    }\n    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])]\
    \ {\n            if prev_vowel != string(word[i]) {\n                return string(word[i])\n\
    \            }\n        } else {\n            prev_vowel = \"\"\n        }\n \
    \   }\n    return \"\"\n}\n", "    vowels := map[string]bool{\n        \"a\":\
    \ true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n  \
    \      \"u\": true,\n    }\n    var last_consonant_index int\n    var last_vowel_index\
    \ int\n    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])]\
    \ {\n            last_vowel_index = i\n        } else {\n            if last_vowel_index\
    \ > last_consonant_index {\n                return string(word[last_vowel_index])\n\
    \            }\n            last_consonant_index = i\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n    \
    \        if i == len(word) - 1 {\n                return \"\"\n            }\n\
    \            if !is_vowel(word[i + 1]) {\n                return string(word[i])\n\
    \            }\n        }\n    }\n    return \"\"\n}\n", "    // your code here\n\
    \    return \"\"\n}\n", "    var vowels = []string{\"a\", \"e\", \"i\", \"o\"\
    , \"u\"}\n    var result string\n    var distance int\n    var min_distance int\
    \ = len(word)\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v :=\
    \ range vowels {\n            if word[i] == v[0] {\n                if i == len(word)\
    \ - 1 {\n                    return \"\"\n                }\n                if\
    \ i == 0 {\n                    return \"\"\n                }\n             \
    \   for j := i - 1; j >= 0; j-- {\n                    for _, v := range vowels\
    \ {\n                        if word[j] == v[0] {\n                          \
    \  return \"\"\n                        }\n                    }\n           \
    \         distance = i - j\n                    if distance < min_distance {\n\
    \                        min_distance = distance\n                        result\
    \ = string(word[i])\n                    }\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n", "    var vowels = []string{\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"}\n    var consonants = []string{\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n    var result string\n\
    \    var last_consonant_index int\n    var last_vowel_index int\n    for i, c\
    \ := range word {\n        if contains(vowels, string(c)) {\n            last_vowel_index\
    \ = i\n        }\n        if contains(consonants, string(c)) {\n            last_consonant_index\
    \ = i\n        }\n        if last_consonant_index > last_vowel_index {\n     \
    \       result = string(c)\n        }\n    }\n    return result\n}\n", "    vowels\
    \ := map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"\
    i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    var result\
    \ string\n    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])]\
    \ {\n            result = string(word[i])\n            break\n        }\n    }\n\
    \    return result\n}\n", "    vowels := map[string]bool{\n        \"a\": true,\n\
    \        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"\
    u\": true,\n    }\n    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])]\
    \ {\n            if i == len(word) - 1 {\n                return \"\"\n      \
    \      }\n            if !vowels[string(word[i+1])] {\n                return\
    \ string(word[i])\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   // your code here\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"\
    e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n       \
    \ if contains(vowels, string(word[i])) {\n            if i == len(word) - 1 {\n\
    \                return \"\"\n            }\n            if !contains(vowels,\
    \ string(word[i+1])) {\n                return string(word[i])\n            }\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for\
    \ _, v := range vowels {\n            if word[i] == v[0] {\n                return\
    \ string(word[i])\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   var vowels = map[string]bool{\"a\": true, \"e\": true, \"i\": true, \"o\"\
    : true, \"u\": true}\n    var last_vowel string\n    for i := len(word) - 1; i\
    \ >= 0; i-- {\n        if vowels[string(word[i])] {\n            last_vowel =\
    \ string(word[i])\n            break\n        }\n    }\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if vowels[string(word[i])] {\n            if last_vowel\
    \ != string(word[i]) {\n                return string(word[i])\n            }\n\
    \        } else {\n            last_vowel = \"\"\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := map[string]bool{\n        \"a\": true,\n        \"\
    e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n\
    \    }\n    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])]\
    \ {\n            if i == len(word) - 1 {\n                return \"\"\n      \
    \      }\n            if !vowels[string(word[i+1])] {\n                return\
    \ string(word[i])\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := map[string]int{\"a\":1, \"e\":1, \"i\":1, \"o\":1, \"u\":1}\n  \
    \  for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])] ==\
    \ 1 {\n            if i == len(word) - 1 {\n                return \"\"\n    \
    \        }\n            if vowels[string(word[i+1])] != 1 {\n                return\
    \ string(word[i])\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := \"aeiou\"\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ vowels[strings.Index(vowels, string(word[i]))] != -1 {\n            if i ==\
    \ len(word) - 1 {\n                return \"\"\n            }\n            if\
    \ vowels[strings.Index(vowels, string(word[i+1]))] == -1 {\n                return\
    \ string(word[i])\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := map[string]bool{\n        \"a\": true,\n        \"e\": true,\n \
    \       \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    var\
    \ last_consonant_index int\n    for i := len(word) - 1; i >= 0; i-- {\n      \
    \  if _, ok := vowels[string(word[i])]; !ok {\n            last_consonant_index\
    \ = i\n            break\n        }\n    }\n    for i := last_consonant_index\
    \ - 1; i >= 0; i-- {\n        if _, ok := vowels[string(word[i])]; ok {\n    \
    \        return string(word[i])\n        }\n    }\n    return \"\"\n}\n", "  \
    \  if len(word) < 3 {\n        return \"\"\n    }\n    for i := len(word) - 1;\
    \ i >= 0; i-- {\n        if word[i] == 'a' || word[i] == 'e' || word[i] == 'i'\
    \ || word[i] == 'o' || word[i] == 'u' {\n            if i == len(word) - 1 {\n\
    \                return \"\"\n            }\n            if word[i + 1] != 'a'\
    \ && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i\
    \ + 1] != 'u' {\n                return string(word[i])\n            }\n     \
    \   }\n    }\n    return \"\"\n}\n", "    if len(word) == 0 {\n        return\
    \ \"\"\n    }\n    vowels := map[string]bool{\"a\": true, \"e\": true, \"i\":\
    \ true, \"o\": true, \"u\": true}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if _, ok := vowels[string(word[i])]; ok {\n            if i == len(word)\
    \ - 1 {\n                return \"\"\n            }\n            if _, ok := vowels[string(word[i+1])];\
    \ !ok {\n                return string(word[i])\n            }\n        }\n  \
    \  }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\"\
    , \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if contains(vowels,\
    \ string(word[i])) {\n            if i == len(word) - 1 {\n                continue\n\
    \            } else if i == 0 {\n                continue\n            } else\
    \ if contains(vowels, string(word[i-1])) {\n                continue\n       \
    \     } else if contains(vowels, string(word[i+1])) {\n                continue\n\
    \            } else {\n                return string(word[i])\n            }\n\
    \        }\n    }\n    return \"\"\n}\n", "    if len(word) < 3 {\n        return\
    \ \"\"\n    }\n    vowels := map[string]int{\n        \"a\": 1,\n        \"e\"\
    : 1,\n        \"i\": 1,\n        \"o\": 1,\n        \"u\": 1,\n    }\n    for\
    \ i := len(word) - 1; i >= 0; i-- {\n        if _, ok := vowels[string(word[i])];\
    \ ok {\n            if i == len(word) - 1 {\n                return \"\"\n   \
    \         }\n            if _, ok := vowels[string(word[i+1])]; !ok {\n      \
    \          return string(word[i])\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n\
    \            if word[i] == v[0] {\n                return string(word[i])\n  \
    \          }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        for _, v := range vowels {\n            if word[i] == v[0] {\n      \
    \          return string(word[i])\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    var vowels = map[rune]bool{\n        'a': true,\n        'e':\
    \ true,\n        'i': true,\n        'o': true,\n        'u': true,\n    }\n \
    \   var last_consonant rune\n    var last_vowel rune\n    for _, c := range word\
    \ {\n        if vowels[c] {\n            last_vowel = c\n        } else {\n  \
    \          last_consonant = c\n        }\n        if last_consonant != 0 && last_vowel\
    \ != 0 {\n            return string(last_vowel)\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := map[string]bool{\"a\": true, \"e\": true, \"i\":\
    \ true, \"o\": true, \"u\": true}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if vowels[string(word[i])] {\n            if i < len(word) - 1 && !vowels[string(word[i\
    \ + 1])] {\n                return string(word[i])\n            }\n        } else\
    \ {\n            if i < len(word) - 1 && vowels[string(word[i + 1])] {\n     \
    \           return string(word[i + 1])\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := map[string]bool{\"a\": true, \"e\": true, \"i\":\
    \ true, \"o\": true, \"u\": true}\n    var last_consonant string\n    var last_vowel\
    \ string\n    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])]\
    \ {\n            last_vowel = string(word[i])\n        } else {\n            if\
    \ last_vowel != \"\" {\n                return last_vowel\n            }\n   \
    \         last_consonant = string(word[i])\n        }\n    }\n    return \"\"\n\
    }\n", "    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\"\
    : true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n  \
    \  }\n    var result string\n    var last_consonant_index int\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if _, ok := vowels[string(word[i])]; ok {\n    \
    \        if last_consonant_index > 0 {\n                result = string(word[i])\n\
    \                break\n            }\n        } else {\n            last_consonant_index\
    \ = i\n        }\n    }\n    return result\n}\n", "    var vowels = []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    var result string\n    var distance int\n\
    \    var found bool\n    for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i])\
    \ {\n            if found {\n                if i + 1 < len(word) && !is_vowel(word[i\
    \ + 1]) {\n                    if distance > len(word) - i - 1 {\n           \
    \             result = string(word[i])\n                        distance = len(word)\
    \ - i - 1\n                    }\n                }\n            } else {\n  \
    \              if i + 1 < len(word) && !is_vowel(word[i + 1]) {\n            \
    \        result = string(word[i])\n                    distance = len(word) -\
    \ i - 1\n                    found = true\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n", "    var vowels = []string{\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"}\n    var result = \"\"\n    var last_vowel = \"\"\
    \n    var last_consonant = \"\"\n    for _, char := range word {\n        if contains(vowels,\
    \ string(char)) {\n            last_vowel = string(char)\n        } else {\n \
    \           last_consonant = string(char)\n        }\n        if last_vowel !=\
    \ \"\" && last_consonant != \"\" {\n            result = last_vowel\n        \
    \    break\n        }\n    }\n    return result\n}\n", "    var vowels = []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    var last_consonant_index = -1\n    var last_vowel_index\
    \ = -1\n    for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i],\
    \ vowels) {\n            last_vowel_index = i\n            if last_consonant_index\
    \ != -1 {\n                return string(word[last_vowel_index])\n           \
    \ }\n        } else {\n            last_consonant_index = i\n        }\n    }\n\
    \    return \"\"\n}\n", "    vowels := map[string]bool{\"a\": true, \"e\": true,\
    \ \"i\": true, \"o\": true, \"u\": true}\n    for i := len(word) - 1; i >= 0;\
    \ i-- {\n        if vowels[string(word[i])] {\n            if i == len(word) -\
    \ 1 {\n                return \"\"\n            }\n            if !vowels[string(word[i\
    \ + 1])] {\n                return string(word[i])\n            }\n        }\n\
    \    }\n    return \"\"\n}\n", "    var vowels = map[string]bool{\"a\": true,\
    \ \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    var consonants = map[string]bool{\"\
    b\": true, \"c\": true, \"d\": true, \"f\": true, \"g\": true, \"h\": true, \"\
    j\": true, \"k\": true, \"l\": true, \"m\": true, \"n\": true, \"p\": true, \"\
    q\": true, \"r\": true, \"s\": true, \"t\": true, \"v\": true, \"w\": true, \"\
    x\": true, \"y\": true, \"z\": true}\n    var result string\n    var found_vowel\
    \ bool\n    var found_consonant bool\n    for i := len(word) - 1; i >= 0; i--\
    \ {\n        if _, ok := vowels[string(word[i])]; ok {\n            if found_consonant\
    \ {\n                result = string(word[i])\n                found_vowel = true\n\
    \                break\n            }\n        } else if _, ok := consonants[string(word[i])];\
    \ ok {\n            if found_vowel {\n                break\n            }\n \
    \           found_consonant = true\n        }\n    }\n    return result\n}\n",
  "    vowels := \"aeiou\"\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ strings.Contains(vowels, string(word[i])) {\n            if i == len(word) -\
    \ 1 {\n                return \"\"\n            }\n            if !strings.Contains(vowels,\
    \ string(word[i + 1])) {\n                return string(word[i])\n           \
    \ }\n        }\n    }\n    return \"\"\n}\n", "    vowels := \"aeiou\"\n    var\
    \ result string\n    for i := len(word) - 1; i >= 0; i-- {\n        if strings.Contains(vowels,\
    \ string(word[i])) {\n            if i == len(word) - 1 {\n                continue\n\
    \            }\n            if i == 0 {\n                continue\n          \
    \  }\n            if strings.Contains(vowels, string(word[i+1])) {\n         \
    \       continue\n            }\n            if strings.Contains(vowels, string(word[i-1]))\
    \ {\n                continue\n            }\n            result = string(word[i])\n\
    \            break\n        }\n    }\n    return result\n}\n", "    vowels :=\
    \ map[string]int{\"a\": 1, \"e\": 1, \"i\": 1, \"o\": 1, \"u\": 1}\n    for i\
    \ := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])] == 1 {\n\
    \            return string(word[i])\n        }\n    }\n    return \"\"\n}\n",
  "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i], vowels) {\n            if i\
    \ == len(word) - 1 {\n                return \"\"\n            }\n           \
    \ if !is_vowel(word[i + 1], vowels) {\n                return string(word[i])\n\
    \            }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if is_vowel(word[i], vowels) {\n            if i + 1 < len(word) && !is_vowel(word[i\
    \ + 1], vowels) {\n                return string(word[i])\n            }\n   \
    \     }\n    }\n    return \"\"\n}\n", "    vowels := map[rune]bool{'a': true,\
    \ 'e': true, 'i': true, 'o': true, 'u': true}\n    var last_consonant rune\n \
    \   var last_vowel rune\n    for _, c := range word {\n        if vowels[c] {\n\
    \            last_vowel = c\n        } else {\n            last_consonant = c\n\
    \        }\n        if last_consonant != 0 && last_vowel != 0 {\n            return\
    \ string(last_vowel)\n        }\n    }\n    return \"\"\n}\n", "    vowels :=\
    \ map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\"\
    : true,\n        \"o\": true,\n        \"u\": true,\n    }\n    var last_consonant\
    \ string\n    var closest_vowel string\n    var closest_vowel_distance int\n \
    \   for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])]\
    \ {\n            if last_consonant != \"\" {\n                if closest_vowel_distance\
    \ == 0 || closest_vowel_distance > i - len(last_consonant) {\n               \
    \     closest_vowel = string(word[i])\n                    closest_vowel_distance\
    \ = i - len(last_consonant)\n                }\n            }\n            last_consonant\
    \ = \"\"\n        } else {\n            last_consonant = string(word[i])\n   \
    \     }\n    }\n    return closest_vowel\n}\n", "    // your code here\n    return\
    \ \"\"\n}\n", "    vowels := map[string]bool{\n        \"a\": true,\n        \"\
    e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n\
    \    }\n    var last_consonant_index int\n    for i := len(word) - 1; i >= 0;\
    \ i-- {\n        if vowels[string(word[i])] {\n            if last_consonant_index\
    \ == 0 {\n                return \"\"\n            }\n            return string(word[last_consonant_index\
    \ + 1])\n        }\n        last_consonant_index = i\n    }\n    return \"\"\n\
    }\n", "    vowels := \"aeiou\"\n    var last_vowel_index int = -1\n    for i :=\
    \ len(word) - 1; i >= 0; i-- {\n        if strings.Contains(vowels, string(word[i]))\
    \ {\n            last_vowel_index = i\n            break\n        }\n    }\n \
    \   if last_vowel_index == -1 {\n        return \"\"\n    }\n    for i := last_vowel_index\
    \ - 1; i >= 0; i-- {\n        if !strings.Contains(vowels, string(word[i])) {\n\
    \            return string(word[last_vowel_index])\n        }\n    }\n    return\
    \ \"\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    var vowels =\
    \ []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var last_vowel string\n   \
    \ var last_consonant string\n    for i := len(word) - 1; i >= 0; i-- {\n     \
    \   if is_vowel(word[i]) {\n            last_vowel = string(word[i])\n       \
    \     if last_consonant != \"\" {\n                return last_vowel\n       \
    \     }\n        } else {\n            last_consonant = string(word[i])\n    \
    \    }\n    }\n    return \"\"\n}\n", "    var vowels = []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    var result string\n    var distance int\n    for i\
    \ := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n      \
    \      if word[i] == v[0] {\n                if distance == 0 {\n            \
    \        result = v\n                    distance = len(word) - i\n          \
    \      } else if len(word) - i < distance {\n                    result = v\n\
    \                    distance = len(word) - i\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n", "    vowels := map[string]bool{\n\
    \        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"\
    o\": true,\n        \"u\": true,\n    }\n    var last_consonant string\n    var\
    \ last_vowel string\n    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])]\
    \ {\n            last_vowel = string(word[i])\n        } else {\n            last_consonant\
    \ = string(word[i])\n            break\n        }\n    }\n    if last_consonant\
    \ == \"\" || last_vowel == \"\" {\n        return \"\"\n    }\n    return last_vowel\n\
    }\n", "    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var result\
    \ string\n    var found bool\n    for i := len(word) - 1; i >= 0; i-- {\n    \
    \    for _, v := range vowels {\n            if word[i] == v[0] {\n          \
    \      result = string(word[i])\n                found = true\n              \
    \  break\n            }\n        }\n        if found {\n            break\n  \
    \      }\n    }\n    return result\n}\n", "    if len(word) == 0 {\n        return\
    \ \"\"\n    }\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i], vowels)\
    \ {\n            if i == len(word) - 1 {\n                return \"\"\n      \
    \      }\n            if !is_vowel(word[i + 1], vowels) {\n                return\
    \ string(word[i])\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   if len(word) < 3 {\n        return \"\"\n    }\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if is_vowel(word[i], vowels) {\n            if i == len(word) - 1 {\n\
    \                return \"\"\n            }\n            if is_vowel(word[i +\
    \ 1], vowels) {\n                continue\n            }\n            return string(word[i])\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    var last_vowel string\n    var last_consonant string\n\
    \    for _, char := range word {\n        if is_vowel(char) {\n            last_vowel\
    \ = string(char)\n        } else {\n            last_consonant = string(char)\n\
    \        }\n        if last_vowel != \"\" && last_consonant != \"\" {\n      \
    \      return last_vowel\n        }\n    }\n    return \"\"\n}\n", "    if len(word)\
    \ < 3 {\n        return \"\"\n    }\n    vowels := map[string]bool{\"a\": true,\
    \ \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if vowels[string(word[i])] {\n            if i ==\
    \ len(word) - 1 {\n                return \"\"\n            }\n            if\
    \ !vowels[string(word[i + 1])] {\n                return string(word[i])\n   \
    \         }\n        }\n    }\n    return \"\"\n}\n", "    if len(word) < 3 {\n\
    \        return \"\"\n    }\n    vowels := []string{\"a\", \"e\", \"i\", \"o\"\
    , \"u\"}\n    cons := []string{\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ is_cons(word[i], cons) {\n            for j := i - 1; j >= 0; j-- {\n      \
    \          if is_cons(word[j], cons) {\n                    return word[j+1:i]\n\
    \                }\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := map[string]bool{\n        \"a\": true,\n        \"e\": true,\n \
    \       \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    last_consonant\
    \ := -1\n    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])]\
    \ {\n            if last_consonant == -1 {\n                return \"\"\n    \
    \        }\n            return string(word[i])\n        }\n        last_consonant\
    \ = i\n    }\n    return \"\"\n}\n", "    if len(word) < 3 {\n        return \"\
    \"\n    }\n    vowels := map[string]bool{\"a\": true, \"e\": true, \"i\": true,\
    \ \"o\": true, \"u\": true}\n    for i := len(word) - 1; i >= 0; i-- {\n     \
    \   if vowels[string(word[i])] {\n            if i == len(word) - 1 {\n      \
    \          return \"\"\n            }\n            if !vowels[string(word[i+1])]\
    \ {\n                return string(word[i])\n            }\n        }\n    }\n\
    \    return \"\"\n}\n", "    var vowels = []string{\"a\", \"e\", \"i\", \"o\"\
    , \"u\"}\n    var last_vowel string\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        for _, v := range vowels {\n            if word[i] == v[0] {\n      \
    \          last_vowel = string(word[i])\n                break\n            }\n\
    \        }\n        if last_vowel != \"\" {\n            break\n        }\n  \
    \  }\n    if last_vowel == \"\" {\n        return \"\"\n    }\n    var closest_vowel\
    \ string\n    for i := len(word) - 1; i >= 0; i-- {\n        if word[i] == last_vowel[0]\
    \ {\n            closest_vowel = string(word[i])\n            break\n        }\n\
    \    }\n    return closest_vowel\n}\n", "    vowels := []string{\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ string_in_slice(word[i:i+1], vowels) {\n            return word[i:i+1]\n   \
    \     }\n    }\n    return \"\"\n}\n", "    vowels := map[string]bool{\n     \
    \   \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n\
    \        \"u\": true,\n    }\n    for i := len(word) - 1; i >= 0; i-- {\n    \
    \    if vowels[string(word[i])] {\n            if i == len(word) - 1 {\n     \
    \           return \"\"\n            }\n            if !vowels[string(word[i+1])]\
    \ {\n                return string(word[i])\n            }\n        }\n    }\n\
    \    return \"\"\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
