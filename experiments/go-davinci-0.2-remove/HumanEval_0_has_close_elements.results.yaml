language: go_test.go
name: HumanEval_0_has_close_elements
results:
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n   \
    \     for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpno6mba03_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] == numbers[j]\
    \ {\n                return true\n            }\n            if (numbers[i] -\
    \ numbers[j]) < threshold {\n                return true\n            }\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpgc_01423_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpgc_01423_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpgc_01423_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n   \
    \     for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpno6mba03_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n   \
    \     for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpno6mba03_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n   \
    \     for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpno6mba03_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n   \
    \     for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpno6mba03_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if (numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpcqs53bfj_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpcqs53bfj_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpcqs53bfj_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if (numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpcqs53bfj_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpcqs53bfj_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpcqs53bfj_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj4befv6a_test.go:13:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074433
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj4befv6a_test.go:13:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074433
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n   \
    \     for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpno6mba03_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i, n := range numbers {\n        for j, m\
    \ := range numbers {\n            if i != j && n - m < threshold {\n         \
    \       return true\n            }\n        }\n    }\n    return false\n}\n\n\
    func TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp4u_rt106_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp4u_rt106_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp4u_rt106_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n   \
    \     for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpno6mba03_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n   \
    \     for j := i + 1; j < len(numbers); j++ {\n            if abs(numbers[i] -\
    \ numbers[j]) < threshold {\n                return true\n            }\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaxq6ppq5_test.go:13:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074433
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n   \
    \     for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpno6mba03_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n   \
    \     for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpno6mba03_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj4befv6a_test.go:13:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074433
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i, n := range numbers {\n        for j, m\
    \ := range numbers {\n            if i != j && n - m < threshold {\n         \
    \       return true\n            }\n        }\n    }\n    return false\n}\n\n\
    func TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp4u_rt106_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp4u_rt106_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp4u_rt106_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj4befv6a_test.go:13:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074433
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n   \
    \     for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpno6mba03_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj4befv6a_test.go:13:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074433
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n   \
    \     for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpno6mba03_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    if len(numbers) < 2 {\n        return false\n\
    \    }\n\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            if numbers[i] - numbers[j] < threshold\
    \ {\n                return true\n            }\n        }\n    }\n\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpbwqslkkb_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpbwqslkkb_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpbwqslkkb_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n   \
    \     for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpno6mba03_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i, n := range numbers {\n        for j, m\
    \ := range numbers {\n            if i != j && n - m < threshold {\n         \
    \       return true\n            }\n        }\n    }\n    return false\n}\n\n\
    func TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp4u_rt106_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp4u_rt106_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp4u_rt106_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i, n := range numbers {\n        for _, m\
    \ := range numbers[i+1:] {\n            if (n - m) < threshold {\n           \
    \     return true\n            }\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpjkndkiyr_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpjkndkiyr_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpjkndkiyr_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    // Sort the numbers\n    sorted_numbers := make([]float64,\
    \ len(numbers))\n    copy(sorted_numbers, numbers)\n    for i := 0; i < len(sorted_numbers);\
    \ i++ {\n        for j := i + 1; j < len(sorted_numbers); j++ {\n            if\
    \ sorted_numbers[i] > sorted_numbers[j] {\n                sorted_numbers[i],\
    \ sorted_numbers[j] = sorted_numbers[j], sorted_numbers[i]\n            }\n  \
    \      }\n    }\n\n    // Check if any two numbers are closer than threshold\n\
    \    for i := 0; i < len(sorted_numbers) - 1; i++ {\n        if sorted_numbers[i\
    \ + 1] - sorted_numbers[i] < threshold {\n            return true\n        }\n\
    \    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n \
    \ candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i, n := range numbers {\n        for j, m\
    \ := range numbers {\n            if i != j && n - m < threshold {\n         \
    \       return true\n            }\n        }\n    }\n    return false\n}\n\n\
    func TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp4u_rt106_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp4u_rt106_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp4u_rt106_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj4befv6a_test.go:13:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074433
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i, number := range numbers {\n        for\
    \ j := i + 1; j < len(numbers); j++ {\n            if (number - numbers[j]) <\
    \ threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpwvd705j5_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpwvd705j5_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpwvd705j5_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if (numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpcqs53bfj_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpcqs53bfj_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpcqs53bfj_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n   \
    \     for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpno6mba03_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if (numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpcqs53bfj_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpcqs53bfj_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpcqs53bfj_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i, n := range numbers {\n        for j, m\
    \ := range numbers {\n            if i != j && (n - m) < threshold {\n       \
    \         return true\n            }\n        }\n    }\n    return false\n}\n\n\
    func TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpfygs7ge0_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpfygs7ge0_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpfygs7ge0_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if (numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpcqs53bfj_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpcqs53bfj_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpcqs53bfj_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj4befv6a_test.go:13:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074433
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] + threshold\
    \ > numbers[j] && numbers[i] - threshold < numbers[j] {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n   \
    \     for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpno6mba03_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i, n := range numbers {\n        for _, m\
    \ := range numbers[i+1:] {\n            if abs(n - m) < threshold {\n        \
    \        return true\n            }\n        }\n    }\n    return false\n}\n\n\
    func TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdh8x_t6__test.go:13:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074433
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if (numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpcqs53bfj_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpcqs53bfj_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpcqs53bfj_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i, n := range numbers {\n        for j, m\
    \ := range numbers {\n            if i == j {\n                continue\n    \
    \        }\n            if n - m < threshold {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmppmevlile_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmppmevlile_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmppmevlile_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj4befv6a_test.go:13:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074433
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n   \
    \     for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpno6mba03_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold && numbers[i] - numbers[j] > -threshold {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj4befv6a_test.go:13:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074433
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    var i, j int\n    for i = 0; i < len(numbers);\
    \ i++ {\n        for j = i + 1; j < len(numbers); j++ {\n            if numbers[i]\
    \ - numbers[j] < threshold {\n                return true\n            }\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpi17u6lwf_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpi17u6lwf_test.go:41:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpi17u6lwf_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if (numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpcqs53bfj_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpcqs53bfj_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpcqs53bfj_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n   \
    \     for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpno6mba03_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpno6mba03_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i, n := range numbers {\n        for j, m\
    \ := range numbers {\n            if i == j {\n                continue\n    \
    \        }\n            if n - m < threshold {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmppmevlile_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmppmevlile_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmppmevlile_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i, n := range numbers {\n        for j, m\
    \ := range numbers {\n            if i != j && n - m < threshold {\n         \
    \       return true\n            }\n        }\n    }\n    return false\n}\n\n\
    func TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp4u_rt106_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp4u_rt106_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp4u_rt106_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if (numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpcqs53bfj_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpcqs53bfj_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpcqs53bfj_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\nfunc has_close_elements(numbers []float64,\
    \ threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n       \
    \ for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzrrsmu0i_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzrrsmu0i_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074434
