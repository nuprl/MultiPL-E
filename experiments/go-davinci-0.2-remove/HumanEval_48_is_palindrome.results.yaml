language: go_test.go
name: HumanEval_48_is_palindrome
results:
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    var re = regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnp7352zi_test.go:11:12: undefined: strings

    /tmp/tmpnp7352zi_test.go:14:14: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    re := regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvekpr0y9_test.go:11:12: undefined: strings

    /tmp/tmpvekpr0y9_test.go:14:11: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    text = strings.Replace(text,\
    \ \" \", \"\", -1)\n    text = strings.Replace(text, \",\", \"\", -1)\n    text\
    \ = strings.Replace(text, \".\", \"\", -1)\n    text = strings.Replace(text, \"\
    !\", \"\", -1)\n    text = strings.Replace(text, \"?\", \"\", -1)\n    text =\
    \ strings.Replace(text, \";\", \"\", -1)\n    text = strings.Replace(text, \"\
    :\", \"\", -1)\n    text = strings.Replace(text, \"'\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"\\\"\", \"\", -1)\n    text = strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text = strings.Replace(text, \"_\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"(\", \"\", -1)\n    text = strings.Replace(text, \"\
    )\", \"\", -1)\n    text = strings.Replace(text, \"[\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"]\", \"\", -1)\n    text = strings.Replace(text, \"\
    {\", \"\", -1)\n    text = strings.Replace(text, \"}\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"\\\\\", \"\", -1)\n    text = strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text = strings.Replace(text, \"*\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"+\", \"\", -1)\n    text = strings.Replace(text, \"\
    =\", \"\", -1)\n    text = strings.Replace(text, \"|\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"&\", \"\", -1)\n    text = strings.Replace(text, \"\
    ^\", \"\", -1)\n    text = strings.Replace(text, \"%\", \"\", -1)\n   \nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxnet8g3p_test.go:41:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073769
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    re := regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvekpr0y9_test.go:11:12: undefined: strings

    /tmp/tmpvekpr0y9_test.go:14:11: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    text = strings.Replace(text,\
    \ \" \", \"\", -1)\n    text = strings.Replace(text, \",\", \"\", -1)\n    text\
    \ = strings.Replace(text, \".\", \"\", -1)\n    text = strings.Replace(text, \"\
    !\", \"\", -1)\n    text = strings.Replace(text, \"?\", \"\", -1)\n    text =\
    \ strings.Replace(text, \":\", \"\", -1)\n    text = strings.Replace(text, \"\
    ;\", \"\", -1)\n    text = strings.Replace(text, \"'\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"\\\"\", \"\", -1)\n    text = strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text = strings.Replace(text, \"_\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"(\", \"\", -1)\n    text = strings.Replace(text, \"\
    )\", \"\", -1)\n    text = strings.Replace(text, \"[\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"]\", \"\", -1)\n    text = strings.Replace(text, \"\
    {\", \"\", -1)\n    text = strings.Replace(text, \"}\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"\\\\\", \"\", -1)\n    text = strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text = strings.Replace(text, \"*\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"+\", \"\", -1)\n    text = strings.Replace(text, \"\
    =\", \"\", -1)\n    text = strings.Replace(text, \"&\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"^\", \"\", -1)\n    text = strings.Replace(text, \"\
    %\", \"\", -1)\n    text = strings.Replace(text, \"$\", \"\", -1)\n    text\n\
    func TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr4knk8o__test.go:41:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073769
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    var re = regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnp7352zi_test.go:11:12: undefined: strings

    /tmp/tmpnp7352zi_test.go:14:14: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    length := len(text)\n    for i := 0; i < length/2; i++ {\n     \
    \   if text[i] != text[length-i-1] {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    var i, j int\n    for i, j = 0, len(text) - 1; i < j; i, j = i +\
    \ 1, j - 1 {\n        if text[i] != text[j] {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    reg, err := regexp.Compile(\"\
    [^a-zA-Z0-9]+\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    text\
    \ = reg.ReplaceAllString(text, \"\")\n\n    // Check if string is a palindrome\n\
    \    for i := 0; i < len(text)/2; i++ {\n        if text[i] != text[len(text)-i-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn4qy5mk4_test.go:11:12: undefined: strings

    /tmp/tmpn4qy5mk4_test.go:14:17: undefined: regexp

    /tmp/tmpn4qy5mk4_test.go:16:9: undefined: log

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \    // Remove all non-alphanumeric characters\n    text = strings.Replace(text,\
    \ \" \", \"\", -1)\n    text = strings.Replace(text, \",\", \"\", -1)\n    text\
    \ = strings.Replace(text, \".\", \"\", -1)\n    text = strings.Replace(text, \"\
    !\", \"\", -1)\n    text = strings.Replace(text, \"?\", \"\", -1)\n    text =\
    \ strings.Replace(text, \";\", \"\", -1)\n    text = strings.Replace(text, \"\
    :\", \"\", -1)\n    text = strings.Replace(text, \"'\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"\\\"\", \"\", -1)\n    text = strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text = strings.Replace(text, \"_\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"(\", \"\", -1)\n    text = strings.Replace(text, \"\
    )\", \"\", -1)\n    text = strings.Replace(text, \"[\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"]\", \"\", -1)\n    text = strings.Replace(text, \"\
    {\", \"\", -1)\n    text = strings.Replace(text, \"}\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"\\\\\", \"\", -1)\n    text = strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text = strings.Replace(text, \"*\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"+\", \"\", -1)\n    text = strings.Replace(text, \"\
    =\", \"\", -1)\n    text = strings.Replace(text, \"~\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"`\", \"\", -1)\n    text = strings.Replace(text, \"\
    ^\", \"\", -1)\n    text = strings.Replace(text, \"&\", \"\", -1)\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkk20ad0__test.go:40:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073769
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    re := regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvekpr0y9_test.go:11:12: undefined: strings

    /tmp/tmpvekpr0y9_test.go:14:11: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    text = strings.Replace(text,\
    \ \" \", \"\", -1)\n    text = strings.Replace(text, \",\", \"\", -1)\n    text\
    \ = strings.Replace(text, \".\", \"\", -1)\n    text = strings.Replace(text, \"\
    !\", \"\", -1)\n    text = strings.Replace(text, \"?\", \"\", -1)\n    text =\
    \ strings.Replace(text, \":\", \"\", -1)\n    text = strings.Replace(text, \"\
    ;\", \"\", -1)\n    text = strings.Replace(text, \"'\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"\\\"\", \"\", -1)\n    text = strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text = strings.Replace(text, \"_\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"(\", \"\", -1)\n    text = strings.Replace(text, \"\
    )\", \"\", -1)\n    text = strings.Replace(text, \"[\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"]\", \"\", -1)\n    text = strings.Replace(text, \"\
    {\", \"\", -1)\n    text = strings.Replace(text, \"}\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"\\\\\", \"\", -1)\n    text = strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text = strings.Replace(text, \"*\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"+\", \"\", -1)\n    text = strings.Replace(text, \"\
    =\", \"\", -1)\n    text = strings.Replace(text, \"&\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"^\", \"\", -1)\n    text = strings.Replace(text, \"\
    %\", \"\", -1)\n    text = strings.Replace(text, \"$\", \"\", -1)\n    text\n\
    func TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr4knk8o__test.go:41:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073769
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) == 0 {\n        return false\n    }\n    for i := 0;\
    \ i < len(text)/2; i++ {\n        if text[i] != text[len(text)-i-1] {\n      \
    \      return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__0\
    \ (0.00s)\n        tmpkpa09r3u_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    length := len(text)\n    for i := 0; i < length/2; i++ {\n     \
    \   if text[i] != text[length-i-1] {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    reg, err := regexp.Compile(\"\
    [^a-zA-Z0-9]+\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    text\
    \ = reg.ReplaceAllString(text, \"\")\n\n    // Check if string is a palindrome\n\
    \    for i := 0; i < len(text)/2; i++ {\n        if text[i] != text[len(text)-i-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn4qy5mk4_test.go:11:12: undefined: strings

    /tmp/tmpn4qy5mk4_test.go:14:17: undefined: regexp

    /tmp/tmpn4qy5mk4_test.go:16:9: undefined: log

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    var re = regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i]\
    \ != text[len(text) - i - 1] {\n            return false\n        }\n    }\n\n\
    \    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate :=\
    \ is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgwzcttb2_test.go:11:12: undefined: strings

    /tmp/tmpgwzcttb2_test.go:14:14: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    var i, j int = 0, len(text) - 1\n    for i < j {\n        if text[i]\
    \ != text[j] {\n            return false\n        }\n        i++\n        j--\n\
    \    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    // from string\n    re :=\
    \ regexp.MustCompile(\"[^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\"\
    )\n\n    // Get length of string\n    length := len(text)\n\n    // Compare first\
    \ and last characters\n    // of string and move inwards\n    for i := 0; i <\
    \ length/2; i++ {\n        if text[i] != text[length-1-i] {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7jz0l3xy_test.go:11:12: undefined: strings

    /tmp/tmp7jz0l3xy_test.go:15:11: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    var re = regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnp7352zi_test.go:11:12: undefined: strings

    /tmp/tmpnp7352zi_test.go:14:14: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    var length = len(text)\n    var half = length / 2\n    var is_palindrome\
    \ = true\n\n    for i := 0; i < half; i++ {\n        if text[i] != text[length\
    \ - i - 1] {\n            is_palindrome = false\n            break\n        }\n\
    \    }\n\n    return is_palindrome\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    text = strings.Replace(text,\
    \ \" \", \"\", -1)\n    text = strings.Replace(text, \",\", \"\", -1)\n    text\
    \ = strings.Replace(text, \".\", \"\", -1)\n    text = strings.Replace(text, \"\
    !\", \"\", -1)\n    text = strings.Replace(text, \"?\", \"\", -1)\n    text =\
    \ strings.Replace(text, \";\", \"\", -1)\n    text = strings.Replace(text, \"\
    :\", \"\", -1)\n    text = strings.Replace(text, \"-\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"_\", \"\", -1)\n    text = strings.Replace(text, \"\
    (\", \"\", -1)\n    text = strings.Replace(text, \")\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"[\", \"\", -1)\n    text = strings.Replace(text, \"\
    ]\", \"\", -1)\n    text = strings.Replace(text, \"{\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"}\", \"\", -1)\n    text = strings.Replace(text, \"\
    '\", \"\", -1)\n    text = strings.Replace(text, \"\\\"\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"\\\\\", \"\", -1)\n    text = strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text = strings.Replace(text, \"`\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"~\", \"\", -1)\n    text = strings.Replace(text, \"\
    @\", \"\", -1)\n    text = strings.Replace(text, \"#\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"$\", \"\", -1)\n    text = strings.Replace(text, \"\
    %\", \"\", -1)\n    text = strings.Replace(text, \"^\", \"\", -1)\n    text =\n\
    func TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpscuowdik_test.go:41:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073769
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    length := len(text)\n    for i := 0; i < length/2; i++ {\n     \
    \   if text[i] != text[length-i-1] {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text)/2; i++ {\n        if text[i] != text[len(text)-i-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    var re = regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnp7352zi_test.go:11:12: undefined: strings

    /tmp/tmpnp7352zi_test.go:14:14: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove spaces\n    text = strings.Replace(text, \" \", \"\", -1)\n\n\
    \    // Get length of string\n    length := len(text)\n\n    // Iterate through\
    \ string\n    for i := 0; i < length/2; i++ {\n        // Check if characters\
    \ are equal\n        if text[i] != text[length-i-1] {\n            return false\n\
    \        }\n    }\n\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpizgxawvx_test.go:11:12: undefined: strings

    /tmp/tmpizgxawvx_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    var re = regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnp7352zi_test.go:11:12: undefined: strings

    /tmp/tmpnp7352zi_test.go:14:14: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    text = strings.Replace(text,\
    \ \" \", \"\", -1)\n    text = strings.Replace(text, \",\", \"\", -1)\n    text\
    \ = strings.Replace(text, \".\", \"\", -1)\n    text = strings.Replace(text, \"\
    :\", \"\", -1)\n    text = strings.Replace(text, \";\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"!\", \"\", -1)\n    text = strings.Replace(text, \"\
    ?\", \"\", -1)\n    text = strings.Replace(text, \"'\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"\\\"\", \"\", -1)\n    text = strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text = strings.Replace(text, \"_\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"(\", \"\", -1)\n    text = strings.Replace(text, \"\
    )\", \"\", -1)\n    text = strings.Replace(text, \"[\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"]\", \"\", -1)\n    text = strings.Replace(text, \"\
    {\", \"\", -1)\n    text = strings.Replace(text, \"}\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"|\", \"\", -1)\n    text = strings.Replace(text, \"\\\
    \\\", \"\", -1)\n    text = strings.Replace(text, \"/\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"*\", \"\", -1)\n    text = strings.Replace(text, \"\
    +\", \"\", -1)\n    text = strings.Replace(text, \"=\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"&\", \"\", -1)\n    text = strings.Replace(text, \"\
    ^\", \"\", -1)\n    text = strings.Replace(text, \"%\", \"\", -1)\n   \nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxygofepy_test.go:41:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073769
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    re := regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvekpr0y9_test.go:11:12: undefined: strings

    /tmp/tmpvekpr0y9_test.go:14:11: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    text = strings.Replace(text,\
    \ \" \", \"\", -1)\n    text = strings.Replace(text, \",\", \"\", -1)\n    text\
    \ = strings.Replace(text, \".\", \"\", -1)\n    text = strings.Replace(text, \"\
    !\", \"\", -1)\n    text = strings.Replace(text, \"?\", \"\", -1)\n    text =\
    \ strings.Replace(text, \":\", \"\", -1)\n    text = strings.Replace(text, \"\
    ;\", \"\", -1)\n    text = strings.Replace(text, \"\\\"\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"'\", \"\", -1)\n    text = strings.Replace(text, \"\
    (\", \"\", -1)\n    text = strings.Replace(text, \")\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"[\", \"\", -1)\n    text = strings.Replace(text, \"\
    ]\", \"\", -1)\n    text = strings.Replace(text, \"{\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"}\", \"\", -1)\n    text = strings.Replace(text, \"\\\
    \\\", \"\", -1)\n    text = strings.Replace(text, \"/\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"|\", \"\", -1)\n    text = strings.Replace(text, \"\
    `\", \"\", -1)\n    text = strings.Replace(text, \"~\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"&\", \"\", -1)\n    text = strings.Replace(text, \"\
    @\", \"\", -1)\n    text = strings.Replace(text, \"#\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"$\", \"\", -1)\n    text = strings.Replace(text, \"\
    %\", \"\", -1)\n    text = strings.Replace(text, \"^\", \"\", -1)\n   \nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjlqiamo5_test.go:41:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073769
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    length := len(text)\n    for i := 0; i < length/2; i++ {\n     \
    \   if text[i] != text[length-i-1] {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert to lowercase\n    text = strings.ToLower(text)\n    //\
    \ Remove all non-alphanumeric characters\n    text = strings.Replace(text, \"\
    \ \", \"\", -1)\n    text = strings.Replace(text, \",\", \"\", -1)\n    text =\
    \ strings.Replace(text, \".\", \"\", -1)\n    text = strings.Replace(text, \"\
    :\", \"\", -1)\n    text = strings.Replace(text, \";\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"!\", \"\", -1)\n    text = strings.Replace(text, \"\
    ?\", \"\", -1)\n    text = strings.Replace(text, \"'\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"\\\"\", \"\", -1)\n    text = strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text = strings.Replace(text, \"_\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"(\", \"\", -1)\n    text = strings.Replace(text, \"\
    )\", \"\", -1)\n    text = strings.Replace(text, \"[\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"]\", \"\", -1)\n    text = strings.Replace(text, \"\
    {\", \"\", -1)\n    text = strings.Replace(text, \"}\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"*\", \"\", -1)\n    text = strings.Replace(text, \"\
    +\", \"\", -1)\n    text = strings.Replace(text, \"=\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"&\", \"\", -1)\n    text = strings.Replace(text, \"\
    ^\", \"\", -1)\n    text = strings.Replace(text, \"%\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"$\", \"\", -1)\n    text = strings.Replace(text, \"\
    #\", \"\", -1)\n    text = strings.Replace(text, \"@\", \"\", -1)\n    text =\
    \ strings\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr6p_6ydu_test.go:40:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073769
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    re := regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvekpr0y9_test.go:11:12: undefined: strings

    /tmp/tmpvekpr0y9_test.go:14:11: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    length := len(text)\n    for i := 0; i < length / 2; i++ {\n   \
    \     if text[i] != text[length - i - 1] {\n            return false\n       \
    \ }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    text_len := len(text)\n    for i := 0; i < text_len / 2; i++ {\n\
    \        if text[i] != text[text_len - i - 1] {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073771
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \    // Remove all non-alphanumeric characters\n    text = strings.Replace(text,\
    \ \" \", \"\", -1)\n    text = strings.Replace(text, \",\", \"\", -1)\n    text\
    \ = strings.Replace(text, \".\", \"\", -1)\n    text = strings.Replace(text, \"\
    !\", \"\", -1)\n    text = strings.Replace(text, \"?\", \"\", -1)\n    text =\
    \ strings.Replace(text, \":\", \"\", -1)\n    text = strings.Replace(text, \"\
    ;\", \"\", -1)\n    text = strings.Replace(text, \"'\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"\\\"\", \"\", -1)\n    text = strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text = strings.Replace(text, \"_\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"(\", \"\", -1)\n    text = strings.Replace(text, \"\
    )\", \"\", -1)\n    text = strings.Replace(text, \"[\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"]\", \"\", -1)\n    text = strings.Replace(text, \"\
    {\", \"\", -1)\n    text = strings.Replace(text, \"}\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"*\", \"\", -1)\n    text = strings.Replace(text, \"\
    +\", \"\", -1)\n    text = strings.Replace(text, \"=\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"&\", \"\", -1)\n    text = strings.Replace(text, \"\
    ^\", \"\", -1)\n    text = strings.Replace(text, \"%\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"$\", \"\", -1)\n    text = strings.Replace(text, \"\
    #\", \"\", -1)\n    text = strings.Replace(text, \"@\", \"\", -1)\n    text =\n\
    func TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp13ly9qfz_test.go:40:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \    // Remove all non-alphanumeric characters\n    text = strings.Replace(text,\
    \ \" \", \"\", -1)\n    text = strings.Replace(text, \",\", \"\", -1)\n    text\
    \ = strings.Replace(text, \".\", \"\", -1)\n    text = strings.Replace(text, \"\
    !\", \"\", -1)\n    text = strings.Replace(text, \"?\", \"\", -1)\n    text =\
    \ strings.Replace(text, \":\", \"\", -1)\n    text = strings.Replace(text, \"\
    ;\", \"\", -1)\n    text = strings.Replace(text, \"'\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"\\\"\", \"\", -1)\n    text = strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text = strings.Replace(text, \"_\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"(\", \"\", -1)\n    text = strings.Replace(text, \"\
    )\", \"\", -1)\n    text = strings.Replace(text, \"[\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"]\", \"\", -1)\n    text = strings.Replace(text, \"\
    {\", \"\", -1)\n    text = strings.Replace(text, \"}\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"\\\\\", \"\", -1)\n    text = strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text = strings.Replace(text, \"*\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"+\", \"\", -1)\n    text = strings.Replace(text, \"\
    =\", \"\", -1)\n    text = strings.Replace(text, \"&\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"^\", \"\", -1)\n    text = strings.Replace(text, \"\
    %\", \"\", -1)\n    text = strings.Replace(text, \"$\", \"\", -1)\n    text\n\
    func TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpityr64b6_test.go:40:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) == 0 {\n        return false\n    }\n    for i := 0;\
    \ i < len(text)/2; i++ {\n        if text[i] != text[len(text)-i-1] {\n      \
    \      return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__0\
    \ (0.00s)\n        tmpkpa09r3u_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \    // Remove all non-alphanumeric characters\n    text = strings.Replace(text,\
    \ \" \", \"\", -1)\n    text = strings.Replace(text, \",\", \"\", -1)\n    text\
    \ = strings.Replace(text, \".\", \"\", -1)\n    text = strings.Replace(text, \"\
    :\", \"\", -1)\n    text = strings.Replace(text, \";\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"!\", \"\", -1)\n    text = strings.Replace(text, \"\
    ?\", \"\", -1)\n    text = strings.Replace(text, \"'\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"\\\"\", \"\", -1)\n    text = strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text = strings.Replace(text, \"_\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"(\", \"\", -1)\n    text = strings.Replace(text, \"\
    )\", \"\", -1)\n    text = strings.Replace(text, \"[\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"]\", \"\", -1)\n    text = strings.Replace(text, \"\
    {\", \"\", -1)\n    text = strings.Replace(text, \"}\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"\\\\\", \"\", -1)\n    text = strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text = strings.Replace(text, \"*\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"+\", \"\", -1)\n    text = strings.Replace(text, \"\
    =\", \"\", -1)\n    text = strings.Replace(text, \"&\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"^\", \"\", -1)\n    text = strings.Replace(text, \"\
    %\", \"\", -1)\n    text = strings.Replace(text, \"$\", \"\", -1)\n    text\n\
    func TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqdltmqno_test.go:40:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \    // Remove all non-alphanumeric characters\n    text = strings.Replace(text,\
    \ \" \", \"\", -1)\n    text = strings.Replace(text, \",\", \"\", -1)\n    text\
    \ = strings.Replace(text, \".\", \"\", -1)\n    text = strings.Replace(text, \"\
    :\", \"\", -1)\n    text = strings.Replace(text, \";\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"?\", \"\", -1)\n    text = strings.Replace(text, \"\
    !\", \"\", -1)\n    text = strings.Replace(text, \"\\\"\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"'\", \"\", -1)\n    text = strings.Replace(text, \"\
    (\", \"\", -1)\n    text = strings.Replace(text, \")\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"[\", \"\", -1)\n    text = strings.Replace(text, \"\
    ]\", \"\", -1)\n    text = strings.Replace(text, \"{\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"}\", \"\", -1)\n    text = strings.Replace(text, \"\
    &\", \"\", -1)\n    text = strings.Replace(text, \"@\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"#\", \"\", -1)\n    text = strings.Replace(text, \"\
    $\", \"\", -1)\n    text = strings.Replace(text, \"%\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"^\", \"\", -1)\n    text = strings.Replace(text, \"\
    *\", \"\", -1)\n    text = strings.Replace(text, \"_\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"-\", \"\", -1)\n    text = strings.Replace(text, \"\
    +\", \"\", -1)\n    text = strings.Replace(text, \"=\", \"\", -1)\n    text =\n\
    func TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbq8balpo_test.go:40:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \    // Remove all non-alphanumeric characters\n    text = strings.Replace(text,\
    \ \" \", \"\", -1)\n    text = strings.Replace(text, \",\", \"\", -1)\n    text\
    \ = strings.Replace(text, \".\", \"\", -1)\n    text = strings.Replace(text, \"\
    :\", \"\", -1)\n    text = strings.Replace(text, \";\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"!\", \"\", -1)\n    text = strings.Replace(text, \"\
    ?\", \"\", -1)\n    text = strings.Replace(text, \"-\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"_\", \"\", -1)\n    text = strings.Replace(text, \"\
    (\", \"\", -1)\n    text = strings.Replace(text, \")\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"[\", \"\", -1)\n    text = strings.Replace(text, \"\
    ]\", \"\", -1)\n    text = strings.Replace(text, \"{\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"}\", \"\", -1)\n    text = strings.Replace(text, \"\
    '\", \"\", -1)\n    text = strings.Replace(text, \"\\\"\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"`\", \"\", -1)\n    text = strings.Replace(text, \"\
    ~\", \"\", -1)\n    text = strings.Replace(text, \"\\\\\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"/\", \"\", -1)\n    text = strings.Replace(text, \"\
    |\", \"\", -1)\n    text = strings.Replace(text, \"=\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"+\", \"\", -1)\n    text = strings.Replace(text, \"\
    *\", \"\", -1)\n    text = strings.Replace(text, \"&\", \"\", -1)\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy3np6dfl_test.go:40:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \    // Remove all non-alphanumeric characters\n    text = strings.Replace(text,\
    \ \" \", \"\", -1)\n    text = strings.Replace(text, \",\", \"\", -1)\n    text\
    \ = strings.Replace(text, \".\", \"\", -1)\n    text = strings.Replace(text, \"\
    !\", \"\", -1)\n    text = strings.Replace(text, \"?\", \"\", -1)\n    text =\
    \ strings.Replace(text, \":\", \"\", -1)\n    text = strings.Replace(text, \"\
    ;\", \"\", -1)\n    text = strings.Replace(text, \"'\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"\\\"\", \"\", -1)\n    text = strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text = strings.Replace(text, \"_\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"(\", \"\", -1)\n    text = strings.Replace(text, \"\
    )\", \"\", -1)\n    text = strings.Replace(text, \"[\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"]\", \"\", -1)\n    text = strings.Replace(text, \"\
    {\", \"\", -1)\n    text = strings.Replace(text, \"}\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"\\\\\", \"\", -1)\n    text = strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text = strings.Replace(text, \"|\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"`\", \"\", -1)\n    text = strings.Replace(text, \"\
    ~\", \"\", -1)\n    text = strings.Replace(text, \"@\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"#\", \"\", -1)\n    text = strings.Replace(text, \"\
    $\", \"\", -1)\n    text = strings.Replace(text, \"%\", \"\", -1)\n    text =\n\
    func TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvghzezfs_test.go:40:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Get the length of the string\n    length := len(text)\n\n   \
    \ // Loop through the string\n    for i := 0; i < length/2; i++ {\n        //\
    \ Check if the characters at the beginning and end of the string are equal\n \
    \       if text[i] != text[length-i-1] {\n            return false\n        }\n\
    \    }\n\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073772
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    length := len(text)\n    for i := 0; i < length/2; i++ {\n     \
    \   if text[i] != text[length-i-1] {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \    // Remove all non-alphanumeric characters\n    text = strings.Replace(text,\
    \ \" \", \"\", -1)\n    text = strings.Replace(text, \",\", \"\", -1)\n    text\
    \ = strings.Replace(text, \".\", \"\", -1)\n    text = strings.Replace(text, \"\
    :\", \"\", -1)\n    text = strings.Replace(text, \";\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"'\", \"\", -1)\n    text = strings.Replace(text, \"\\\
    \"\", \"\", -1)\n    text = strings.Replace(text, \"!\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"?\", \"\", -1)\n    text = strings.Replace(text, \"\
    (\", \"\", -1)\n    text = strings.Replace(text, \")\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"[\", \"\", -1)\n    text = strings.Replace(text, \"\
    ]\", \"\", -1)\n    text = strings.Replace(text, \"{\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"}\", \"\", -1)\n    text = strings.Replace(text, \"\
    &\", \"\", -1)\n    text = strings.Replace(text, \"^\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"%\", \"\", -1)\n    text = strings.Replace(text, \"\
    $\", \"\", -1)\n    text = strings.Replace(text, \"#\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"@\", \"\", -1)\n    text = strings.Replace(text, \"\
    *\", \"\", -1)\n    text = strings.Replace(text, \"-\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"_\", \"\", -1)\n    text = strings.Replace(text, \"\
    +\", \"\", -1)\n    text = strings.Replace(text, \"=\", \"\", -1)\n    text =\n\
    func TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp57torlxz_test.go:40:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073771
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to rune slice\n    runes := []rune(text)\n\n \
    \   // Get length of rune slice\n    length := len(runes)\n\n    // Iterate over\
    \ runes\n    for i := 0; i < length / 2; i++ {\n        // If runes at index i\
    \ and length - i - 1 are not equal\n        if runes[i] != runes[length - i -\
    \ 1] {\n            // Return false\n            return false\n        }\n   \
    \ }\n\n    // Return true\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073772
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \    // Remove spaces\n    text = strings.Replace(text, \" \", \"\", -1)\n   \
    \ // Get length of string\n    length := len(text)\n    // Iterate over half of\
    \ the string\n    for i := 0; i < length / 2; i++ {\n        // Compare characters\
    \ at opposite ends of string\n        if text[i] != text[length - i - 1] {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzcvvy58u_test.go:11:12: undefined: strings

    /tmp/tmpzcvvy58u_test.go:13:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073771
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \    // Remove spaces\n    text = strings.Replace(text, \" \", \"\", -1)\n   \
    \ // Remove punctuation\n    text = strings.Replace(text, \",\", \"\", -1)\n \
    \   text = strings.Replace(text, \".\", \"\", -1)\n    text = strings.Replace(text,\
    \ \"!\", \"\", -1)\n    text = strings.Replace(text, \"?\", \"\", -1)\n    text\
    \ = strings.Replace(text, \";\", \"\", -1)\n    text = strings.Replace(text, \"\
    :\", \"\", -1)\n    text = strings.Replace(text, \"\\\"\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"'\", \"\", -1)\n    text = strings.Replace(text, \"\
    (\", \"\", -1)\n    text = strings.Replace(text, \")\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"[\", \"\", -1)\n    text = strings.Replace(text, \"\
    ]\", \"\", -1)\n    text = strings.Replace(text, \"{\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"}\", \"\", -1)\n    text = strings.Replace(text, \"\
    `\", \"\", -1)\n    text = strings.Replace(text, \"~\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"@\", \"\", -1)\n    text = strings.Replace(text, \"\
    #\", \"\", -1)\n    text = strings.Replace(text, \"$\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"%\", \"\", -1)\n    text = strings.Replace(text, \"\
    ^\", \"\", -1)\n    text = strings.Replace(text, \"&\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"*\", \"\", -1)\n    text = strings.Replace(text, \"\
    -\", \"\", -1)\n    text = strings.Replace(text, \"_\", \"\", -1)\n    text\n\
    func TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxoex5f4m_test.go:41:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073771
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    length := len(text)\n    for i := 0; i < length/2; i++ {\n     \
    \   if text[i] != text[length-i-1] {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    lowercase := []rune(text)\n\
    \    for i, c := range lowercase {\n        lowercase[i] = unicode.ToLower(c)\n\
    \    }\n\n    // Check if string is a palindrome\n    for i := 0; i < len(lowercase)/2;\
    \ i++ {\n        if lowercase[i] != lowercase[len(lowercase)-i-1] {\n        \
    \    return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0oqap88l_test.go:13:24: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073771
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) == 0 {\n        return false\n    }\n\n    for i :=\
    \ 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text) - i - 1] {\n\
    \            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__0\
    \ (0.00s)\n        tmp7sfnxi_m_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073772
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Get the length of the string\n    length := len(text)\n\n   \
    \ // Check if the length is less than 2\n    if length < 2 {\n        return true\n\
    \    }\n\n    // Check if the first and last characters are the same\n    if text[0]\
    \ != text[length - 1] {\n        return false\n    }\n\n    // Return the result\
    \ of the recursive call\n    return is_palindrome(text[1:length - 1])\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073772
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \    // Remove spaces\n    text = strings.Replace(text, \" \", \"\", -1)\n   \
    \ // Convert string to rune slice\n    runes := []rune(text)\n    // Get length\
    \ of rune slice\n    length := len(runes)\n    // Iterate over half of the rune\
    \ slice\n    for i := 0; i < length / 2; i++ {\n        // Check if runes are\
    \ equal\n        if runes[i] != runes[length - 1 - i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptwv5j623_test.go:11:12: undefined: strings

    /tmp/tmptwv5j623_test.go:13:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073772
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    var re = regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnp7352zi_test.go:11:12: undefined: strings

    /tmp/tmpnp7352zi_test.go:14:14: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    var length = len(text)\n    var half = length / 2\n    var is_palindrome\
    \ = true\n\n    for i := 0; i < half; i++ {\n        if text[i] != text[length\
    \ - i - 1] {\n            is_palindrome = false\n            break\n        }\n\
    \    }\n\n    return is_palindrome\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove non-alphanumeric characters\n    text = strings.Replace(text,\
    \ \" \", \"\", -1)\n    text = strings.Replace(text, \",\", \"\", -1)\n    text\
    \ = strings.Replace(text, \".\", \"\", -1)\n    text = strings.Replace(text, \"\
    :\", \"\", -1)\n    text = strings.Replace(text, \";\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"!\", \"\", -1)\n    text = strings.Replace(text, \"\
    ?\", \"\", -1)\n    text = strings.Replace(text, \"'\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"\\\"\", \"\", -1)\n    text = strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text = strings.Replace(text, \"_\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"(\", \"\", -1)\n    text = strings.Replace(text, \"\
    )\", \"\", -1)\n    text = strings.Replace(text, \"[\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"]\", \"\", -1)\n    text = strings.Replace(text, \"\
    {\", \"\", -1)\n    text = strings.Replace(text, \"}\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"\\\\\", \"\", -1)\n    text = strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text = strings.Replace(text, \"*\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"+\", \"\", -1)\n    text = strings.Replace(text, \"\
    =\", \"\", -1)\n    text = strings.Replace(text, \"&\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"^\", \"\", -1)\n    text = strings.Replace(text, \"\
    %\", \"\", -1)\n    text = strings.Replace(text, \"$\", \"\", -1)\n    text =\n\
    func TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9gnq33zd_test.go:41:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073771
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    reg, err := regexp.Compile(\"\
    [^a-zA-Z0-9]+\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    text\
    \ = reg.ReplaceAllString(text, \"\")\n\n    // Check if string is a palindrome\n\
    \    for i := 0; i < len(text)/2; i++ {\n        if text[i] != text[len(text)-i-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn4qy5mk4_test.go:11:12: undefined: strings

    /tmp/tmpn4qy5mk4_test.go:14:17: undefined: regexp

    /tmp/tmpn4qy5mk4_test.go:16:9: undefined: log

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    var re = regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnp7352zi_test.go:11:12: undefined: strings

    /tmp/tmpnp7352zi_test.go:14:14: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Convert string to rune slice\n    runes := []rune(text)\n\n    // Get\
    \ length of rune slice\n    length := len(runes)\n\n    // Iterate over runes\n\
    \    for i := 0; i < length/2; i++ {\n        // Compare runes at i and length-i-1\n\
    \        if runes[i] != runes[length-i-1] {\n            return false\n      \
    \  }\n    }\n\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdvuobkjn_test.go:11:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073772
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    var re = regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnp7352zi_test.go:11:12: undefined: strings

    /tmp/tmpnp7352zi_test.go:14:14: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    re := regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvekpr0y9_test.go:11:12: undefined: strings

    /tmp/tmpvekpr0y9_test.go:14:11: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lower case\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    re := regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkd0a9ss0_test.go:11:12: undefined: strings

    /tmp/tmpkd0a9ss0_test.go:14:11: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073772
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    length := len(text)\n    for i := 0; i < length / 2; i++ {\n   \
    \     if text[i] != text[length - i - 1] {\n            return false\n       \
    \ }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    var re = regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnp7352zi_test.go:11:12: undefined: strings

    /tmp/tmpnp7352zi_test.go:14:14: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    text = strings.Replace(text,\
    \ \" \", \"\", -1)\n    text = strings.Replace(text, \",\", \"\", -1)\n    text\
    \ = strings.Replace(text, \".\", \"\", -1)\n    text = strings.Replace(text, \"\
    :\", \"\", -1)\n    text = strings.Replace(text, \";\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"!\", \"\", -1)\n    text = strings.Replace(text, \"\
    ?\", \"\", -1)\n    text = strings.Replace(text, \"'\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"\\\"\", \"\", -1)\n    text = strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text = strings.Replace(text, \"_\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"(\", \"\", -1)\n    text = strings.Replace(text, \"\
    )\", \"\", -1)\n    text = strings.Replace(text, \"[\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"]\", \"\", -1)\n    text = strings.Replace(text, \"\
    {\", \"\", -1)\n    text = strings.Replace(text, \"}\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"\\\\\", \"\", -1)\n    text = strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text = strings.Replace(text, \"*\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"+\", \"\", -1)\n    text = strings.Replace(text, \"\
    =\", \"\", -1)\n    text = strings.Replace(text, \"&\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"^\", \"\", -1)\n    text = strings.Replace(text, \"\
    %\", \"\", -1)\n    text = strings.Replace(text, \"$\", \"\", -1)\n    text\n\
    func TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp09urxd3k_test.go:41:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073772
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    var re = regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnp7352zi_test.go:11:12: undefined: strings

    /tmp/tmpnp7352zi_test.go:14:14: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    re := regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvekpr0y9_test.go:11:12: undefined: strings

    /tmp/tmpvekpr0y9_test.go:14:11: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    var re = regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    var length = len(text)\n    for i := 0; i < length/2; i++\
    \ {\n        if text[i] != text[length-1-i] {\n            return false\n    \
    \    }\n    }\n\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxcc5rtxh_test.go:11:12: undefined: strings

    /tmp/tmpxcc5rtxh_test.go:14:14: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073772
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove spaces\n    text = strings.Replace(text, \" \", \"\", -1)\n\n\
    \    // Check if string is a palindrome\n    for i := 0; i < len(text)/2; i++\
    \ {\n        if text[i] != text[len(text)-i-1] {\n            return false\n \
    \       }\n    }\n\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgmcc15et_test.go:11:12: undefined: strings

    /tmp/tmpgmcc15et_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073772
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    var re = regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnp7352zi_test.go:11:12: undefined: strings

    /tmp/tmpnp7352zi_test.go:14:14: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    var re = regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnp7352zi_test.go:11:12: undefined: strings

    /tmp/tmpnp7352zi_test.go:14:14: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    reg, err := regexp.Compile(\"\
    [^a-zA-Z0-9]+\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    text\
    \ = reg.ReplaceAllString(text, \"\")\n\n    // Check if string is a palindrome\n\
    \    for i := 0; i < len(text)/2; i++ {\n        if text[i] != text[len(text)-i-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn4qy5mk4_test.go:11:12: undefined: strings

    /tmp/tmpn4qy5mk4_test.go:14:17: undefined: regexp

    /tmp/tmpn4qy5mk4_test.go:16:9: undefined: log

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Remove spaces and convert to lowercase\n    text = remove_spaces(text)\n\
    \    text = to_lowercase(text)\n\n    // Check if string is a palindrome\n   \
    \ for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text) -\
    \ i - 1] {\n            return false\n        }\n    }\n\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr1ys2zbw_test.go:11:12: undefined: remove_spaces

    /tmp/tmpr1ys2zbw_test.go:12:12: undefined: to_lowercase

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073772
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    reg, err := regexp.Compile(\"\
    [^a-zA-Z0-9]+\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    text\
    \ = reg.ReplaceAllString(text, \"\")\n\n    // Check if string is a palindrome\n\
    \    for i := 0; i < len(text)/2; i++ {\n        if text[i] != text[len(text)-i-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn4qy5mk4_test.go:11:12: undefined: strings

    /tmp/tmpn4qy5mk4_test.go:14:17: undefined: regexp

    /tmp/tmpn4qy5mk4_test.go:16:9: undefined: log

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    var re = regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i]\
    \ != text[len(text) - i - 1] {\n            return false\n        }\n    }\n\n\
    \    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate :=\
    \ is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgwzcttb2_test.go:11:12: undefined: strings

    /tmp/tmpgwzcttb2_test.go:14:14: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    re := regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvekpr0y9_test.go:11:12: undefined: strings

    /tmp/tmpvekpr0y9_test.go:14:11: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove spaces and punctuation\n    text = strings.Replace(text, \" \"\
    , \"\", -1)\n    text = strings.Replace(text, \",\", \"\", -1)\n    text = strings.Replace(text,\
    \ \".\", \"\", -1)\n    text = strings.Replace(text, \":\", \"\", -1)\n    text\
    \ = strings.Replace(text, \";\", \"\", -1)\n    text = strings.Replace(text, \"\
    !\", \"\", -1)\n    text = strings.Replace(text, \"?\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"'\", \"\", -1)\n    text = strings.Replace(text, \"\\\
    \"\", \"\", -1)\n\n    // Check if string is a palindrome\n    for i := 0; i <\
    \ len(text) / 2; i++ {\n        if text[i] != text[len(text) - i - 1] {\n    \
    \        return false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb57iehrl_test.go:11:12: undefined: strings

    /tmp/tmpb57iehrl_test.go:14:12: undefined: strings

    /tmp/tmpb57iehrl_test.go:15:12: undefined: strings

    /tmp/tmpb57iehrl_test.go:16:12: undefined: strings

    /tmp/tmpb57iehrl_test.go:17:12: undefined: strings

    /tmp/tmpb57iehrl_test.go:18:12: undefined: strings

    /tmp/tmpb57iehrl_test.go:19:12: undefined: strings

    /tmp/tmpb57iehrl_test.go:20:12: undefined: strings

    /tmp/tmpb57iehrl_test.go:21:12: undefined: strings

    /tmp/tmpb57iehrl_test.go:22:12: undefined: strings

    /tmp/tmpb57iehrl_test.go:22:12: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073772
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    re := regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvekpr0y9_test.go:11:12: undefined: strings

    /tmp/tmpvekpr0y9_test.go:14:11: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    re := regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvekpr0y9_test.go:11:12: undefined: strings

    /tmp/tmpvekpr0y9_test.go:14:11: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    var re = regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnp7352zi_test.go:11:12: undefined: strings

    /tmp/tmpnp7352zi_test.go:14:14: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    reg, err := regexp.Compile(\"\
    [^a-zA-Z0-9]+\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    text\
    \ = reg.ReplaceAllString(text, \"\")\n\n    // Check if string is a palindrome\n\
    \    for i := 0; i < len(text)/2; i++ {\n        if text[i] != text[len(text)-i-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn4qy5mk4_test.go:11:12: undefined: strings

    /tmp/tmpn4qy5mk4_test.go:14:17: undefined: regexp

    /tmp/tmpn4qy5mk4_test.go:16:9: undefined: log

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove spaces\n    text = strings.Replace(text, \" \", \"\", -1)\n\n\
    \    // Get length of string\n    length := len(text)\n\n    // Loop through string\n\
    \    for i := 0; i < length / 2; i++ {\n        // Check if characters are equal\n\
    \        if text[i] != text[length - i - 1] {\n            return false\n    \
    \    }\n    }\n\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9c1oalh_test.go:11:12: undefined: strings

    /tmp/tmpj9c1oalh_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073772
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    var re = regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnp7352zi_test.go:11:12: undefined: strings

    /tmp/tmpnp7352zi_test.go:14:14: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    re := regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvekpr0y9_test.go:11:12: undefined: strings

    /tmp/tmpvekpr0y9_test.go:14:11: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    var length = len(text)\n    var half_length = length / 2\n    var\
    \ is_palindrome = true\n\n    for i := 0; i < half_length; i++ {\n        if text[i]\
    \ != text[length - i - 1] {\n            is_palindrome = false\n            break\n\
    \        }\n    }\n\n    return is_palindrome\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073772
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    length := len(text)\n    for i := 0; i < length / 2; i++ {\n   \
    \     if text[i] != text[length - i - 1] {\n            return false\n       \
    \ }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    length := len(text)\n    for i := 0; i < length/2; i++ {\n     \
    \   if text[i] != text[length-i-1] {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    length := len(text)\n    for i := 0; i < length / 2; i++ {\n   \
    \     if text[i] != text[length - i - 1] {\n            return false\n       \
    \ }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    length := len(text)\n    for i := 0; i < length/2; i++ {\n     \
    \   if text[i] != text[length-i-1] {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    length := len(text)\n    for i := 0; i < length / 2; i++ {\n   \
    \     if text[i] != text[length - i - 1] {\n            return false\n       \
    \ }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    text = strings.Replace(text,\
    \ \" \", \"\", -1)\n    text = strings.Replace(text, \",\", \"\", -1)\n    text\
    \ = strings.Replace(text, \".\", \"\", -1)\n    text = strings.Replace(text, \"\
    :\", \"\", -1)\n    text = strings.Replace(text, \";\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"!\", \"\", -1)\n    text = strings.Replace(text, \"\
    ?\", \"\", -1)\n    text = strings.Replace(text, \"'\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"\\\"\", \"\", -1)\n    text = strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text = strings.Replace(text, \"_\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"(\", \"\", -1)\n    text = strings.Replace(text, \"\
    )\", \"\", -1)\n    text = strings.Replace(text, \"[\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"]\", \"\", -1)\n    text = strings.Replace(text, \"\
    {\", \"\", -1)\n    text = strings.Replace(text, \"}\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"\\\\\", \"\", -1)\n    text = strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text = strings.Replace(text, \"*\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"+\", \"\", -1)\n    text = strings.Replace(text, \"\
    =\", \"\", -1)\n    text = strings.Replace(text, \"&\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"^\", \"\", -1)\n    text = strings.Replace(text, \"\
    %\", \"\", -1)\n    text = strings.Replace(text, \"$\", \"\", -1)\n    text\n\
    func TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp09urxd3k_test.go:41:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073772
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    text = strings.Replace(text,\
    \ \" \", \"\", -1)\n    text = strings.Replace(text, \",\", \"\", -1)\n    text\
    \ = strings.Replace(text, \".\", \"\", -1)\n    text = strings.Replace(text, \"\
    !\", \"\", -1)\n    text = strings.Replace(text, \"?\", \"\", -1)\n    text =\
    \ strings.Replace(text, \":\", \"\", -1)\n    text = strings.Replace(text, \"\
    ;\", \"\", -1)\n    text = strings.Replace(text, \"-\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"(\", \"\", -1)\n    text = strings.Replace(text, \"\
    )\", \"\", -1)\n    text = strings.Replace(text, \"'\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"\\\"\", \"\", -1)\n\n    // Check if string is a palindrome\n\
    \    for i := 0; i < len(text)/2; i++ {\n        if text[i] != text[len(text)-i-1]\
    \ {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf3r03ao6_test.go:11:12: undefined: strings

    /tmp/tmpf3r03ao6_test.go:14:12: undefined: strings

    /tmp/tmpf3r03ao6_test.go:15:12: undefined: strings

    /tmp/tmpf3r03ao6_test.go:16:12: undefined: strings

    /tmp/tmpf3r03ao6_test.go:17:12: undefined: strings

    /tmp/tmpf3r03ao6_test.go:18:12: undefined: strings

    /tmp/tmpf3r03ao6_test.go:19:12: undefined: strings

    /tmp/tmpf3r03ao6_test.go:20:12: undefined: strings

    /tmp/tmpf3r03ao6_test.go:21:12: undefined: strings

    /tmp/tmpf3r03ao6_test.go:22:12: undefined: strings

    /tmp/tmpf3r03ao6_test.go:22:12: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073772
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    var i, j int = 0, len(text) - 1\n    for i < j {\n        if text[i]\
    \ != text[j] {\n            return false\n        }\n        i++\n        j--\n\
    \    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    var re = regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnp7352zi_test.go:11:12: undefined: strings

    /tmp/tmpnp7352zi_test.go:14:14: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    length := len(text)\n    for i := 0; i < length/2; i++ {\n     \
    \   if text[i] != text[length-i-1] {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    length := len(text)\n    for i := 0; i < length / 2; i++ {\n   \
    \     if text[i] != text[length - i - 1] {\n            return false\n       \
    \ }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    length := len(text)\n    for i := 0; i < length / 2; i++ {\n   \
    \     if text[i] != text[length - i - 1] {\n            return false\n       \
    \ }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    // from the string\n    var\
    \ re = regexp.MustCompile(\"[^a-z0-9]+\")\n    text = re.ReplaceAllString(text,\
    \ \"\")\n\n    // Get length of the string\n    n := len(text)\n\n    // Compare\
    \ characters from beginning and end\n    // of the string\n    for i := 0; i <\
    \ n/2; i++ {\n        if text[i] != text[n-i-1] {\n            return false\n\
    \        }\n    }\n\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmeh4n5up_test.go:11:12: undefined: strings

    /tmp/tmpmeh4n5up_test.go:15:14: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073772
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    var length = len(text)\n    var half = length / 2\n    var is_palindrome\
    \ = true\n\n    for i := 0; i < half; i++ {\n        if text[i] != text[length\
    \ - i - 1] {\n            is_palindrome = false\n            break\n        }\n\
    \    }\n\n    return is_palindrome\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) == 0 {\n        return false\n    }\n    for i := 0;\
    \ i < len(text) / 2; i++ {\n        if text[i] != text[len(text) - i - 1] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__0\
    \ (0.00s)\n        tmpqh2n4k2f_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073772
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    var i, j int\n    for i, j = 0, len(text) - 1; i < j; i, j = i +\
    \ 1, j - 1 {\n        if text[i] != text[j] {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    var length = len(text)\n    var half = length / 2\n    var is_palindrome\
    \ = true\n\n    for i := 0; i < half; i++ {\n        if text[i] != text[length\
    \ - i - 1] {\n            is_palindrome = false\n            break\n        }\n\
    \    }\n\n    return is_palindrome\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    reg, err := regexp.Compile(\"\
    [^a-zA-Z0-9]+\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    text\
    \ = reg.ReplaceAllString(text, \"\")\n\n    // Check if string is a palindrome\n\
    \    for i := 0; i < len(text)/2; i++ {\n        if text[i] != text[len(text)-i-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn4qy5mk4_test.go:11:12: undefined: strings

    /tmp/tmpn4qy5mk4_test.go:14:17: undefined: regexp

    /tmp/tmpn4qy5mk4_test.go:16:9: undefined: log

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    length := len(text)\n    for i := 0; i < length/2; i++ {\n     \
    \   if text[i] != text[length-i-1] {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    reg, err := regexp.Compile(\"\
    [^a-zA-Z0-9]+\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    text\
    \ = reg.ReplaceAllString(text, \"\")\n\n    // Check if string is a palindrome\n\
    \    for i := 0; i < len(text)/2; i++ {\n        if text[i] != text[len(text)-i-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn4qy5mk4_test.go:11:12: undefined: strings

    /tmp/tmpn4qy5mk4_test.go:14:17: undefined: regexp

    /tmp/tmpn4qy5mk4_test.go:16:9: undefined: log

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    var length = len(text)\n    var half = length / 2\n    for i :=\
    \ 0; i < half; i++ {\n        if text[i] != text[length - i - 1] {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073773
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    var length = len(text)\n    var half_length = length / 2\n    for\
    \ i := 0; i < half_length; i++ {\n        if text[i] != text[length - i - 1] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073773
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    for i := 0; i < len(text) / 2; i++ {\n        if text[i] != text[len(text)\
    \ - i - 1] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove spaces and punctuation\n    text = strings.Replace(text, \" \"\
    , \"\", -1)\n    text = strings.Replace(text, \",\", \"\", -1)\n    text = strings.Replace(text,\
    \ \".\", \"\", -1)\n    text = strings.Replace(text, \"!\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"?\", \"\", -1)\n    text = strings.Replace(text, \"\
    :\", \"\", -1)\n    text = strings.Replace(text, \";\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"'\", \"\", -1)\n    text = strings.Replace(text, \"\\\
    \"\", \"\", -1)\n\n    // Check if text is a palindrome\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-i-1] {\n            return false\n\
    \        }\n    }\n\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj0enpg5r_test.go:11:12: undefined: strings

    /tmp/tmpj0enpg5r_test.go:14:12: undefined: strings

    /tmp/tmpj0enpg5r_test.go:15:12: undefined: strings

    /tmp/tmpj0enpg5r_test.go:16:12: undefined: strings

    /tmp/tmpj0enpg5r_test.go:17:12: undefined: strings

    /tmp/tmpj0enpg5r_test.go:18:12: undefined: strings

    /tmp/tmpj0enpg5r_test.go:19:12: undefined: strings

    /tmp/tmpj0enpg5r_test.go:20:12: undefined: strings

    /tmp/tmpj0enpg5r_test.go:21:12: undefined: strings

    /tmp/tmpj0enpg5r_test.go:22:12: undefined: strings

    /tmp/tmpj0enpg5r_test.go:22:12: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073772
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    var re = regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnp7352zi_test.go:11:12: undefined: strings

    /tmp/tmpnp7352zi_test.go:14:14: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    var length = len(text)\n    var half = length / 2\n    var is_palindrome\
    \ = true\n\n    for i := 0; i < half; i++ {\n        if text[i] != text[length\
    \ - i - 1] {\n            is_palindrome = false\n            break\n        }\n\
    \    }\n\n    return is_palindrome\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    re := regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvekpr0y9_test.go:11:12: undefined: strings

    /tmp/tmpvekpr0y9_test.go:14:11: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    re := regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if first\
    \ half of string is equal to second half\n    for i := 0; i < len(text) / 2; i++\
    \ {\n        if text[i] != text[len(text) - i - 1] {\n            return false\n\
    \        }\n    }\n\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzgq5s1fh_test.go:11:12: undefined: strings

    /tmp/tmpzgq5s1fh_test.go:14:11: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073773
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    var length = len(text)\n    var middle = length / 2\n    var last\
    \ = length - 1\n\n    for i := 0; i < middle; i++ {\n        if text[i] != text[last\
    \ - i] {\n            return false\n        }\n    }\n\n    return true\n}\n\n\
    func TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073773
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lower case\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    text = strings.Replace(text,\
    \ \" \", \"\", -1)\n    text = strings.Replace(text, \",\", \"\", -1)\n    text\
    \ = strings.Replace(text, \".\", \"\", -1)\n    text = strings.Replace(text, \"\
    !\", \"\", -1)\n    text = strings.Replace(text, \"?\", \"\", -1)\n    text =\
    \ strings.Replace(text, \":\", \"\", -1)\n    text = strings.Replace(text, \"\
    ;\", \"\", -1)\n    text = strings.Replace(text, \"'\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"\\\"\", \"\", -1)\n    text = strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text = strings.Replace(text, \"_\", \"\", -1)\n    text\
    \ = strings.Replace(text, \"(\", \"\", -1)\n    text = strings.Replace(text, \"\
    )\", \"\", -1)\n    text = strings.Replace(text, \"[\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"]\", \"\", -1)\n    text = strings.Replace(text, \"\
    {\", \"\", -1)\n    text = strings.Replace(text, \"}\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"*\", \"\", -1)\n    text = strings.Replace(text, \"\
    +\", \"\", -1)\n    text = strings.Replace(text, \"=\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"&\", \"\", -1)\n    text = strings.Replace(text, \"\
    ^\", \"\", -1)\n    text = strings.Replace(text, \"%\", \"\", -1)\n    text =\
    \ strings.Replace(text, \"$\", \"\", -1)\n    text = strings.Replace(text, \"\
    #\", \"\", -1)\n    text = strings.Replace(text, \"@\", \"\", -1)\n    text =\n\
    func TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8kcdg619_test.go:41:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073772
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\
    \n    // Remove all non-alphanumeric characters\n    var re = regexp.MustCompile(\"\
    [^a-z0-9]+\")\n    text = re.ReplaceAllString(text, \"\")\n\n    // Check if string\
    \ is a palindrome\n    for i := 0; i < len(text)/2; i++ {\n        if text[i]\
    \ != text[len(text)-i-1] {\n            return false\n        }\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnp7352zi_test.go:11:12: undefined: strings

    /tmp/tmpnp7352zi_test.go:14:14: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073770
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    length := len(text)\n    for i := 0; i < length / 2; i++ {\n   \
    \     if text[i] != text[length - i - 1] {\n            return false\n       \
    \ }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    // Get the length of the string\n    length := len(text)\n\n   \
    \ // Check if the string is empty\n    if length == 0 {\n        return false\n\
    \    }\n\n    // Check if the string is a single character\n    if length == 1\
    \ {\n        return true\n    }\n\n    // Check if the first and last characters\
    \ are the same\n    if text[0] != text[length-1] {\n        return false\n   \
    \ }\n\n    // Recursively check the rest of the string\n    return is_palindrome(text[1:length-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__0\
    \ (0.00s)\n        tmp1xosqacx_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073773
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\nfunc is_palindrome(text string)\
    \ bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073770
