language: go_test.go
name: HumanEval_7_filter_by_substring
results:
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, str := range strings {\n        if\
    \ strings.Contains(str, substring) {\n            filtered = append(filtered,\
    \ str)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7mu1pfg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (s ==\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpy3mq7que_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (s ==\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpy3mq7que_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplqufqym_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplqufqym_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyk94370l_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    result := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkgnc5co0_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if (s\
    \ != substring) {\n            filtered = append(filtered, s)\n        }\n   \
    \ }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpccwem5ht_test.go:35: expected '[xxx xxxAAA xxx]', got '[asd\
    \ xxy john doe xxxAAA]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n\
    \        tmpccwem5ht_test.go:35: expected '[xxx aaaxxy xxxAAA xxx]', got '[xxx\
    \ asd aaaxxy john doe xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpccwem5ht_test.go:35: expected '[grunt prune]', got '[grunt\
    \ trumpet prune gruesome]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if strings.Contains(str,\
    \ substring) {\n            result = append(result, str)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqfyo_zc2_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, s := range strings {\n    \
    \    if (s[0:len(substring)] == substring) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__2\
    \ (0.00s)\n        tmp4useazt8_test.go:35: expected '[xxx aaaxxy xxxAAA xxx]',\
    \ got '[xxx xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3 (0.00s)\n\
    \        tmp4useazt8_test.go:35: expected '[grunt prune]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if (s\
    \ == substring) {\n            filtered = append(filtered, s)\n        }\n   \
    \ }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpm1p5xzs4_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpm1p5xzs4_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpm1p5xzs4_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, str := range strings {\n  \
    \      if (str == substring) {\n            filtered_strings = append(filtered_strings,\
    \ str)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpaiusjcv0_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpaiusjcv0_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpaiusjcv0_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (s ==\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpy3mq7que_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, str := range strings {\n  \
    \      if strings.Contains(str, substring) {\n            filtered_strings = append(filtered_strings,\
    \ str)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc2_2yty2_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyk94370l_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (contains(s,\
    \ substring)) {\n            result = append(result, s)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd9n0t2ao_test.go:12:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplqufqym_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if (s\
    \ == substring) {\n            filtered = append(filtered, s)\n        }\n   \
    \ }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpm1p5xzs4_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpm1p5xzs4_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpm1p5xzs4_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, str := range strings {\n        if\
    \ str != \"\" && str[0:len(substring)] == substring {\n            filtered =\
    \ append(filtered, str)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__2\
    \ (0.00s)\n        tmp_2x9phyx_test.go:35: expected '[xxx aaaxxy xxxAAA xxx]',\
    \ got '[xxx xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3 (0.00s)\n\
    \        tmp_2x9phyx_test.go:35: expected '[grunt prune]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, str := range strings {\n  \
    \      if strings.Contains(str, substring) {\n            filtered_strings = append(filtered_strings,\
    \ str)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc2_2yty2_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphz5avgps_test.go:12:12: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if (s[0:len(substring)]\
    \ == substring) {\n            filtered = append(filtered, s)\n        }\n   \
    \ }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__2\
    \ (0.00s)\n        tmpweghpx9x_test.go:35: expected '[xxx aaaxxy xxxAAA xxx]',\
    \ got '[xxx xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3 (0.00s)\n\
    \        tmpweghpx9x_test.go:35: expected '[grunt prune]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    result := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkgnc5co0_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (s ==\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpy3mq7que_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyk94370l_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ != \"\" && str[0:len(substring)] == substring {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__2\
    \ (0.00s)\n        tmpkxqk_u5r_test.go:35: expected '[xxx aaaxxy xxxAAA xxx]',\
    \ got '[xxx xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3 (0.00s)\n\
    \        tmpkxqk_u5r_test.go:35: expected '[grunt prune]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str_contains(str,\
    \ substring) {\n            result = append(result, str)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0fxmn9g4_test.go:12:12: undefined: str_contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (s ==\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpy3mq7que_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (s ==\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpy3mq7que_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if s ==\
    \ substring {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp9ua8xwsa_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp9ua8xwsa_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp9ua8xwsa_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (s ==\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpy3mq7que_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, str := range strings {\n        if\
    \ str == substring {\n            filtered = append(filtered, str)\n        }\n\
    \    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpa1m035ab_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpa1m035ab_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpa1m035ab_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, str := range strings {\n  \
    \      if str != \"\" && str[0:len(substring)] == substring {\n            filtered_strings\
    \ = append(filtered_strings, str)\n        }\n    }\n    return filtered_strings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__2\
    \ (0.00s)\n        tmpmtnt_7ra_test.go:35: expected '[xxx aaaxxy xxxAAA xxx]',\
    \ got '[xxx xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3 (0.00s)\n\
    \        tmpmtnt_7ra_test.go:35: expected '[grunt prune]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplqufqym_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, str := range strings {\n  \
    \      if str == substring {\n            filtered_strings = append(filtered_strings,\
    \ str)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpxiihhxs0_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpxiihhxs0_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpxiihhxs0_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, str := range strings {\n        if\
    \ str == substring {\n            filtered = append(filtered, str)\n        }\n\
    \    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpa1m035ab_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpa1m035ab_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpa1m035ab_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, str := range strings {\n  \
    \      if strings.Contains(str, substring) {\n            filtered_strings = append(filtered_strings,\
    \ str)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc2_2yty2_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (s ==\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpy3mq7que_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyk94370l_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (s ==\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpy3mq7que_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if (s\
    \ == substring) {\n            filtered = append(filtered, s)\n        }\n   \
    \ }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpm1p5xzs4_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpm1p5xzs4_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpm1p5xzs4_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplqufqym_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (s ==\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpy3mq7que_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if (s\
    \ == substring) {\n            filtered = append(filtered, s)\n        }\n   \
    \ }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpm1p5xzs4_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpm1p5xzs4_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpm1p5xzs4_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, str := range strings {\n  \
    \      if str == substring {\n            filtered_strings = append(filtered_strings,\
    \ str)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpxiihhxs0_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpxiihhxs0_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpxiihhxs0_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, str := range strings {\n        if\
    \ str != \"\" && str[0:len(substring)] == substring {\n            filtered =\
    \ append(filtered, str)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__2\
    \ (0.00s)\n        tmp_2x9phyx_test.go:35: expected '[xxx aaaxxy xxxAAA xxx]',\
    \ got '[xxx xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3 (0.00s)\n\
    \        tmp_2x9phyx_test.go:35: expected '[grunt prune]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (s[0:len(substring)]\
    \ == substring) {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__2\
    \ (0.00s)\n        tmptgnmfj7w_test.go:35: expected '[xxx aaaxxy xxxAAA xxx]',\
    \ got '[xxx xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3 (0.00s)\n\
    \        tmptgnmfj7w_test.go:35: expected '[grunt prune]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074285
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, str := range strings {\n  \
    \      if strings.Contains(str, substring) {\n            filtered_strings = append(filtered_strings,\
    \ str)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc2_2yty2_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyk94370l_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, str := range strings {\n        if\
    \ str == substring {\n            filtered = append(filtered, str)\n        }\n\
    \    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpa1m035ab_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpa1m035ab_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpa1m035ab_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, str := range strings {\n        if\
    \ str == substring {\n            filtered = append(filtered, str)\n        }\n\
    \    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpa1m035ab_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpa1m035ab_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpa1m035ab_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (s ==\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpy3mq7que_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (s[0:len(substring)]\
    \ == substring) {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__2\
    \ (0.00s)\n        tmptgnmfj7w_test.go:35: expected '[xxx aaaxxy xxxAAA xxx]',\
    \ got '[xxx xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3 (0.00s)\n\
    \        tmptgnmfj7w_test.go:35: expected '[grunt prune]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074285
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (s ==\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpy3mq7que_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (contains(s,\
    \ substring)) {\n            result = append(result, s)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd9n0t2ao_test.go:12:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, str := range strings {\n        if\
    \ strings.Contains(str, substring) {\n            filtered = append(filtered,\
    \ str)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7mu1pfg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == \"\" {\n            continue\n        }\n        if str[0:len(substring)]\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__2\
    \ (0.00s)\n        tmpy6173_rp_test.go:38: expected '[xxx aaaxxy xxxAAA xxx]',\
    \ got '[xxx xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3 (0.00s)\n\
    \        tmpy6173_rp_test.go:38: expected '[grunt prune]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074285
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (s ==\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpy3mq7que_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if (s\
    \ == substring) {\n            filtered = append(filtered, s)\n        }\n   \
    \ }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpm1p5xzs4_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpm1p5xzs4_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpm1p5xzs4_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplqufqym_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyk94370l_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (s !=\
    \ \"\") && (s[0:len(substring)] == substring) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__2\
    \ (0.00s)\n        tmptrd3ubz__test.go:35: expected '[xxx aaaxxy xxxAAA xxx]',\
    \ got '[xxx xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3 (0.00s)\n\
    \        tmptrd3ubz__test.go:35: expected '[grunt prune]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074285
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, str := range strings {\n        if\
    \ strings.Contains(str, substring) {\n            filtered = append(filtered,\
    \ str)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7mu1pfg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, s := range strings {\n    \
    \    if (s != substring) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpkjv8ecpq_test.go:35: expected '[xxx xxxAAA xxx]', got '[asd\
    \ xxy john doe xxxAAA]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n\
    \        tmpkjv8ecpq_test.go:35: expected '[xxx aaaxxy xxxAAA xxx]', got '[xxx\
    \ asd aaaxxy john doe xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpkjv8ecpq_test.go:35: expected '[grunt prune]', got '[grunt\
    \ trumpet prune gruesome]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074285
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (s ==\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpy3mq7que_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ != \"\" && str[0:len(substring)] == substring {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__2\
    \ (0.00s)\n        tmpkxqk_u5r_test.go:35: expected '[xxx aaaxxy xxxAAA xxx]',\
    \ got '[xxx xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3 (0.00s)\n\
    \        tmpkxqk_u5r_test.go:35: expected '[grunt prune]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, str := range strings {\n        if\
    \ str == substring {\n            filtered = append(filtered, str)\n        }\n\
    \    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpa1m035ab_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpa1m035ab_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpa1m035ab_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyk94370l_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if (s[0:len(substring)]\
    \ == substring) {\n            filtered = append(filtered, s)\n        }\n   \
    \ }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__2\
    \ (0.00s)\n        tmpweghpx9x_test.go:35: expected '[xxx aaaxxy xxxAAA xxx]',\
    \ got '[xxx xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3 (0.00s)\n\
    \        tmpweghpx9x_test.go:35: expected '[grunt prune]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, str := range strings {\n        if\
    \ strings.Contains(str, substring) {\n            filtered = append(filtered,\
    \ str)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7mu1pfg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (contains(s,\
    \ substring)) {\n            result = append(result, s)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd9n0t2ao_test.go:12:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ != \"\" && str[0:len(substring)] == substring {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__2\
    \ (0.00s)\n        tmpkxqk_u5r_test.go:35: expected '[xxx aaaxxy xxxAAA xxx]',\
    \ got '[xxx xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3 (0.00s)\n\
    \        tmpkxqk_u5r_test.go:35: expected '[grunt prune]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, str := range strings {\n        if\
    \ str == substring {\n            filtered = append(filtered, str)\n        }\n\
    \    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpa1m035ab_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpa1m035ab_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpa1m035ab_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, s := range strings {\n    \
    \    if (s != \"\") && (s[0:len(substring)] == substring) {\n            filtered_strings\
    \ = append(filtered_strings, s)\n        }\n    }\n    return filtered_strings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__2\
    \ (0.00s)\n        tmphd_n9kfm_test.go:35: expected '[xxx aaaxxy xxxAAA xxx]',\
    \ got '[xxx xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3 (0.00s)\n\
    \        tmphd_n9kfm_test.go:35: expected '[grunt prune]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074285
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == \"\" {\n            continue\n        }\n        if str[0:len(substring)]\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__2\
    \ (0.00s)\n        tmpy6173_rp_test.go:38: expected '[xxx aaaxxy xxxAAA xxx]',\
    \ got '[xxx xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3 (0.00s)\n\
    \        tmpy6173_rp_test.go:38: expected '[grunt prune]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074285
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplqufqym_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (s ==\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpy3mq7que_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplqufqym_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (contains(s,\
    \ substring)) {\n            result = append(result, s)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd9n0t2ao_test.go:12:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (s[0:len(substring)]\
    \ == substring) {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__2\
    \ (0.00s)\n        tmptgnmfj7w_test.go:35: expected '[xxx aaaxxy xxxAAA xxx]',\
    \ got '[xxx xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3 (0.00s)\n\
    \        tmptgnmfj7w_test.go:35: expected '[grunt prune]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074285
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyk94370l_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (contains(s,\
    \ substring)) {\n            result = append(result, s)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd9n0t2ao_test.go:12:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, str := range strings {\n  \
    \      if strings.Contains(str, substring) {\n            filtered_strings = append(filtered_strings,\
    \ str)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc2_2yty2_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplqufqym_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var ret []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            ret = append(ret, s)\n        }\n    }\n    return\
    \ ret\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp673fpkub_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074285
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyk94370l_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if (string_contains(s,\
    \ substring)) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe1ghnw9c_test.go:12:13: undefined: string_contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074285
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    result := []string{}\n    for _, s := range strings {\n        if (string_contains(s,\
    \ substring)) {\n            result = append(result, s)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpziqpgdkp_test.go:12:13: undefined: string_contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074285
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (s ==\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpy3mq7que_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplqufqym_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ != \"\" && str[0:len(substring)] == substring {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__2\
    \ (0.00s)\n        tmpkxqk_u5r_test.go:35: expected '[xxx aaaxxy xxxAAA xxx]',\
    \ got '[xxx xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3 (0.00s)\n\
    \        tmpkxqk_u5r_test.go:35: expected '[grunt prune]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplqufqym_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, s := range strings {\n    \
    \    if (string_contains(s, substring)) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphsklunta_test.go:12:13: undefined: string_contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074285
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, str := range strings {\n  \
    \      if strings.Contains(str, substring) {\n            filtered_strings = append(filtered_strings,\
    \ str)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc2_2yty2_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, str := range strings {\n        if\
    \ strings.Contains(str, substring) {\n            filtered = append(filtered,\
    \ str)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7mu1pfg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    result := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkgnc5co0_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (s ==\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpy3mq7que_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, str := range strings {\n        if\
    \ str != \"\" && str[0:len(substring)] == substring {\n            filtered =\
    \ append(filtered, str)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__2\
    \ (0.00s)\n        tmp_2x9phyx_test.go:35: expected '[xxx aaaxxy xxxAAA xxx]',\
    \ got '[xxx xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3 (0.00s)\n\
    \        tmp_2x9phyx_test.go:35: expected '[grunt prune]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, str := range strings {\n        if\
    \ strings.Contains(str, substring) {\n            filtered = append(filtered,\
    \ str)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7mu1pfg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if (s\
    \ == substring) {\n            filtered = append(filtered, s)\n        }\n   \
    \ }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpm1p5xzs4_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpm1p5xzs4_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpm1p5xzs4_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, str := range strings {\n        if\
    \ str == substring {\n            filtered = append(filtered, str)\n        }\n\
    \    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpa1m035ab_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpa1m035ab_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpa1m035ab_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (s[0:len(substring)]\
    \ == substring) {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__2\
    \ (0.00s)\n        tmptgnmfj7w_test.go:35: expected '[xxx aaaxxy xxxAAA xxx]',\
    \ got '[xxx xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3 (0.00s)\n\
    \        tmptgnmfj7w_test.go:35: expected '[grunt prune]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074285
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, str := range strings {\n        if\
    \ str == substring {\n            filtered = append(filtered, str)\n        }\n\
    \    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpa1m035ab_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpa1m035ab_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpa1m035ab_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplqufqym_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyk94370l_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    result := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkgnc5co0_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplqufqym_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyk94370l_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str_contains(str,\
    \ substring) {\n            result = append(result, str)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0fxmn9g4_test.go:12:12: undefined: str_contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (contains(s,\
    \ substring)) {\n            result = append(result, s)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd9n0t2ao_test.go:12:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if (s\
    \ != \"\") && (s[0:len(substring)] == substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__2\
    \ (0.00s)\n        tmpxtgc84j4_test.go:35: expected '[xxx aaaxxy xxxAAA xxx]',\
    \ got '[xxx xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3 (0.00s)\n\
    \        tmpxtgc84j4_test.go:35: expected '[grunt prune]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074285
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplqufqym_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if strings.Contains(str,\
    \ substring) {\n            result = append(result, str)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqfyo_zc2_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if (s\
    \ != substring) {\n            filtered = append(filtered, s)\n        }\n   \
    \ }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpccwem5ht_test.go:35: expected '[xxx xxxAAA xxx]', got '[asd\
    \ xxy john doe xxxAAA]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n\
    \        tmpccwem5ht_test.go:35: expected '[xxx aaaxxy xxxAAA xxx]', got '[xxx\
    \ asd aaaxxy john doe xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpccwem5ht_test.go:35: expected '[grunt prune]', got '[grunt\
    \ trumpet prune gruesome]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (s !=\
    \ \"\") && (s[0:len(substring)] == substring) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__2\
    \ (0.00s)\n        tmptrd3ubz__test.go:35: expected '[xxx aaaxxy xxxAAA xxx]',\
    \ got '[xxx xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3 (0.00s)\n\
    \        tmptrd3ubz__test.go:35: expected '[grunt prune]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074285
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (contains(s,\
    \ substring)) {\n            result = append(result, s)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd9n0t2ao_test.go:12:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (contains(s,\
    \ substring)) {\n            result = append(result, s)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd9n0t2ao_test.go:12:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 0
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if len(s)\
    \ < len(substring) {\n            continue\n        }\n        for i := 0; i <\
    \ len(s)-len(substring)+1; i++ {\n            if s[i:i+len(substring)] == substring\
    \ {\n                result = append(result, s)\n                break\n     \
    \       }\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074285
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (len(s)\
    \ >= len(substring)) {\n            if (s[:len(substring)] == substring) {\n \
    \               result = append(result, s)\n            }\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__2\
    \ (0.00s)\n        tmp7vfrvnaa_test.go:37: expected '[xxx aaaxxy xxxAAA xxx]',\
    \ got '[xxx xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3 (0.00s)\n\
    \        tmp7vfrvnaa_test.go:37: expected '[grunt prune]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074285
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if (s[0:len(substring)]\
    \ == substring) {\n            filtered = append(filtered, s)\n        }\n   \
    \ }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n\
    \  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__2\
    \ (0.00s)\n        tmpweghpx9x_test.go:35: expected '[xxx aaaxxy xxxAAA xxx]',\
    \ got '[xxx xxxAAA xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__3 (0.00s)\n\
    \        tmpweghpx9x_test.go:35: expected '[grunt prune]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (s ==\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmpy3mq7que_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmpy3mq7que_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if (contains(s,\
    \ substring)) {\n            result = append(result, s)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd9n0t2ao_test.go:12:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp02tmp29__test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp02tmp29__test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplqufqym_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 1
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    result := []string{}\n    for _, str := range strings {\n        if str\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Substring (0.00s)\n    --- FAIL: TestFilter_By_Substring/test_num__1\
    \ (0.00s)\n        tmp4jmo3lvq_test.go:35: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxx]'\n    --- FAIL: TestFilter_By_Substring/test_num__2 (0.00s)\n        tmp4jmo3lvq_test.go:35:\
    \ expected '[xxx aaaxxy xxxAAA xxx]', got '[]'\n    --- FAIL: TestFilter_By_Substring/test_num__3\
    \ (0.00s)\n        tmp4jmo3lvq_test.go:35: expected '[grunt prune]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074285
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var result []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplqufqym_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
