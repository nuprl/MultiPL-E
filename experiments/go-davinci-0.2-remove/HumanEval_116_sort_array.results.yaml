language: go_test.go
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    var ones []int\n    var\
    \ zeros []int\n    for _, v := range arr {\n        if v == 0 {\n            zeros\
    \ = append(zeros, v)\n        } else {\n            ones = append(ones, v)\n \
    \       }\n    }\n    return append(zeros, ones...)\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpvjbw4gxc_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpvjbw4gxc_test.go:45:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpvjbw4gxc_test.go:45: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpvjbw4gxc_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpvjbw4gxc_test.go:45: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // sort the array by number\
    \ of ones in binary representation\n    // if two numbers have the same number\
    \ of ones, sort by decimal value\n    // return the sorted array\n    return arr\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp270c0f9p_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp270c0f9p_test.go:39:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp270c0f9p_test.go:39: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp270c0f9p_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp270c0f9p_test.go:39: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    var ones = make(map[int]int)\n\
    \    var zeros = make(map[int]int)\n    var result = make([]int, len(arr))\n \
    \   for _, v := range arr {\n        if v == 0 {\n            zeros[v] = v\n \
    \       } else {\n            ones[v] = v\n        }\n    }\n    var i = 0\n \
    \   for _, v := range zeros {\n        result[i] = v\n        i++\n    }\n   \
    \ for _, v := range ones {\n        result[i] = v\n        i++\n    }\n    return\
    \ result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpe5yls9oj_test.go:55: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=5)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpe5yls9oj_test.go:55:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-6) %!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpe5yls9oj_test.go:55: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=0)\
    \ %!s(int=4) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpe5yls9oj_test.go:55: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=3)\
    \ %!s(int=7) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpe5yls9oj_test.go:55: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    fmt.Println(arr)\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[1 5 2 3 4]\n[-2 -3 -4 -5 -6]\n[1 0 2 3 4]\n[]\n[2 5 77 4 5 3 5 7 2 3 4]\n\
    [3 6 44 12 32 5]\n[2 4 8 16 32]\n[2 4 8 16 32]\n--- FAIL: TestSort_Array (0.00s)\n\
    \    --- FAIL: TestSort_Array/test_num__0 (0.00s)\n        tmpcl1les12_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__1\
    \ (0.00s)\n        tmpcl1les12_test.go:37: expected '[%!s(int=-4) %!s(int=-2)\
    \ %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got '[%!s(int=-2) %!s(int=-3) %!s(int=-4)\
    \ %!s(int=-5) %!s(int=-6)]'\n    --- FAIL: TestSort_Array/test_num__2 (0.00s)\n\
    \        tmpcl1les12_test.go:37: expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n        tmpcl1les12_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=3) %!s(int=3)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=77)]', got '[%!s(int=2)\
    \ %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5) %!s(int=3) %!s(int=5) %!s(int=7)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpcl1les12_test.go:37: expected '[%!s(int=32) %!s(int=3) %!s(int=5)\
    \ %!s(int=6) %!s(int=12) %!s(int=44)]', got '[%!s(int=3) %!s(int=6) %!s(int=44)\
    \ %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    var ones []int\n    for\
    \ _, v := range arr {\n        ones = append(ones, count_ones(v))\n    }\n   \
    \ fmt.Println(ones)\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt_o9kq3d_test.go:15:29: undefined: count_ones

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    fmt.Println(arr)\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[1 5 2 3 4]\n[-2 -3 -4 -5 -6]\n[1 0 2 3 4]\n[]\n[2 5 77 4 5 3 5 7 2 3 4]\n\
    [3 6 44 12 32 5]\n[2 4 8 16 32]\n[2 4 8 16 32]\n--- FAIL: TestSort_Array (0.00s)\n\
    \    --- FAIL: TestSort_Array/test_num__0 (0.00s)\n        tmpcl1les12_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__1\
    \ (0.00s)\n        tmpcl1les12_test.go:37: expected '[%!s(int=-4) %!s(int=-2)\
    \ %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got '[%!s(int=-2) %!s(int=-3) %!s(int=-4)\
    \ %!s(int=-5) %!s(int=-6)]'\n    --- FAIL: TestSort_Array/test_num__2 (0.00s)\n\
    \        tmpcl1les12_test.go:37: expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n        tmpcl1les12_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=3) %!s(int=3)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=77)]', got '[%!s(int=2)\
    \ %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5) %!s(int=3) %!s(int=5) %!s(int=7)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpcl1les12_test.go:37: expected '[%!s(int=32) %!s(int=3) %!s(int=5)\
    \ %!s(int=6) %!s(int=12) %!s(int=44)]', got '[%!s(int=3) %!s(int=6) %!s(int=44)\
    \ %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    var sorted []int\n    var\
    \ ones []int\n    var zeros []int\n    for _, v := range arr {\n        if v ==\
    \ 0 {\n            zeros = append(zeros, v)\n        } else {\n            ones\
    \ = append(ones, v)\n        }\n    }\n    sorted = append(sorted, zeros...)\n\
    \    sorted = append(sorted, ones...)\n    return sorted\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpwd57veec_test.go:48: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpwd57veec_test.go:48:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpwd57veec_test.go:48: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpwd57veec_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpwd57veec_test.go:48: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    var ones []int\n    var\
    \ zeros []int\n    for _, v := range arr {\n        if v == 0 {\n            zeros\
    \ = append(zeros, v)\n        } else {\n            ones = append(ones, v)\n \
    \       }\n    }\n    return append(zeros, ones...)\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpvjbw4gxc_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpvjbw4gxc_test.go:45:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpvjbw4gxc_test.go:45: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpvjbw4gxc_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpvjbw4gxc_test.go:45: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // sort the array\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpu3e2aiig_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpu3e2aiig_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpu3e2aiig_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpu3e2aiig_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpu3e2aiig_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ []int{}\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpdw9k94lr_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Array/test_num__1\
    \ (0.00s)\n        tmpdw9k94lr_test.go:37: expected '[%!s(int=-4) %!s(int=-2)\
    \ %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got '[]'\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpdw9k94lr_test.go:37: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpdw9k94lr_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpdw9k94lr_test.go:37: expected '[%!s(int=32) %!s(int=3) %!s(int=5)\
    \ %!s(int=6) %!s(int=12) %!s(int=44)]', got '[]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpdw9k94lr_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=8)\
    \ %!s(int=16) %!s(int=32)]', got '[]'\n    --- FAIL: TestSort_Array/test_num__7\
    \ (0.00s)\n        tmpdw9k94lr_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=8)\
    \ %!s(int=16) %!s(int=32)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    var ones [][]int\n    for\
    \ _, v := range arr {\n        ones = append(ones, []int{v, count_ones(v)})\n\
    \    }\n    for i := 0; i < len(ones); i++ {\n        for j := i + 1; j < len(ones);\
    \ j++ {\n            if ones[i][1] > ones[j][1] {\n                ones[i], ones[j]\
    \ = ones[j], ones[i]\n            } else if ones[i][1] == ones[j][1] && ones[i][0]\
    \ > ones[j][0] {\n                ones[i], ones[j] = ones[j], ones[i]\n      \
    \      }\n        }\n    }\n    var result []int\n    for _, v := range ones {\n\
    \        result = append(result, v[0])\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4jhfx61z_test.go:15:38: undefined: count_ones

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // sort the array\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpu3e2aiig_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpu3e2aiig_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpu3e2aiig_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpu3e2aiig_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpu3e2aiig_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    fmt.Println(arr)\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[1 5 2 3 4]\n[-2 -3 -4 -5 -6]\n[1 0 2 3 4]\n[]\n[2 5 77 4 5 3 5 7 2 3 4]\n\
    [3 6 44 12 32 5]\n[2 4 8 16 32]\n[2 4 8 16 32]\n--- FAIL: TestSort_Array (0.00s)\n\
    \    --- FAIL: TestSort_Array/test_num__0 (0.00s)\n        tmpcl1les12_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__1\
    \ (0.00s)\n        tmpcl1les12_test.go:37: expected '[%!s(int=-4) %!s(int=-2)\
    \ %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got '[%!s(int=-2) %!s(int=-3) %!s(int=-4)\
    \ %!s(int=-5) %!s(int=-6)]'\n    --- FAIL: TestSort_Array/test_num__2 (0.00s)\n\
    \        tmpcl1les12_test.go:37: expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n        tmpcl1les12_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=3) %!s(int=3)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=77)]', got '[%!s(int=2)\
    \ %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5) %!s(int=3) %!s(int=5) %!s(int=7)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpcl1les12_test.go:37: expected '[%!s(int=32) %!s(int=3) %!s(int=5)\
    \ %!s(int=6) %!s(int=12) %!s(int=44)]', got '[%!s(int=3) %!s(int=6) %!s(int=44)\
    \ %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    var sorted []int\n    for\
    \ _, v := range arr {\n        sorted = append(sorted, v)\n    }\n    for i :=\
    \ 0; i < len(sorted); i++ {\n        for j := i + 1; j < len(sorted); j++ {\n\
    \            if count_ones(sorted[i]) > count_ones(sorted[j]) {\n            \
    \    sorted[i], sorted[j] = sorted[j], sorted[i]\n            } else if count_ones(sorted[i])\
    \ == count_ones(sorted[j]) {\n                if sorted[i] > sorted[j] {\n   \
    \                 sorted[i], sorted[j] = sorted[j], sorted[i]\n              \
    \  }\n            }\n        }\n    }\n    return sorted\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1tzt30x_test.go:19:16: undefined: count_ones

    /tmp/tmpo1tzt30x_test.go:21:23: undefined: count_ones

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    var ones [][]int\n    for\
    \ _, v := range arr {\n        ones = append(ones, []int{v, count_ones(v)})\n\
    \    }\n    for i := 0; i < len(ones); i++ {\n        for j := i + 1; j < len(ones);\
    \ j++ {\n            if ones[i][1] > ones[j][1] {\n                ones[i], ones[j]\
    \ = ones[j], ones[i]\n            } else if ones[i][1] == ones[j][1] && ones[i][0]\
    \ > ones[j][0] {\n                ones[i], ones[j] = ones[j], ones[i]\n      \
    \      }\n        }\n    }\n    var result []int\n    for _, v := range ones {\n\
    \        result = append(result, v[0])\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4jhfx61z_test.go:15:38: undefined: count_ones

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunc sort_array(arr []int) []int {\n    // your code here\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp_lha3ewy_test.go:37:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_lha3ewy_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_lha3ewy_test.go:37: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073859
