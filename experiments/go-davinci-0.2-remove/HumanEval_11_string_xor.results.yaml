language: go_test.go
name: HumanEval_11_string_xor
results:
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        return \"\"\n    }\n\
    \    var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] ==\
    \ b[i] {\n            result += \"0\"\n        } else {\n            result +=\
    \ \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        panic(\"Inputs must be\
    \ of equal length\")\n    }\n    res := \"\"\n    for i := 0; i < len(a); i++\
    \ {\n        if a[i] == b[i] {\n            res += \"0\"\n        } else {\n \
    \           res += \"1\"\n        }\n    }\n    return res\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        return \"\"\n    }\n\
    \    result := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        return \"Error: Inputs\
    \ are not of equal length\"\n    }\n    result := \"\"\n    for i := 0; i < len(a);\
    \ i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else\
    \ {\n            result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        return \"\"\n    }\n\
    \    result := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        panic(\"Inputs must be\
    \ of equal length\")\n    }\n    var result string\n    for i := 0; i < len(a);\
    \ i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else\
    \ {\n            result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        return \"\"\n    }\n\
    \    result := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    // convert strings to bytes\n    a_bytes := []byte(a)\n\
    \    b_bytes := []byte(b)\n\n    // make sure the strings are the same length\n\
    \    if len(a_bytes) != len(b_bytes) {\n        panic(\"Inputs must be the same\
    \ length\")\n    }\n\n    // create a new slice of bytes to store the result\n\
    \    result := make([]byte, len(a_bytes))\n\n    // perform the XOR operation\n\
    \    for i := 0; i < len(a_bytes); i++ {\n        result[i] = a_bytes[i] ^ b_bytes[i]\n\
    \    }\n\n    // convert the result back to a string\n    return string(result)\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpwo874sep_test.go:47: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpwo874sep_test.go:47:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpwo874sep_test.go:47: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        return \"Invalid input\"\
    \n    }\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i]\
    \ == b[i] {\n            result += \"0\"\n        } else {\n            result\
    \ += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    // Convert strings to arrays of bytes\n    a_bytes :=\
    \ []byte(a)\n    b_bytes := []byte(b)\n\n    // Create array of bytes to hold\
    \ result\n    result := make([]byte, len(a_bytes))\n\n    // XOR each byte of\
    \ the two arrays and store in result\n    for i := 0; i < len(a_bytes); i++ {\n\
    \        result[i] = a_bytes[i] ^ b_bytes[i]\n    }\n\n    // Convert result to\
    \ string and return\n    return string(result)\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmp_xzfgd5r_test.go:42: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmp_xzfgd5r_test.go:42:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmp_xzfgd5r_test.go:42: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        panic(\"a and b must\
    \ be of equal length\")\n    }\n    var result string\n    for i := 0; i < len(a);\
    \ i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else\
    \ {\n            result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpbhc_qtgm_test.go:30: expected '010010', got ''\n    ---\
    \ FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpbhc_qtgm_test.go:30: expected\
    \ '0', got ''\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmpbhc_qtgm_test.go:30:\
    \ expected '0101', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073227
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    // Convert strings to byte arrays\n    a_bytes := []byte(a)\n\
    \    b_bytes := []byte(b)\n\n    // Create new byte array to store result\n  \
    \  result := make([]byte, len(a_bytes))\n\n    // Perform XOR operation on each\
    \ byte\n    for i := 0; i < len(a_bytes); i++ {\n        result[i] = a_bytes[i]\
    \ ^ b_bytes[i]\n    }\n\n    // Convert result to string and return\n    return\
    \ string(result)\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpgv24ld7q_test.go:42: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpgv24ld7q_test.go:42:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpgv24ld7q_test.go:42: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpbhc_qtgm_test.go:30: expected '010010', got ''\n    ---\
    \ FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpbhc_qtgm_test.go:30: expected\
    \ '0', got ''\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmpbhc_qtgm_test.go:30:\
    \ expected '0101', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var res string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            res += \"0\"\n        } else {\n     \
    \       res += \"1\"\n        }\n    }\n    return res\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    // Your code here\n    var result string\n    for i\
    \ := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"\
    0\"\n        } else {\n            result += \"1\"\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        return \"Inputs must\
    \ be of equal length\"\n    }\n    var result string\n    for i := 0; i < len(a);\
    \ i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else\
    \ {\n            result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    // Convert strings to byte arrays\n    a_bytes := []byte(a)\n\
    \    b_bytes := []byte(b)\n\n    // Create a byte array to hold the result\n \
    \   result := make([]byte, len(a_bytes))\n\n    // XOR the two byte arrays\n \
    \   for i := 0; i < len(a_bytes); i++ {\n        result[i] = a_bytes[i] ^ b_bytes[i]\n\
    \    }\n\n    // Convert the result to a string and return it\n    return string(result)\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmp0tb_epyy_test.go:42: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmp0tb_epyy_test.go:42:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmp0tb_epyy_test.go:42: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        return \"\"\n    }\n\
    \    var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] ==\
    \ b[i] {\n            result += \"0\"\n        } else {\n            result +=\
    \ \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var res string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            res += \"0\"\n        } else {\n     \
    \       res += \"1\"\n        }\n    }\n    return res\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        panic(\"a and b must\
    \ be of equal length\")\n    }\n    result := make([]byte, len(a))\n    for i\
    \ := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result[i] =\
    \ '0'\n        } else {\n            result[i] = '1'\n        }\n    }\n    return\
    \ string(result)\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        return \"\"\n    }\n\
    \    result := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        panic(\"Inputs must be\
    \ of equal length\")\n    }\n    result := \"\"\n    for i := 0; i < len(a); i++\
    \ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var res string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            res += \"0\"\n        } else {\n     \
    \       res += \"1\"\n        }\n    }\n    return res\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpbhc_qtgm_test.go:30: expected '010010', got ''\n    ---\
    \ FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpbhc_qtgm_test.go:30: expected\
    \ '0', got ''\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmpbhc_qtgm_test.go:30:\
    \ expected '0101', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpbhc_qtgm_test.go:30: expected '010010', got ''\n    ---\
    \ FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpbhc_qtgm_test.go:30: expected\
    \ '0', got ''\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmpbhc_qtgm_test.go:30:\
    \ expected '0101', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073227
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    // your code here\n    return \"\"\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpy3k0rasc_test.go:30: expected '010010', got ''\n    ---\
    \ FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpy3k0rasc_test.go:30: expected\
    \ '0', got ''\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmpy3k0rasc_test.go:30:\
    \ expected '0101', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        panic(\"Inputs must be\
    \ of equal length\")\n    }\n    var result string\n    for i := 0; i < len(a);\
    \ i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else\
    \ {\n            result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073227
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    // Convert strings to arrays of bytes\n    a_bytes :=\
    \ []byte(a)\n    b_bytes := []byte(b)\n\n    // Create a new array of bytes to\
    \ hold the result\n    result := make([]byte, len(a_bytes))\n\n    // Perform\
    \ the XOR operation on each byte\n    for i := 0; i < len(a_bytes); i++ {\n  \
    \      result[i] = a_bytes[i] ^ b_bytes[i]\n    }\n\n    // Convert the result\
    \ back to a string\n    return string(result)\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpnyitdsab_test.go:42: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpnyitdsab_test.go:42:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpnyitdsab_test.go:42: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        return \"Inputs must\
    \ be of equal length\"\n    }\n    var result string\n    for i := 0; i < len(a);\
    \ i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else\
    \ {\n            result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        return \"\"\n    }\n\
    \    var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] ==\
    \ b[i] {\n            result += \"0\"\n        } else {\n            result +=\
    \ \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    // TODO: implement\n    return \"\"\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpcfuh_kui_test.go:30: expected '010010', got ''\n    ---\
    \ FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpcfuh_kui_test.go:30: expected\
    \ '0', got ''\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmpcfuh_kui_test.go:30:\
    \ expected '0101', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        panic(\"Inputs must be\
    \ of equal length\")\n    }\n    result := \"\"\n    for i := 0; i < len(a); i++\
    \ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n\n    for i := 0; i < len(a); i++\
    \ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    // Convert strings to byte arrays\n    aBytes := []byte(a)\n\
    \    bBytes := []byte(b)\n\n    // Create a byte array to store the result\n \
    \   result := make([]byte, len(aBytes))\n\n    // Perform XOR operation on each\
    \ byte\n    for i := 0; i < len(aBytes); i++ {\n        result[i] = aBytes[i]\
    \ ^ bBytes[i]\n    }\n\n    // Convert result to string and return\n    return\
    \ string(result)\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmplcxof4lz_test.go:42: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmplcxof4lz_test.go:42:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmplcxof4lz_test.go:42: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073229
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpbhc_qtgm_test.go:30: expected '010010', got ''\n    ---\
    \ FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpbhc_qtgm_test.go:30: expected\
    \ '0', got ''\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmpbhc_qtgm_test.go:30:\
    \ expected '0101', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    // TODO: Implement this function\n    return \"\"\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpus1svl3x_test.go:30: expected '010010', got ''\n    ---\
    \ FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpus1svl3x_test.go:30: expected\
    \ '0', got ''\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmpus1svl3x_test.go:30:\
    \ expected '0101', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073229
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        return \"\"\n    }\n\
    \    result := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        return \"Error: strings\
    \ are not the same length\"\n    }\n    var result string\n    for i := 0; i <\
    \ len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n    \
    \    } else {\n            result += \"1\"\n        }\n    }\n    return result\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073229
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var res string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            res += \"0\"\n        } else {\n     \
    \       res += \"1\"\n        }\n    }\n    return res\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var c string\n    for i := 0; i < len(a); i++ {\n  \
    \      if a[i] == b[i] {\n            c += \"0\"\n        } else {\n         \
    \   c += \"1\"\n        }\n    }\n    return c\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073229
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        panic(\"Inputs must be\
    \ of equal length\")\n    }\n    var result string\n    for i := 0; i < len(a);\
    \ i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else\
    \ {\n            result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    // Convert strings to arrays of bytes\n    a_bytes :=\
    \ []byte(a)\n    b_bytes := []byte(b)\n\n    // Create a new array of bytes to\
    \ hold the result\n    result := make([]byte, len(a_bytes))\n\n    // Perform\
    \ XOR on each byte in the arrays\n    for i := 0; i < len(a_bytes); i++ {\n  \
    \      result[i] = a_bytes[i] ^ b_bytes[i]\n    }\n\n    // Convert the result\
    \ back to a string\n    return string(result)\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmp3tv370nt_test.go:42: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmp3tv370nt_test.go:42:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmp3tv370nt_test.go:42: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073229
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    // TODO: Implement\n    return \"\"\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpxs4unj1b_test.go:30: expected '010010', got ''\n    ---\
    \ FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpxs4unj1b_test.go:30: expected\
    \ '0', got ''\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmpxs4unj1b_test.go:30:\
    \ expected '0101', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073229
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    // Convert the strings to byte arrays\n    a_bytes :=\
    \ []byte(a)\n    b_bytes := []byte(b)\n\n    // Create a byte array to hold the\
    \ result\n    result := make([]byte, len(a_bytes))\n\n    // Loop through the\
    \ byte arrays and XOR each byte\n    for i := 0; i < len(a_bytes); i++ {\n   \
    \     result[i] = a_bytes[i] ^ b_bytes[i]\n    }\n\n    // Convert the result\
    \ to a string and return it\n    return string(result)\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpcktdhuue_test.go:42: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpcktdhuue_test.go:42:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpcktdhuue_test.go:42: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073229
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        return \"\"\n    }\n\
    \    var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] ==\
    \ b[i] {\n            result += \"0\"\n        } else {\n            result +=\
    \ \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    // Convert strings to arrays of bytes\n    a_bytes :=\
    \ []byte(a)\n    b_bytes := []byte(b)\n\n    // Create a new array of bytes to\
    \ store the result\n    result := make([]byte, len(a_bytes))\n\n    // Loop through\
    \ each byte in the arrays and perform XOR\n    for i := 0; i < len(a_bytes); i++\
    \ {\n        result[i] = a_bytes[i] ^ b_bytes[i]\n    }\n\n    // Convert the\
    \ result array of bytes to a string and return\n    return string(result)\n}\n\
    \nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpgdmq3aqm_test.go:42: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpgdmq3aqm_test.go:42:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpgdmq3aqm_test.go:42: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073229
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    // Convert strings to arrays of bytes\n    a_bytes :=\
    \ []byte(a)\n    b_bytes := []byte(b)\n\n    // Create a new array of bytes to\
    \ store the result\n    result := make([]byte, len(a_bytes))\n\n    // Perform\
    \ XOR on each byte\n    for i := 0; i < len(a_bytes); i++ {\n        result[i]\
    \ = a_bytes[i] ^ b_bytes[i]\n    }\n\n    // Convert result to string and return\n\
    \    return string(result)\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmp_pw_3ig7_test.go:42: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmp_pw_3ig7_test.go:42:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmp_pw_3ig7_test.go:42: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073229
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        return \"\"\n    }\n\
    \    var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] ==\
    \ b[i] {\n            result += \"0\"\n        } else {\n            result +=\
    \ \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var res string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            res += \"0\"\n        } else {\n     \
    \       res += \"1\"\n        }\n    }\n    return res\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        panic(\"Inputs must be\
    \ of equal length\")\n    }\n    result := \"\"\n    for i := 0; i < len(a); i++\
    \ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        panic(\"string_xor: input\
    \ strings must be of equal length\")\n    }\n    result := \"\"\n    for i :=\
    \ 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\
    \n        } else {\n            result += \"1\"\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073229
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        panic(\"Inputs must be\
    \ of equal length\")\n    }\n    result := \"\"\n    for i := 0; i < len(a); i++\
    \ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        return \"\"\n    }\n\
    \    var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] ==\
    \ b[i] {\n            result += \"0\"\n        } else {\n            result +=\
    \ \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        return \"\"\n    }\n\
    \    result := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        return \"\"\n    }\n\
    \    var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] ==\
    \ b[i] {\n            result += \"0\"\n        } else {\n            result +=\
    \ \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        return \"\"\n    }\n\
    \    var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] ==\
    \ b[i] {\n            result += \"0\"\n        } else {\n            result +=\
    \ \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    // convert strings to byte arrays\n    a_bytes := []byte(a)\n\
    \    b_bytes := []byte(b)\n\n    // create byte array for result\n    result :=\
    \ make([]byte, len(a_bytes))\n\n    // perform XOR on each byte\n    for i :=\
    \ 0; i < len(a_bytes); i++ {\n        result[i] = a_bytes[i] ^ b_bytes[i]\n  \
    \  }\n\n    // convert result to string\n    return string(result)\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmp1i6xhouf_test.go:42: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmp1i6xhouf_test.go:42:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmp1i6xhouf_test.go:42: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073229
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpbhc_qtgm_test.go:30: expected '010010', got ''\n    ---\
    \ FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpbhc_qtgm_test.go:30: expected\
    \ '0', got ''\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmpbhc_qtgm_test.go:30:\
    \ expected '0101', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        return \"\"\n    }\n\
    \    var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] ==\
    \ b[i] {\n            result += \"0\"\n        } else {\n            result +=\
    \ \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        panic(\"Inputs must be\
    \ of equal length\")\n    }\n    var result string\n    for i := 0; i < len(a);\
    \ i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else\
    \ {\n            result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        return \"\"\n    }\n\
    \    result := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073227
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    // Convert strings to arrays of bytes\n    a_bytes :=\
    \ []byte(a)\n    b_bytes := []byte(b)\n\n    // Create a new array of bytes to\
    \ store the result\n    result := make([]byte, len(a_bytes))\n\n    // Loop through\
    \ each byte and perform the XOR operation\n    for i := 0; i < len(a_bytes); i++\
    \ {\n        result[i] = a_bytes[i] ^ b_bytes[i]\n    }\n\n    // Convert the\
    \ result back to a string\n    return string(result)\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmp92gbq_tn_test.go:42: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmp92gbq_tn_test.go:42:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmp92gbq_tn_test.go:42: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073229
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    // Convert a and b to []rune\n    a_runes := []rune(a)\n\
    \    b_runes := []rune(b)\n\n    // Check that a and b are the same length\n \
    \   if len(a_runes) != len(b_runes) {\n        return \"Error: Inputs must be\
    \ the same length\"\n    }\n\n    // Create a new slice of runes to hold the result\n\
    \    result := make([]rune, len(a_runes))\n\n    // Iterate through a and b, performing\
    \ XOR on each pair of runes\n    for i := 0; i < len(a_runes); i++ {\n       \
    \ if a_runes[i] == b_runes[i] {\n            result[i] = '0'\n        } else {\n\
    \            result[i] = '1'\n        }\n    }\n\n    // Convert result to string\
    \ and return\n    return string(result)\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073229
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    // Write your code here\n    var result string\n   \
    \ for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result\
    \ += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n\
    \    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073229
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        return \"\"\n    }\n\
    \    var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] ==\
    \ b[i] {\n            result += \"0\"\n        } else {\n            result +=\
    \ \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        return \"\"\n    }\n\
    \    result := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        panic(\"Input strings\
    \ must be of equal length\")\n    }\n    result := \"\"\n    for i := 0; i < len(a);\
    \ i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else\
    \ {\n            result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073229
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    var result string\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073227
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\nfunc string_xor(a string,\
    \ b string) string {\n    if len(a) != len(b) {\n        panic(\"Inputs must be\
    \ of equal length\")\n    }\n    var result string\n    for i := 0; i < len(a);\
    \ i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else\
    \ {\n            result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073227
