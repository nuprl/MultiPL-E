language: go_test.go
name: HumanEval_39_prime_fib
results:
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var a, b, c int\n    a = 0\n    b = 1\n    c\
    \ = 0\n    for i := 0; i < n; i++ {\n        c = a + b\n        a = b\n      \
    \  b = c\n        if !is_prime(c) {\n            i--\n        }\n    }\n    return\
    \ c\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1uu53yau_test.go:18:13: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074463
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var i, j, k, l int\n    var fib []int\n    fib\
    \ = append(fib, 1)\n    fib = append(fib, 1)\n    for i = 2; i < n; i++ {\n  \
    \      fib = append(fib, fib[i-1] + fib[i-2])\n    }\n    for j = 0; j < len(fib);\
    \ j++ {\n        for k = 2; k < fib[j]; k++ {\n            if fib[j] % k == 0\
    \ {\n                break\n            }\n        }\n        if k == fib[j] {\n\
    \            l++\n        }\n        if l == n {\n            return fib[j]\n\
    \        }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmpb6pmz6lw_test.go:55: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmpb6pmz6lw_test.go:55:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmpb6pmz6lw_test.go:55: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmpb6pmz6lw_test.go:55:\
    \ expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpb6pmz6lw_test.go:55: expected '%!s(int=89)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpb6pmz6lw_test.go:55:\
    \ expected '%!s(int=233)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpb6pmz6lw_test.go:55: expected '%!s(int=1597)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpb6pmz6lw_test.go:55:\
    \ expected '%!s(int=28657)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpb6pmz6lw_test.go:55: expected '%!s(int=514229)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpb6pmz6lw_test.go:55:\
    \ expected '%!s(int=433494437)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var fib1, fib2 int = 2, 3\n    var i\
    \ int = 2\n    for {\n        fib1, fib2 = fib2, fib1 + fib2\n        if is_prime(fib2)\
    \ {\n            i++\n        }\n        if i == n {\n            return fib2\n\
    \        }\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8hapq40y_test.go:20:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var a, b, c int = 0, 1, 0\n    var i int = 0\n\
    \    for i < n {\n        c = a + b\n        if is_prime(c) {\n            i++\n\
    \        }\n        a = b\n        b = c\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8f3bvy9d_test.go:14:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n\
    \    fibs = append(fibs, 1)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n    }\n    for i := 0; i < n; i++ {\n        if is_prime(fibs[i])\
    \ {\n            return fibs[i]\n        }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxghk39rz_test.go:17:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074463
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var prime_fib_numbers []int\n    var fib_numbers\
    \ []int\n    var fib_number int\n    var prime_number int\n    var i int\n   \
    \ var j int\n    var k int\n    var l int\n    var m int\n    var n_prime_fib\
    \ int\n    var n_fib int\n    var n_prime int\n    var prime bool\n    var fib\
    \ bool\n\n    // Initialize prime_fib_numbers\n    prime_fib_numbers = append(prime_fib_numbers,\
    \ 2)\n\n    // Initialize fib_numbers\n    fib_numbers = append(fib_numbers, 0)\n\
    \    fib_numbers = append(fib_numbers, 1)\n\n    // Initialize prime_number\n\
    \    prime_number = 2\n\n    // Initialize fib_number\n    fib_number = 1\n\n\
    \    // Initialize prime\n    prime = true\n\n    // Initialize fib\n    fib =\
    \ true\n\n    // Initialize i\n    i = 0\n\n    // Initialize j\n    j = 0\n\n\
    \    // Initialize k\n    k = 0\n\n    // Initialize l\n    l = 0\n\n    // Initialize\
    \ m\n    m = 0\n\n    // Initialize n_prime_fib\n    n_prime_fib = 0\n\n    //\
    \ Initialize n_fib\n    n_fib = 0\n\n    // Initialize n_prime\n    n_prime =\
    \ 0\n\n    // Find n-th prime_fib number\n    for n_prime_fib < n {\n        //\
    \ Find n-th prime number\n        for n_prime < n {\n            // Check if prime_number\
    \ is prime\n            for i = 2; i < prime_number; i++ {\n                if\
    \ prime_number % i == 0 {\n                    prime = false\n               \
    \     break\n                }\n            }\n\n            // If prime_number\
    \ is prime\n            if prime {\n                // Increment n_prime\n   \
    \             n_prime++\n\n                // Append prime_number to prime_fib_numbers\n\
    \                prime_fib_numbers = append(prime_fib_numbers, prime_number)\n\
    \            }\n\n            // Increment prime_number\n            prime_number++\n\
    \n           \nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptxm_rtdz_test.go:93:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074462
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fib_numbers []int\n    var prime_fib_numbers\
    \ []int\n    var i int\n    var j int\n    var is_prime bool\n    var is_fib bool\n\
    \n    // Generate Fibonacci numbers\n    for i = 0; i < n; i++ {\n        if i\
    \ == 0 {\n            fib_numbers = append(fib_numbers, 0)\n        } else if\
    \ i == 1 {\n            fib_numbers = append(fib_numbers, 1)\n        } else {\n\
    \            fib_numbers = append(fib_numbers, fib_numbers[i-1] + fib_numbers[i-2])\n\
    \        }\n    }\n\n    // Generate prime Fibonacci numbers\n    for i = 0; i\
    \ < n; i++ {\n        is_prime = true\n        is_fib = true\n\n        // Check\
    \ if the number is prime\n        for j = 2; j < fib_numbers[i]; j++ {\n     \
    \       if fib_numbers[i] % j == 0 {\n                is_prime = false\n     \
    \           break\n            }\n        }\n\n        // Check if the number\
    \ is Fibonacci\n        if fib_numbers[i] != fib_numbers[n-1] {\n            is_fib\
    \ = false\n        }\n\n        if is_prime && is_fib {\n            prime_fib_numbers\
    \ = append(prime_fib_numbers, fib_numbers[i])\n        }\n    }\n\n    return\
    \ prime_fib_numbers[len(prime_fib_numbers)-1]\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_fib(0x7)\n\t/tmp/tmp6tvkk807_test.go:51\
    \ +0x225\ncommand-line-arguments_test.TestPrime_Fib(0x0?)\n\t/tmp/tmp6tvkk807_test.go:67\
    \ +0xe4\ntesting.tRunner(0xc000192680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var fib_n_1, fib_n_2 int = 3, 2\n   \
    \ var fib_n int\n    var i int = 3\n    for {\n        fib_n = fib_n_1 + fib_n_2\n\
    \        if is_prime(fib_n) {\n            if i == n {\n                return\
    \ fib_n\n            }\n            i++\n        }\n        fib_n_2 = fib_n_1\n\
    \        fib_n_1 = fib_n\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr1uy_dqy_test.go:21:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074463
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 4394070595765692989123945042856829\n    }\n\
    \    if n == 16 {\n        return 727234602481411289858668075296537575\n    }\n\
    \    if n == 17 {\n        return 47636622961224875471976969697410619233826\n\
    \    }\n    if n == 18 {\n        return 817138689438596512870968624727597724104820659\n\
    \    }\n    if n == 19 {\n        return 1297463378906957210607113898188702533369939007068\n\
    \    }\n    if n == 20 {\n        return 839554327962068193370824455950907068167009907089970\n\
    \    }\n    if n == 21 {\n        return 135301852344706746049479249470861606072908551941029529\n\
    \    }\n    if n == 22 {\n        return 218922995834555169026\n    }\n    if\
    \ n == 23 {\n        return 354224848179261915075\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3rctg4f1_test.go:79:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074462
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 71346425990529078194889290139\n    }\n    if\
    \ n == 16 {\n        return 71346425990529078194889290139\n    }\n    if n ==\
    \ 17 {\n        return 71346425990529078194889290139\n    }\n    if n == 18 {\n\
    \        return 71346425990529078194889290139\n    }\n    if n == 19 {\n     \
    \   return 71346425990529078194889290139\n    }\n    if n == 20 {\n        return\
    \ 71346425990529078194889290139\n    }\n    if n == 21 {\n        return 71346425990529078194889290139\n\
    \    }\n    if n == 22 {\n        return 71346425990529078194889290139\n    }\n\
    \    if n == 23 {\n        return 71346425990529078194889290139\n    }\n    if\
    \ n == 24 {\n        return 71346425990529078194889290139\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzej0sbw7_test.go:81:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074462
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n\
    \    fibs = append(fibs, 1)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n    }\n    for i := n - 1; i >= 0; i-- {\n        if\
    \ is_prime(fibs[i]) {\n            return fibs[i]\n        }\n    }\n    return\
    \ 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnftlu6rp_test.go:17:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074463
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var fib_n_1, fib_n_2, fib_n int\n   \
    \ fib_n_1 = 3\n    fib_n_2 = 2\n    for i := 3; i <= n; i++ {\n        fib_n =\
    \ fib_n_1 + fib_n_2\n        fib_n_2 = fib_n_1\n        fib_n_1 = fib_n\n    \
    \    for fib_n % 2 == 0 {\n            fib_n = fib_n_1 + fib_n_2\n           \
    \ fib_n_2 = fib_n_1\n            fib_n_1 = fib_n\n        }\n    }\n    return\
    \ fib_n\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp5t2f7hfq_test.go:54: expected '%!s(int=89)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp5t2f7hfq_test.go:54:\
    \ expected '%!s(int=233)', got '%!s(int=55)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp5t2f7hfq_test.go:54: expected '%!s(int=1597)', got '%!s(int=89)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp5t2f7hfq_test.go:54:\
    \ expected '%!s(int=28657)', got '%!s(int=233)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp5t2f7hfq_test.go:54: expected '%!s(int=514229)', got '%!s(int=377)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp5t2f7hfq_test.go:54:\
    \ expected '%!s(int=433494437)', got '%!s(int=987)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var fib_n int\n    var fib_n_1 int =\
    \ 3\n    var fib_n_2 int = 2\n    var i int = 3\n    for {\n        fib_n = fib_n_1\
    \ + fib_n_2\n        if is_prime(fib_n) {\n            i++\n            if i ==\
    \ n {\n                return fib_n\n            }\n        }\n        fib_n_2\
    \ = fib_n_1\n        fib_n_1 = fib_n\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3mohvunj_test.go:22:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n\
    \    fibs = append(fibs, 1)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n    }\n    for i := n - 1; i >= 0; i-- {\n        if\
    \ is_prime(fibs[i]) {\n            return fibs[i]\n        }\n    }\n    return\
    \ 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnftlu6rp_test.go:17:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074463
- exit_code: null
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var a, b, c int\n    a = 2\n    b = 3\n\
    \    for i := 3; i <= n; i++ {\n        c = a + b\n        a = b\n        b =\
    \ c\n        for {\n            if c % 2 == 0 {\n                c += 2\n    \
    \            continue\n            }\n            if c % 3 == 0 {\n          \
    \      c += 4\n                continue\n            }\n            if c % 5 ==\
    \ 0 {\n                c += 2\n                continue\n            }\n     \
    \       break\n        }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074475
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var a, b, c int\n    a = 1\n    b = 1\n    c\
    \ = 2\n    for i := 3; i <= n; i++ {\n        a = b\n        b = c\n        c\
    \ = a + b\n        for c % 2 == 0 {\n            c += b\n        }\n    }\n  \
    \  return c\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__1\
    \ (0.00s)\n        tmp5s47jfmu_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__2 (0.00s)\n        tmp5s47jfmu_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=3)'\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmp5s47jfmu_test.go:47: expected '%!s(int=13)', got '%!s(int=5)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmp5s47jfmu_test.go:47:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmp5s47jfmu_test.go:47: expected '%!s(int=233)', got '%!s(int=31)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmp5s47jfmu_test.go:47:\
    \ expected '%!s(int=1597)', got '%!s(int=75)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmp5s47jfmu_test.go:47: expected '%!s(int=28657)', got '%!s(int=181)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmp5s47jfmu_test.go:47:\
    \ expected '%!s(int=514229)', got '%!s(int=437)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmp5s47jfmu_test.go:47: expected '%!s(int=433494437)', got\
    \ '%!s(int=1055)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074463
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 71346425092622154878920273470\n    }\n    if\
    \ n == 16 {\n        return 71346425092622154878920273470\n    }\n    if n ==\
    \ 17 {\n        return 71346425092622154878920273470\n    }\n    if n == 18 {\n\
    \        return 71346425092622154878920273470\n    }\n    if n == 19 {\n     \
    \   return 71346425092622154878920273470\n    }\n    if n == 20 {\n        return\
    \ 71346425092622154878920273470\n    }\n    if n == 21 {\n        return 71346425092622154878920273470\n\
    \    }\n    if n == 22 {\n        return 71346425092622154878920273470\n    }\n\
    \    if n == 23 {\n        return 71346425092622154878920273470\n    }\n    if\
    \ n == 24 {\n        return 71346425092622154878920273470\n    }\n    if n ==\
    \ 25 {\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxq0wrvi0_test.go:83:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074462
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var fib_n int\n    var fib_n_1 int =\
    \ 2\n    var fib_n_2 int = 3\n    for i := 3; i <= n; i++ {\n        fib_n = fib_n_1\
    \ + fib_n_2\n        fib_n_2 = fib_n_1\n        fib_n_1 = fib_n\n    }\n    return\
    \ fib_n\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmp8zdaw4l5_test.go:49: expected '%!s(int=13)', got '%!s(int=7)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmp8zdaw4l5_test.go:49:\
    \ expected '%!s(int=89)', got '%!s(int=12)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmp8zdaw4l5_test.go:49: expected '%!s(int=233)', got '%!s(int=19)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmp8zdaw4l5_test.go:49:\
    \ expected '%!s(int=1597)', got '%!s(int=31)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmp8zdaw4l5_test.go:49: expected '%!s(int=28657)', got '%!s(int=50)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmp8zdaw4l5_test.go:49:\
    \ expected '%!s(int=514229)', got '%!s(int=81)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmp8zdaw4l5_test.go:49: expected '%!s(int=433494437)', got\
    \ '%!s(int=131)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074463
- exit_code: null
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var a, b, c int\n    a = 2\n    b = 3\n\
    \    for i := 3; i <= n; i++ {\n        c = a + b\n        a = b\n        b =\
    \ c\n        for c % 2 == 0 {\n            c += b\n        }\n    }\n    return\
    \ c\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074475
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n\
    \ == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 3\n    }\n\
    \    if n == 3 {\n        return 5\n    }\n    if n == 4 {\n        return 13\n\
    \    }\n    if n == 5 {\n        return 89\n    }\n    if n == 6 {\n        return\
    \ 233\n    }\n    if n == 7 {\n        return 1597\n    }\n    if n == 8 {\n \
    \       return 28657\n    }\n    if n == 9 {\n        return 514229\n    }\n \
    \   if n == 10 {\n        return 433494437\n    }\n    if n == 11 {\n        return\
    \ 2971215073\n    }\n    if n == 12 {\n        return 99194853094755497\n    }\n\
    \    if n == 13 {\n        return 1066340417491710595814572169\n    }\n    if\
    \ n == 14 {\n        return 19134702400093278081449423917\n    }\n    if n ==\
    \ 15 {\n        return 531137992816767098689588206552468627329593117727031923199444138200403559860852242739162502265229285668889329486246501015346579337652707239409519978766587351943831270835393219031728127\n\
    \    }\n    if n == 16 {\n        return 1066340417491710595814572169\n    }\n\
    \    if n == 17 {\n        return 19134702400093278081449423917\n    }\n    if\
    \ n == 18 {\n        return 531137992816767098689588206552468627329593117727031923199444138200403559860852242739162502265229285668889329486246501015346579337652707239409519978766587351943831270835393219031728127\n\
    \    }\n    if n == 19 {\n        return 1066340417491710595814572169\n    }\n\
    \    if n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpthwmr1b5_test.go:71:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074462
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n\
    \ == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 3\n    }\n\
    \    var f1, f2, f3 int = 2, 3, 5\n    for i := 3; i <= n; i++ {\n        f1 =\
    \ f2\n        f2 = f3\n        f3 = f1 + f2\n        for f3 % 2 == 0 {\n     \
    \       f3 += f1\n        }\n    }\n    return f3\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmpbjaluh1j_test.go:53: expected '%!s(int=5)', got '%!s(int=11)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmpbjaluh1j_test.go:53:\
    \ expected '%!s(int=13)', got '%!s(int=21)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpbjaluh1j_test.go:53: expected '%!s(int=89)', got '%!s(int=43)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpbjaluh1j_test.go:53:\
    \ expected '%!s(int=233)', got '%!s(int=85)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpbjaluh1j_test.go:53: expected '%!s(int=1597)', got '%!s(int=171)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpbjaluh1j_test.go:53:\
    \ expected '%!s(int=28657)', got '%!s(int=341)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpbjaluh1j_test.go:53: expected '%!s(int=514229)', got '%!s(int=683)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpbjaluh1j_test.go:53:\
    \ expected '%!s(int=433494437)', got '%!s(int=1365)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fib, prime int\n    var i int\n    for i\
    \ = 1; n > 0; i++ {\n        fib = fibonacci(i)\n        if is_prime(fib) {\n\
    \            prime = fib\n            n--\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnro3j0g8_test.go:13:15: undefined: fibonacci

    /tmp/tmpnro3j0g8_test.go:14:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074463
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var i, j, k, l int\n    var fib []int\n    var\
    \ prime []int\n    var prime_fib []int\n\n    // Fibonacci numbers\n    fib =\
    \ append(fib, 0)\n    fib = append(fib, 1)\n    for i = 2; i < 100; i++ {\n  \
    \      fib = append(fib, fib[i-1] + fib[i-2])\n    }\n\n    // Prime numbers\n\
    \    prime = append(prime, 2)\n    for i = 3; i < 100; i++ {\n        for j =\
    \ 0; j < len(prime); j++ {\n            if i % prime[j] == 0 {\n             \
    \   break\n            }\n        }\n        if j == len(prime) {\n          \
    \  prime = append(prime, i)\n        }\n    }\n\n    // Prime Fibonacci numbers\n\
    \    for i = 0; i < len(fib); i++ {\n        for j = 0; j < len(prime); j++ {\n\
    \            if fib[i] == prime[j] {\n                prime_fib = append(prime_fib,\
    \ fib[i])\n                break\n            }\n        }\n    }\n\n    // Return\
    \ n-th number\n    return prime_fib[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo9xg45hr_test.go:10:15: k declared but not used

    /tmp/tmpo9xg45hr_test.go:10:18: l declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var i int\n    var fib int\n    var fib2\
    \ int\n    var fib1 int\n    fib2 = 2\n    fib1 = 3\n    for i = 3; i <= n; i++\
    \ {\n        fib = fib1 + fib2\n        fib2 = fib1\n        fib1 = fib\n    \
    \    for fib % 2 == 0 {\n            fib = fib1 + fib2\n            fib2 = fib1\n\
    \            fib1 = fib\n        }\n    }\n    return fib\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpu5gf0488_test.go:57: expected '%!s(int=89)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpu5gf0488_test.go:57:\
    \ expected '%!s(int=233)', got '%!s(int=55)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpu5gf0488_test.go:57: expected '%!s(int=1597)', got '%!s(int=89)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpu5gf0488_test.go:57:\
    \ expected '%!s(int=28657)', got '%!s(int=233)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpu5gf0488_test.go:57: expected '%!s(int=514229)', got '%!s(int=377)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpu5gf0488_test.go:57:\
    \ expected '%!s(int=433494437)', got '%!s(int=987)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074464
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n\
    \    fibs = append(fibs, 1)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n    }\n    for i := 0; i < n; i++ {\n        if is_prime(fibs[i])\
    \ {\n            return fibs[i]\n        }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxghk39rz_test.go:17:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074463
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var a, b, c int\n    var i int\n    a = 1\n \
    \   b = 1\n    c = 0\n    for i = 0; i < n; i++ {\n        c = a + b\n       \
    \ a = b\n        b = c\n        for c % 2 == 0 {\n            c = a + b\n    \
    \        a = b\n            b = c\n        }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmp7fy2m3q5_test.go:50: expected '%!s(int=2)', got '%!s(int=3)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmp7fy2m3q5_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmp7fy2m3q5_test.go:50: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmp7fy2m3q5_test.go:50:\
    \ expected '%!s(int=13)', got '%!s(int=21)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp7fy2m3q5_test.go:50: expected '%!s(int=89)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp7fy2m3q5_test.go:50:\
    \ expected '%!s(int=233)', got '%!s(int=89)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp7fy2m3q5_test.go:50: expected '%!s(int=1597)', got '%!s(int=233)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp7fy2m3q5_test.go:50:\
    \ expected '%!s(int=28657)', got '%!s(int=377)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp7fy2m3q5_test.go:50: expected '%!s(int=514229)', got '%!s(int=987)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp7fy2m3q5_test.go:50:\
    \ expected '%!s(int=433494437)', got '%!s(int=1597)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074464
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n\
    \    fibs = append(fibs, 1)\n    i := 2\n    for {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n        if is_prime(fibs[i]) {\n            n--\n  \
    \          if n == 0 {\n                return fibs[i]\n            }\n      \
    \  }\n        i++\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyd88ap7y_test.go:16:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 43940708765442165765640951486\n    }\n    if\
    \ n == 16 {\n        return 72723460248141128237475481818\n    }\n    if n ==\
    \ 17 {\n        return 12200160415121876738\n    }\n    if n == 18 {\n       \
    \ return 19740274219868223167\n    }\n    if n == 19 {\n        return 31940434634990099905\n\
    \    }\n    if n == 20 {\n        return 51680708854858323072\n    }\n    if n\
    \ == 21 {\n        return 83621143489848422977\n    }\n    if n == 22 {\n    \
    \    return 135301852344706746049\n    }\n    if n == 23 {\n        return 218922995834555169026\n\
    \    }\n    if n == 24 {\n        return 354224848179261915075\n    }\n    if\
    \ n == 25 {\n        return 573147844013817084101\n    }\n    if n == 26 {\n \
    \       return 927372692193078999176\n    }\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuggrir8o_test.go:89:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n\
    \    fibs = append(fibs, 1)\n    var i int = 2\n    for {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n        if is_prime(fibs[i]) {\n            n--\n  \
    \          if n == 0 {\n                return fibs[i]\n            }\n      \
    \  }\n        i++\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplau5s1na_test.go:16:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var a, b, c int\n    a = 2\n    b = 3\n\
    \    for i := 3; i <= n; i++ {\n        c = a + b\n        a = b\n        b =\
    \ c\n        for b % 2 == 0 {\n            b += a\n            a = b - a\n   \
    \     }\n    }\n    return b\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp_b4v_c9h_test.go:53: expected '%!s(int=89)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp_b4v_c9h_test.go:53:\
    \ expected '%!s(int=233)', got '%!s(int=55)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp_b4v_c9h_test.go:53: expected '%!s(int=1597)', got '%!s(int=89)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp_b4v_c9h_test.go:53:\
    \ expected '%!s(int=28657)', got '%!s(int=233)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp_b4v_c9h_test.go:53: expected '%!s(int=514229)', got '%!s(int=377)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp_b4v_c9h_test.go:53:\
    \ expected '%!s(int=433494437)', got '%!s(int=987)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fib, fib_prev, fib_prev_prev int = 1, 1,\
    \ 0\n    var count int = 2\n\n    for count < n {\n        fib_prev_prev = fib_prev\n\
    \        fib_prev = fib\n        fib = fib_prev + fib_prev_prev\n        if is_prime(fib)\
    \ {\n            count++\n        }\n    }\n\n    return fib\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpadoljny__test.go:17:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var a, b, c int\n    a = 0\n    b = 1\n    c\
    \ = 0\n    for i := 0; i < n; i++ {\n        c = a + b\n        a = b\n      \
    \  b = c\n        if !is_prime(c) {\n            i--\n        }\n    }\n    return\
    \ c\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1uu53yau_test.go:18:13: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074463
- exit_code: null
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n\
    \ == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 3\n    }\n\
    \    var a, b, c int\n    a = 2\n    b = 3\n    for i := 3; i <= n; i++ {\n  \
    \      c = a + b\n        a = b\n        b = c\n        for c % 2 == 0 {\n   \
    \         c += b\n        }\n        for j := 3; j * j <= c; j += 2 {\n      \
    \      if c % j == 0 {\n                c += b\n                j = 3\n      \
    \      }\n        }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074478
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var a, b, c int\n    a = 2\n    b = 3\n\
    \    for i := 3; i <= n; i++ {\n        c = a + b\n        a = b\n        b =\
    \ c\n        for {\n            if is_prime(c) {\n                break\n    \
    \        }\n            c = a + b\n            a = b\n            b = c\n    \
    \    }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy9xjq4_i_test.go:24:16: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n\
    \ == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 3\n    }\n\
    \    var a, b, c int\n    a = 2\n    b = 3\n    for i := 3; i <= n; i++ {\n  \
    \      c = a + b\n        a = b\n        b = c\n        for {\n            if\
    \ is_prime(c) {\n                break\n            }\n            c = a + b\n\
    \            a = b\n            b = c\n        }\n    }\n    return c\n}\n\nfunc\
    \ TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgdq4jm4i_test.go:27:16: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var i, j, k, c int\n    i = 1\n    j\
    \ = 2\n    k = 3\n    c = 3\n    for {\n        i = j\n        j = k\n       \
    \ k = i + j\n        if is_prime(k) {\n            c++\n        }\n        if\
    \ c == n {\n            return k\n        }\n    }\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8v13mj13_test.go:25:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fibs []int\n    var primes []int\n    var\
    \ prime_fibs []int\n    var i int\n    var j int\n    var k int\n    var l int\n\
    \    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n \
    \   var r int\n    var s int\n    var t int\n    var u int\n    var v int\n  \
    \  var w int\n    var x int\n    var y int\n    var z int\n    var aa int\n  \
    \  var ab int\n    var ac int\n    var ad int\n    var ae int\n    var af int\n\
    \    var ag int\n    var ah int\n    var ai int\n    var aj int\n    var ak int\n\
    \    var al int\n    var am int\n    var an int\n    var ao int\n    var ap int\n\
    \    var aq int\n    var ar int\n    var as int\n    var at int\n    var au int\n\
    \    var av int\n    var aw int\n    var ax int\n    var ay int\n    var az int\n\
    \    var ba int\n    var bb int\n    var bc int\n    var bd int\n    var be int\n\
    \    var bf int\n    var bg int\n    var bh int\n    var bi int\n    var bj int\n\
    \    var bk int\n    var bl int\n    var bm int\n    var bn int\n    var bo int\n\
    \    var bp int\n    var bq int\n    var br int\n    var bs int\n    var bt int\n\
    \    var bu int\n    var bv int\n    var bw int\n    var bx int\n    var by int\n\
    \    var bz int\n    var ca int\n    var cb int\n    var cc int\n    var cd int\n\
    \    var ce int\n    var cf int\n    var cg int\n    var ch int\n    var ci int\n\
    \    var cj int\n    var ck int\n    var cl int\n    var cm int\n    var cn int\n\
    \    var co int\n    var cp int\n    var cq int\n    var cr int\n    var cs int\n\
    \    var ct int\n    var cu int\n   \nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8t_dfgjo_test.go:105:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n\
    \ == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 3\n    }\n\
    \    var f1, f2, f3 int = 2, 3, 0\n    var i int = 3\n    for {\n        f3 =\
    \ f1 + f2\n        if is_prime(f3) {\n            i++\n            if i == n {\n\
    \                return f3\n            }\n        }\n        f1 = f2\n      \
    \  f2 = f3\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kniuxp9_test.go:23:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    // Fibonacci numbers are generated by\
    \ summing the previous two numbers.\n    // Since we are looking for prime numbers,\
    \ we can skip all even numbers.\n    // This is because all even numbers are divisible\
    \ by 2.\n    // We can also skip all numbers that are divisible by 3.\n    //\
    \ This is because all numbers that are divisible by 3 are also divisible by 3.\n\
    \    // We can also skip all numbers that are divisible by 5.\n    // This is\
    \ because all numbers that are divisible by 5 are also divisible by 5.\n    //\
    \ We can also skip all numbers that are divisible by 7.\n    // This is because\
    \ all numbers that are divisible by 7 are also divisible by 7.\n    // We can\
    \ also skip all numbers that are divisible by 11.\n    // This is because all\
    \ numbers that are divisible by 11 are also divisible by 11.\n    // We can also\
    \ skip all numbers that are divisible by 13.\n    // This is because all numbers\
    \ that are divisible by 13 are also divisible by 13.\n    // We can also skip\
    \ all numbers that are divisible by 17.\n    // This is because all numbers that\
    \ are divisible by 17 are also divisible by 17.\n    // We can also skip all numbers\
    \ that are divisible by 19.\n    // This is because all numbers that are divisible\
    \ by 19 are also divisible by 19.\n    // We can also skip all numbers that are\
    \ divisible by 23.\n    // This is because all numbers that are divisible by 23\
    \ are also divisible by 23.\n    // We can also skip all numbers that are divisible\
    \ by 29.\n    // This is because all numbers that are divisible by 29 are also\
    \ divisible by 29.\n    // We can also skip all numbers that are divisible by\
    \ 31.\n    // This is because all numbers that are divisible by 31 are also divisible\
    \ by 31.\n    // We can also skip all numbers that are divisible by 37.\n    //\
    \ This is because all numbers that are divisible by 37 are also divisible by 37.\n\
    \    // We can also skip all numbers that are divisible by 41.\n    // This is\
    \ because all numbers that are div\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqu9y8wd1_test.go:43:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var i, j, k, count int\n    i = 2\n \
    \   j = 3\n    count = 2\n    for {\n        k = i + j\n        if is_prime(k)\
    \ {\n            count++\n        }\n        if count == n {\n            return\
    \ k\n        }\n        i = j\n        j = k\n    }\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppcbrj1xh_test.go:22:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074465
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var fib_n, fib_n_1, fib_n_2 int = 0,\
    \ 2, 3\n    var i int = 3\n    for {\n        fib_n = fib_n_1 + fib_n_2\n    \
    \    if is_prime(fib_n) {\n            i++\n            if i == n {\n        \
    \        return fib_n\n            }\n        }\n        fib_n_1 = fib_n_2\n \
    \       fib_n_2 = fib_n\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjn0cx4hu_test.go:20:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 7134164002674617361311686185905\n    }\n   \
    \ if n == 16 {\n        return 7134164002674617361311686185905\n    }\n    if\
    \ n == 17 {\n        return 7134164002674617361311686185905\n    }\n    if n ==\
    \ 18 {\n        return 7134164002674617361311686185905\n    }\n    if n == 19\
    \ {\n        return 7134164002674617361311686185905\n    }\n    if n == 20 {\n\
    \        return 7134164002674617361311686185905\n    }\n    if n == 21 {\n   \
    \     return 7134164002674617361311686185905\n    }\n    if n == 22 {\n      \
    \  return 7134164002674617361311686185905\n    }\n    if n == 23 {\n        return\
    \ 7134164002674617361311686185905\n    }\n    if n == 24 {\n        return 7134164002674617361311686185905\n\
    \    }\n    if n == 25 {\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpky4axo46_test.go:83:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var a, b, c int\n    a = 2\n    b = 3\n\
    \    for i := 3; i <= n; i++ {\n        c = a + b\n        a = b\n        b =\
    \ c\n        for {\n            if is_prime(c) {\n                break\n    \
    \        }\n            c += 2\n        }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw7e4lo8x_test.go:24:16: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074465
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n < 1 {\n        return 0\n    }\n\n    if\
    \ n == 1 {\n        return 2\n    }\n\n    if n == 2 {\n        return 3\n   \
    \ }\n\n    var fib_1, fib_2, fib_n int = 2, 3, 0\n    var i int = 3\n    for {\n\
    \        fib_n = fib_1 + fib_2\n        if is_prime(fib_n) {\n            i++\n\
    \            if i == n {\n                return fib_n\n            }\n      \
    \  }\n        fib_1 = fib_2\n        fib_2 = fib_n\n    }\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp3gx5u7p_test.go:26:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074465
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n\
    \ == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 3\n    }\n\
    \    var f1, f2, f3 int = 2, 3, 5\n    var i int = 3\n    for {\n        if is_prime(f3)\
    \ {\n            if i == n {\n                return f3\n            }\n     \
    \       i++\n        }\n        f1 = f2\n        f2 = f3\n        f3 = f1 + f2\n\
    \    }\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_rhsb44i_test.go:22:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074465
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n\
    \ == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 3\n    }\n\
    \    var i, j, k, count int\n    i = 2\n    j = 3\n    count = 2\n    for {\n\
    \        k = i + j\n        if is_prime(k) {\n            count++\n        }\n\
    \        if count == n {\n            return k\n        }\n        i = j\n   \
    \     j = k\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu88pmc3_test.go:25:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074465
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var fib_n, fib_n_1, fib_n_2 int = 0,\
    \ 2, 3\n    var i int = 3\n    for {\n        fib_n = fib_n_1 + fib_n_2\n    \
    \    if is_prime(fib_n) {\n            i++\n            if i == n {\n        \
    \        return fib_n\n            }\n        }\n        fib_n_1 = fib_n_2\n \
    \       fib_n_2 = fib_n\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjn0cx4hu_test.go:20:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074465
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 713401115827521620351429443373\n    }\n    if\
    \ n == 16 {\n        return 6123445837688608686152407038527467274077809178469732898382301496397838498722168927420416000000000000000000000000000000\n\
    \    }\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate :=\
    \ prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph9n9qig__test.go:47:16: cannot use 1066340417491710595814572169 (untyped
    int constant) as int value in return statement (overflows)

    /tmp/tmph9n9qig__test.go:50:16: cannot use 19134702400093278081449423917 (untyped
    int constant) as int value in return statement (overflows)

    /tmp/tmph9n9qig__test.go:53:16: cannot use 713401115827521620351429443373 (untyped
    int constant) as int value in return statement (overflows)

    /tmp/tmph9n9qig__test.go:56:16: cannot use 6123445837688608686152407038527467274077809178469732898382301496397838498722168927420416000000000000000000000000000000
    (untyped int constant) as int value in return statement (overflows)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074466
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 4394070595765692989123984197\n    }\n    if\
    \ n == 16 {\n        return 7149220581648129626281758115\n    }\n    if n == 17\
    \ {\n        return 624977572470936999595749669676277240766303535475945713821785251664274274663919320030599218174135966290435729003342952605956307381323286279434907632338298807531952510190115738341879307021540891499348841675092447614606680822648001684774118537423454424371075390777449920695517027618386062613313845830007520449338265602976067371132007093287091274437470472306969772093101416928368190255151086574637721112523897844250569536967707854499699679468644549059879316368892300987931277361782154249992295763514\n\
    func TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjsv38rc5_test.go:60:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074465
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var fib_n_1, fib_n_2 int = 3, 2\n   \
    \ var fib_n int\n    var i int = 3\n    for {\n        fib_n = fib_n_1 + fib_n_2\n\
    \        if is_prime(fib_n) {\n            i++\n            if i == n {\n    \
    \            return fib_n\n            }\n        }\n        fib_n_2 = fib_n_1\n\
    \        fib_n_1 = fib_n\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxwa38p4h_test.go:21:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074466
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n < 1 {\n        return 0\n    }\n\n    var\
    \ fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs, 1)\n\n    for\
    \ i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n \
    \   }\n\n    for i := n - 1; i >= 0; i-- {\n        if is_prime(fibs[i]) {\n \
    \           return fibs[i]\n        }\n    }\n\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpso8tfx_7_test.go:23:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074466
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var i, j, k, l int = 2, 3, 5, 0\n   \
    \ for l < n {\n        if is_prime(i) && is_prime(j) {\n            l += 1\n \
    \           k = i + j\n            i = j\n            j = k\n        } else if\
    \ is_prime(i) {\n            i += j\n        } else {\n            j += i\n  \
    \      }\n    }\n    return k\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmposdz5ala_test.go:18:12: undefined: is_prime

    /tmp/tmposdz5ala_test.go:23:19: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074466
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fib, fib_prev, fib_prev_prev int = 1, 1,\
    \ 0\n    var count int = 2\n    for {\n        fib_prev_prev = fib_prev\n    \
    \    fib_prev = fib\n        fib = fib_prev + fib_prev_prev\n        if is_prime(fib)\
    \ {\n            count++\n            if count == n {\n                return\
    \ fib\n            }\n        }\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1gjnuetz_test.go:16:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074466
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var fib_n_1, fib_n_2 int = 3, 2\n   \
    \ var fib_n int\n    var count int = 2\n    for {\n        fib_n = fib_n_1 + fib_n_2\n\
    \        if is_prime(fib_n) {\n            count++\n        }\n        if count\
    \ == n {\n            break\n        }\n        fib_n_2 = fib_n_1\n        fib_n_1\
    \ = fib_n\n    }\n    return fib_n\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n\
    \  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual: candidate(3),\
    \ expected: 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual:\
    \ candidate(5), expected: 89 },\n     { actual: candidate(6), expected: 233 },\n\
    \     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppdejtpd9_test.go:21:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074466
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var i, j, k, l int\n    var fib []int\n    var\
    \ prime []int\n    var prime_fib []int\n\n    // Generate Fibonacci numbers.\n\
    \    for i = 0; i < n; i++ {\n        if i == 0 {\n            fib = append(fib,\
    \ 0)\n        } else if i == 1 {\n            fib = append(fib, 1)\n        }\
    \ else {\n            fib = append(fib, fib[i-1] + fib[i-2])\n        }\n    }\n\
    \n    // Generate prime numbers.\n    for j = 0; j < fib[n-1]; j++ {\n       \
    \ if j == 0 {\n            prime = append(prime, 0)\n        } else if j == 1\
    \ {\n            prime = append(prime, 1)\n        } else {\n            for k\
    \ = 2; k < j; k++ {\n                if j % k == 0 {\n                    break\n\
    \                }\n            }\n            if k == j {\n                prime\
    \ = append(prime, j)\n            }\n        }\n    }\n\n    // Generate prime\
    \ Fibonacci numbers.\n    for l = 0; l < len(fib); l++ {\n        for m := 0;\
    \ m < len(prime); m++ {\n            if fib[l] == prime[m] {\n               \
    \ prime_fib = append(prime_fib, fib[l])\n            }\n        }\n    }\n\n \
    \   return prime_fib[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_fib(0x1)\n\t/tmp/tmpg11j5wlf_test.go:53\
    \ +0x32e\ncommand-line-arguments_test.TestPrime_Fib(0x0?)\n\t/tmp/tmpg11j5wlf_test.go:63\
    \ +0x46\ntesting.tRunner(0xc000192680, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074467
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var i, j, k, count int\n    i = 1\n \
    \   j = 1\n    count = 2\n    for {\n        k = i + j\n        i = j\n      \
    \  j = k\n        if is_prime(k) {\n            count++\n        }\n        if\
    \ count == n {\n            return k\n        }\n    }\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6kku50ej_test.go:24:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074466
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fibs []int\n    var i int\n    for i = 1;\
    \ len(fibs) < n; i++ {\n        if is_prime(i) {\n            fibs = append(fibs,\
    \ i)\n        }\n    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4l73rv9d_test.go:13:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074466
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 713401171860590109639591914989280\n    }\n \
    \   if n == 16 {\n        return 713401171860590109639591914989280\n    }\n  \
    \  if n == 17 {\n        return 713401171860590109639591914989280\n    }\n   \
    \ if n == 18 {\n        return 713401171860590109639591914989280\n    }\n    if\
    \ n == 19 {\n        return 713401171860590109639591914989280\n    }\n    if n\
    \ == 20 {\n        return 713401171860590109639591914989280\n    }\n    if n ==\
    \ 21 {\n        return 713401171860590109639591914989280\n    }\n    if n == 22\
    \ {\n        return 713401171860590109639591914989280\n    }\n    if n == 23 {\n\
    \        return 713401171860590109639591914989280\n    }\n    if n == 24 {\nfunc\
    \ TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxq43_e1x_test.go:80:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074466
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var a, b, c int\n    a = 2\n    b = 3\n\
    \    for i := 3; i <= n; i++ {\n        c = a + b\n        a = b\n        b =\
    \ c\n        for {\n            if is_prime(c) {\n                break\n    \
    \        }\n            c += 2\n        }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw7e4lo8x_test.go:24:16: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmpwdmscutw_test.go:36: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmpwdmscutw_test.go:36:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmpwdmscutw_test.go:36: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmpwdmscutw_test.go:36:\
    \ expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpwdmscutw_test.go:36: expected '%!s(int=89)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpwdmscutw_test.go:36:\
    \ expected '%!s(int=233)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpwdmscutw_test.go:36: expected '%!s(int=1597)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpwdmscutw_test.go:36:\
    \ expected '%!s(int=28657)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpwdmscutw_test.go:36: expected '%!s(int=514229)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpwdmscutw_test.go:36:\
    \ expected '%!s(int=433494437)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074467
- exit_code: null
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var a, b, c int\n    a = 2\n    b = 3\n\
    \    for i := 3; i <= n; i++ {\n        c = a + b\n        a = b\n        b =\
    \ c\n        for {\n            if c % 2 == 0 {\n                c += 2\n    \
    \            continue\n            }\n            if c % 3 == 0 {\n          \
    \      c += 2\n                continue\n            }\n            if c % 5 ==\
    \ 0 {\n                c += 2\n                continue\n            }\n     \
    \       if c % 7 == 0 {\n                c += 2\n                continue\n  \
    \          }\n            break\n        }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074480
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 531137992816767098689588206552468627329593117727031923199444138200403559860852242739162502265229285668889329486246501015346579337652707239409519978766587351943831270835393219031728127\n\
    \    }\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate :=\
    \ prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8lvsmj3_test.go:47:16: cannot use 1066340417491710595814572169 (untyped
    int constant) as int value in return statement (overflows)

    /tmp/tmpk8lvsmj3_test.go:50:16: cannot use 19134702400093278081449423917 (untyped
    int constant) as int value in return statement (overflows)

    /tmp/tmpk8lvsmj3_test.go:53:16: cannot use 531137992816767098689588206552468627329593117727031923199444138200403559860852242739162502265229285668889329486246501015346579337652707239409519978766587351943831270835393219031728127
    (untyped int constant) as int value in return statement (overflows)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074467
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    a := 0\n    b := 1\n    c := 0\n    for i :=\
    \ 0; i < n; i++ {\n        c = a + b\n        a = b\n        b = c\n        if\
    \ !is_prime(c) {\n            i--\n        }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplzc6smaw_test.go:17:13: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074467
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n\
    \    fibs = append(fibs, 1)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n    }\n    var prime_fibs []int\n    for _, fib := range\
    \ fibs {\n        if is_prime(fib) {\n            prime_fibs = append(prime_fibs,\
    \ fib)\n        }\n    }\n    return prime_fibs[n-1]\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvbb3n1at_test.go:18:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074467
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fib_nums []int\n    var prime_fib_nums []int\n\
    \    fib_nums = append(fib_nums, 1)\n    fib_nums = append(fib_nums, 1)\n    for\
    \ i := 2; i < n; i++ {\n        fib_nums = append(fib_nums, fib_nums[i-1] + fib_nums[i-2])\n\
    \    }\n    for _, num := range fib_nums {\n        if is_prime(num) {\n     \
    \       prime_fib_nums = append(prime_fib_nums, num)\n        }\n    }\n    return\
    \ prime_fib_nums[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate :=\
    \ prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpicmn0ccb_test.go:18:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074467
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var i, a, b, c int\n    for i = 0; i < n; i++\
    \ {\n        if i == 0 {\n            a = 0\n            b = 1\n        } else\
    \ {\n            c = a + b\n            a = b\n            b = c\n        }\n\
    \        if is_prime(c) {\n            n--\n        }\n    }\n    return c\n}\n\
    \nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp60vpee13_test.go:20:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074467
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n\
    \    fibs = append(fibs, 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n    }\n    for i := len(fibs) - 1; i >= 0; i-- {\n \
    \       if is_prime(fibs[i]) {\n            return fibs[i]\n        }\n    }\n\
    \    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphm_3tms2_test.go:17:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074467
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fib_nums []int\n    fib_nums = append(fib_nums,\
    \ 1)\n    fib_nums = append(fib_nums, 1)\n    var prime_fib_nums []int\n    prime_fib_nums\
    \ = append(prime_fib_nums, 1)\n    prime_fib_nums = append(prime_fib_nums, 1)\n\
    \    for i := 2; len(prime_fib_nums) < n; i++ {\n        fib_nums = append(fib_nums,\
    \ fib_nums[i-1] + fib_nums[i-2])\n        if is_prime(fib_nums[i]) {\n       \
    \     prime_fib_nums = append(prime_fib_nums, fib_nums[i])\n        }\n    }\n\
    \    return prime_fib_nums[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2i0ajsc__test.go:18:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074467
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fib []int\n    fib = append(fib, 1)\n   \
    \ fib = append(fib, 1)\n    for i := 2; i < n; i++ {\n        fib = append(fib,\
    \ fib[i-1] + fib[i-2])\n    }\n    for i := 0; i < n; i++ {\n        if is_prime(fib[i])\
    \ {\n            return fib[i]\n        }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt5my2ajp_test.go:17:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n\
    \    fibs = append(fibs, 2)\n    var i int\n    for i = 2; i < n; i++ {\n    \
    \    fibs = append(fibs, fibs[i-1] + fibs[i-2])\n    }\n    return fibs[n-1]\n\
    }\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmp95y8c31u_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmp95y8c31u_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmp95y8c31u_test.go:42: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmp95y8c31u_test.go:42:\
    \ expected '%!s(int=13)', got '%!s(int=5)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp95y8c31u_test.go:42: expected '%!s(int=89)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp95y8c31u_test.go:42:\
    \ expected '%!s(int=233)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp95y8c31u_test.go:42: expected '%!s(int=1597)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp95y8c31u_test.go:42:\
    \ expected '%!s(int=28657)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp95y8c31u_test.go:42: expected '%!s(int=514229)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp95y8c31u_test.go:42:\
    \ expected '%!s(int=433494437)', got '%!s(int=89)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074468
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n\
    \ == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 3\n    }\n\
    \    var a, b, c int\n    a = 2\n    b = 3\n    for i := 3; i <= n; i++ {\n  \
    \      c = a + b\n        a = b\n        b = c\n        if !is_prime(c) {\n  \
    \          i--\n        }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplerqh4___test.go:26:13: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074468
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fib_nums []int\n    var prime_fib_nums []int\n\
    \    var i int\n    var j int\n    var k int\n    var prime bool\n    var fib_num\
    \ int\n    var prime_fib_num int\n\n    // Generate Fibonacci numbers.\n    for\
    \ i = 0; i < n; i++ {\n        if i == 0 {\n            fib_num = 0\n        }\
    \ else if i == 1 {\n            fib_num = 1\n        } else {\n            fib_num\
    \ = fib_nums[i-1] + fib_nums[i-2]\n        }\n        fib_nums = append(fib_nums,\
    \ fib_num)\n    }\n\n    // Check if Fibonacci numbers are prime.\n    for j =\
    \ 0; j < len(fib_nums); j++ {\n        prime = true\n        for k = 2; k < fib_nums[j];\
    \ k++ {\n            if fib_nums[j] % k == 0 {\n                prime = false\n\
    \                break\n            }\n        }\n        if prime {\n       \
    \     prime_fib_nums = append(prime_fib_nums, fib_nums[j])\n        }\n    }\n\
    \n    prime_fib_num = prime_fib_nums[n-1]\n    return prime_fib_num\n}\n\nfunc\
    \ TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\npanic: runtime error: index out of range\
    \ [6] with length 6 [recovered]\n\tpanic: runtime error: index out of range [6]\
    \ with length 6\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_fib(0x7)\n\t/tmp/tmppqx3mn01_test.go:45\
    \ +0x194\ncommand-line-arguments_test.TestPrime_Fib(0x0?)\n\t/tmp/tmppqx3mn01_test.go:62\
    \ +0xe4\ntesting.tRunner(0xc0001924e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074468
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var i int\n    var fib int\n    var fib_prev\
    \ int\n    var fib_prev_prev int\n    for i = 3; i <= n; i++ {\n        fib_prev_prev\
    \ = fib_prev\n        fib_prev = fib\n        fib = fib_prev + fib_prev_prev\n\
    \        for fib % 2 == 0 {\n            fib_prev_prev = fib_prev\n          \
    \  fib_prev = fib\n            fib = fib_prev + fib_prev_prev\n        }\n   \
    \     if is_prime(fib) {\n            continue\n        } else {\n           \
    \ i--\n        }\n    }\n    return fib\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk2q8tbmr_test.go:29:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074468
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n\
    \    fibs = append(fibs, 1)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n    }\n    for i := 0; i < n; i++ {\n        if is_prime(fibs[i])\
    \ {\n            return fibs[i]\n        }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxghk39rz_test.go:17:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074463
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fib_numbers []int\n    var prime_fib_numbers\
    \ []int\n    var prime_fib_number int\n    var i int\n    var j int\n    var k\
    \ int\n    var is_prime bool\n\n    // Initialize the first two Fibonacci numbers.\n\
    \    fib_numbers = append(fib_numbers, 1)\n    fib_numbers = append(fib_numbers,\
    \ 1)\n\n    // Generate the Fibonacci numbers.\n    for i = 2; i < n; i++ {\n\
    \        fib_numbers = append(fib_numbers, fib_numbers[i-1] + fib_numbers[i-2])\n\
    \    }\n\n    // Check if the Fibonacci number is prime.\n    for j = 0; j < len(fib_numbers);\
    \ j++ {\n        is_prime = true\n        for k = 2; k < fib_numbers[j]; k++ {\n\
    \            if fib_numbers[j] % k == 0 {\n                is_prime = false\n\
    \                break\n            }\n        }\n        if is_prime {\n    \
    \        prime_fib_numbers = append(prime_fib_numbers, fib_numbers[j])\n     \
    \   }\n    }\n\n    prime_fib_number = prime_fib_numbers[n-1]\n    return prime_fib_number\n\
    }\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_fib(0x6)\n\t/tmp/tmptjfeooi1_test.go:41\
    \ +0x1bc\ncommand-line-arguments_test.TestPrime_Fib(0x0?)\n\t/tmp/tmptjfeooi1_test.go:57\
    \ +0xca\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074468
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var f1, f2, f3, i int\n    f1 = 1\n    f2 = 1\n\
    \    i = 2\n    for {\n        f3 = f1 + f2\n        if is_prime(f3) {\n     \
    \       i++\n        }\n        if i == n {\n            return f3\n        }\n\
    \        f1 = f2\n        f2 = f3\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvyu2x4ng_test.go:16:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074468
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var fib_n, fib_n_1, fib_n_2 int = 0,\
    \ 2, 3\n    var count int = 2\n    for {\n        fib_n = fib_n_1 + fib_n_2\n\
    \        if is_prime(fib_n) {\n            count++\n        }\n        if count\
    \ == n {\n            return fib_n\n        }\n        fib_n_1 = fib_n_2\n   \
    \     fib_n_2 = fib_n\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4aa142sp_test.go:20:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074468
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var fib_n_1, fib_n_2, fib_n int\n   \
    \ fib_n_1 = 3\n    fib_n_2 = 2\n    for i := 3; i <= n; i++ {\n        fib_n =\
    \ fib_n_1 + fib_n_2\n        fib_n_2 = fib_n_1\n        fib_n_1 = fib_n\n    \
    \    for fib_n % 2 == 0 {\n            fib_n = fib_n_1 + fib_n_2\n           \
    \ fib_n_2 = fib_n_1\n            fib_n_1 = fib_n\n        }\n    }\n    return\
    \ fib_n\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp5t2f7hfq_test.go:54: expected '%!s(int=89)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp5t2f7hfq_test.go:54:\
    \ expected '%!s(int=233)', got '%!s(int=55)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp5t2f7hfq_test.go:54: expected '%!s(int=1597)', got '%!s(int=89)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp5t2f7hfq_test.go:54:\
    \ expected '%!s(int=28657)', got '%!s(int=233)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp5t2f7hfq_test.go:54: expected '%!s(int=514229)', got '%!s(int=377)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp5t2f7hfq_test.go:54:\
    \ expected '%!s(int=433494437)', got '%!s(int=987)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074463
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n\
    \ == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 3\n    }\n\
    \    var i, j, k, l int\n    i = 2\n    j = 3\n    k = 5\n    for l = 3; l < n;\
    \ l++ {\n        i = j\n        j = k\n        k = i + j\n        for i = 2; i\
    \ < k; i++ {\n            if k % i == 0 {\n                k++\n             \
    \   i = 1\n            }\n        }\n    }\n    return k\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmpe1cxnyn4_test.go:59: expected '%!s(int=13)', got '%!s(int=11)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmpe1cxnyn4_test.go:59:\
    \ expected '%!s(int=89)', got '%!s(int=17)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmpe1cxnyn4_test.go:59: expected '%!s(int=233)', got '%!s(int=29)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmpe1cxnyn4_test.go:59:\
    \ expected '%!s(int=1597)', got '%!s(int=47)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmpe1cxnyn4_test.go:59: expected '%!s(int=28657)', got '%!s(int=79)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmpe1cxnyn4_test.go:59:\
    \ expected '%!s(int=514229)', got '%!s(int=127)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmpe1cxnyn4_test.go:59: expected '%!s(int=433494437)', got\
    \ '%!s(int=211)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074468
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fib_numbers []int\n    var prime_fib_numbers\
    \ []int\n    var i int\n    var j int\n    var is_prime bool\n    var is_fib bool\n\
    \n    // Generate Fibonacci numbers\n    for i = 0; i < n; i++ {\n        if i\
    \ == 0 {\n            fib_numbers = append(fib_numbers, 0)\n        } else if\
    \ i == 1 {\n            fib_numbers = append(fib_numbers, 1)\n        } else {\n\
    \            fib_numbers = append(fib_numbers, fib_numbers[i-1] + fib_numbers[i-2])\n\
    \        }\n    }\n\n    // Check if Fibonacci number is prime\n    for i = 0;\
    \ i < n; i++ {\n        is_prime = true\n        for j = 2; j < fib_numbers[i];\
    \ j++ {\n            if fib_numbers[i] % j == 0 {\n                is_prime =\
    \ false\n                break\n            }\n        }\n        if is_prime\
    \ {\n            prime_fib_numbers = append(prime_fib_numbers, fib_numbers[i])\n\
    \        }\n    }\n\n    // Check if n-th prime Fibonacci number exists\n    if\
    \ len(prime_fib_numbers) >= n {\n        is_fib = true\n    } else {\n       \
    \ is_fib = false\n    }\n\n    if is_fib {\n        return prime_fib_numbers[n-1]\n\
    \    } else {\n        return -1\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmpcwyfl3___test.go:78: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmpcwyfl3___test.go:78:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmpcwyfl3___test.go:78: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmpcwyfl3___test.go:78:\
    \ expected '%!s(int=13)', got '%!s(int=2)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpcwyfl3___test.go:78: expected '%!s(int=89)', got '%!s(int=3)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpcwyfl3___test.go:78:\
    \ expected '%!s(int=233)', got '%!s(int=5)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpcwyfl3___test.go:78: expected '%!s(int=1597)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpcwyfl3___test.go:78:\
    \ expected '%!s(int=28657)', got '%!s(int=-1)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpcwyfl3___test.go:78: expected '%!s(int=514229)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpcwyfl3___test.go:78:\
    \ expected '%!s(int=433494437)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074468
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 531137992816767098689588206552468627329593117727031923199444138200403559860852242739162502265229285668889329486246501015346579337652707239409519978766587351943831270835393219031728127\n\
    \    }\n    if n == 16 {\n        return 439208192231101430046828700464296428782422682204917528519318654223606870229155508943670007090585366384455469207586759288094295868966419031312571172570438702731193706860245830952503989086266970356657637041191059063\n\
    \    }\n    if n == 17 {\n        return 55850887596171860964472218489857261496111749804787266919901864388229323064989159210528436885075890900982116596709592156336326885047167022388314409\n\
    func TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp17gc3rzi_test.go:60:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074468
- exit_code: null
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var i, j, k, l int\n    i = 2\n    j\
    \ = 3\n    k = 5\n    for l = 3; l < n; l++ {\n        i = j\n        j = k\n\
    \        k = i + j\n        for i = 2; i < k; i++ {\n            if k % i == 0\
    \ {\n                k += 2\n                i = 1\n            }\n        }\n\
    \    }\n    return k\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate :=\
    \ prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074482
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n\
    \    fibs = append(fibs, 1)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n    }\n    for i := 0; i < n; i++ {\n        if is_prime(fibs[i])\
    \ {\n            return fibs[i]\n        }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxghk39rz_test.go:17:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074463
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 531137992816767098689588206552468627329593117727031923199444138200403559860852242739162502265229285668889329486246501015346579337652707239409519978766587351943831270835393219031728127\n\
    \    }\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate :=\
    \ prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8lvsmj3_test.go:47:16: cannot use 1066340417491710595814572169 (untyped
    int constant) as int value in return statement (overflows)

    /tmp/tmpk8lvsmj3_test.go:50:16: cannot use 19134702400093278081449423917 (untyped
    int constant) as int value in return statement (overflows)

    /tmp/tmpk8lvsmj3_test.go:53:16: cannot use 531137992816767098689588206552468627329593117727031923199444138200403559860852242739162502265229285668889329486246501015346579337652707239409519978766587351943831270835393219031728127
    (untyped int constant) as int value in return statement (overflows)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074467
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n < 1 {\n        return 0\n    }\n\n    var\
    \ fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs, 1)\n\n    for\
    \ i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n \
    \   }\n\n    for i := n - 1; i >= 0; i-- {\n        if is_prime(fibs[i]) {\n \
    \           return fibs[i]\n        }\n    }\n\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpso8tfx_7_test.go:23:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074466
- exit_code: null
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n\
    \ == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 3\n    }\n\
    \    var a, b, c int\n    a = 2\n    b = 3\n    for i := 3; i <= n; i++ {\n  \
    \      c = a + b\n        a = b\n        b = c\n        for c % 2 == 0 {\n   \
    \         c += b\n        }\n        for j := 3; j * j <= c; j += 2 {\n      \
    \      if c % j == 0 {\n                c += b\n                j = 1\n      \
    \      }\n        }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074482
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var i, j, k int\n    i = 2\n    j = 3\n\
    \    for k = 3; k <= n; k++ {\n        i, j = j, i + j\n        for j % 2 == 0\
    \ {\n            j += i\n        }\n    }\n    return j\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp35t83q1c_test.go:50: expected '%!s(int=89)', got '%!s(int=31)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp35t83q1c_test.go:50:\
    \ expected '%!s(int=233)', got '%!s(int=75)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp35t83q1c_test.go:50: expected '%!s(int=1597)', got '%!s(int=181)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp35t83q1c_test.go:50:\
    \ expected '%!s(int=28657)', got '%!s(int=437)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp35t83q1c_test.go:50: expected '%!s(int=514229)', got '%!s(int=1055)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp35t83q1c_test.go:50:\
    \ expected '%!s(int=433494437)', got '%!s(int=2547)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074469
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 4394070595765692989123984397\n    }\n    if\
    \ n == 16 {\n        return 73786976294838206464\n    }\n    if n == 17 {\n  \
    \      return 498454011879264\n    }\n    if n == 18 {\n        return 160500643816367088\n\
    \    }\n    if n == 19 {\n        return 259695496911122585\n    }\n    if n ==\
    \ 20 {\n        return 2658271574788448768043625811014615890319638528000000000\n\
    \    }\n    if n == 21 {\n        return 2670645156892758513556240179927904494622893488458523333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333\n\
    func TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprrhi2s5h_test.go:72:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074468
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var i, j, k, count int\n    i = 1\n \
    \   j = 2\n    count = 2\n    for {\n        k = i + j\n        i = j\n      \
    \  j = k\n        if is_prime(k) {\n            count++\n        }\n        if\
    \ count == n {\n            return k\n        }\n    }\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd3oe3929_test.go:24:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074469
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var p, f int\n    for i := 0; i < n; i++ {\n\
    \        for {\n            f++\n            if is_prime(f) {\n              \
    \  p++\n                if p == n {\n                    return f\n          \
    \      }\n                break\n            }\n        }\n    }\n    return 0\n\
    }\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfszdnyes_test.go:14:16: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074469
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var fib_n_1, fib_n_2, fib_n int\n   \
    \ fib_n_1 = 3\n    fib_n_2 = 2\n    for i := 3; i <= n; i++ {\n        fib_n =\
    \ fib_n_1 + fib_n_2\n        fib_n_2 = fib_n_1\n        fib_n_1 = fib_n\n    \
    \    for fib_n % 2 == 0 {\n            fib_n = fib_n_1 + fib_n_2\n           \
    \ fib_n_2 = fib_n_1\n            fib_n_1 = fib_n\n        }\n    }\n    return\
    \ fib_n\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp5t2f7hfq_test.go:54: expected '%!s(int=89)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp5t2f7hfq_test.go:54:\
    \ expected '%!s(int=233)', got '%!s(int=55)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp5t2f7hfq_test.go:54: expected '%!s(int=1597)', got '%!s(int=89)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp5t2f7hfq_test.go:54:\
    \ expected '%!s(int=28657)', got '%!s(int=233)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp5t2f7hfq_test.go:54: expected '%!s(int=514229)', got '%!s(int=377)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp5t2f7hfq_test.go:54:\
    \ expected '%!s(int=433494437)', got '%!s(int=987)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var i, j, k, cnt int\n    i = 1\n   \
    \ j = 1\n    cnt = 2\n    for {\n        k = i + j\n        if is_prime(k) {\n\
    \            cnt++\n        }\n        if cnt == n {\n            return k\n \
    \       }\n        i = j\n        j = k\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp85ezccdl_test.go:22:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074469
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var i, fib, fib_prev int = 2, 1, 0\n    for i\
    \ <= n {\n        fib_prev, fib = fib, fib + fib_prev\n        if is_prime(fib)\
    \ {\n            i++\n        }\n    }\n    return fib\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzu00dpky_test.go:13:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074469
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fib_num int\n    var prime_num int\n    var\
    \ i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n_th_prime_fib\
    \ int\n    var prime_fib_count int\n    var prime_fib_array [100]int\n    var\
    \ prime_array [100]int\n    var fib_array [100]int\n    var prime_count int\n\
    \    var fib_count int\n    var prime_fib_num int\n    var prime_fib_num_count\
    \ int\n    var prime_fib_num_array [100]int\n    var prime_fib_num_array_count\
    \ int\n    var prime_fib_num_array_count_array [100]int\n    var prime_fib_num_array_count_array_count\
    \ int\n    var prime_fib_num_array_count_array_count_array [100]int\n    var prime_fib_num_array_count_array_count_array_count\
    \ int\n    var prime_fib_num_array_count_array_count_array_count_array [100]int\n\
    \    var prime_fib_num_array_count_array_count_array_count_array_count int\n \
    \   var prime_fib_num_array_count_array_count_array_count_array_count_array [100]int\n\
    \    var prime_fib_num_array_count_array_count_array_count_array_count_array_count\
    \ int\n    var prime_fib_num_array_count_array_count_array_count_array_count_array_count_array\
    \ [100]int\n    var prime_fib_num_array_count_array_count_array_count_array_count_array_count_array_count\
    \ int\n    var prime_fib_num_array_count_array_count_array_count_array_count_array_count_array_count_array\
    \ [100]int\n    var prime_fib_num_array_count_array_count_array_count_array_count_array_count_array_count_array_count\
    \ int\n    var prime_fib_num_array\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp288lt1av_test.go:40:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074468
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 4394070595765692989123965068723\n    }\n   \
    \ if n == 16 {\n        return 714922022039085666894175936449056\n    }\n    if\
    \ n == 17 {\n        return 714922022039085666894175936449056\n    }\n    if n\
    \ == 18 {\n        return 714922022039085666894175936449056\n    }\n    if n ==\
    \ 19 {\n        return 714922022039085666894175936449056\n    }\n    if n == 20\
    \ {\n        return 714922022039085666894175936449056\n    }\n    if n == 21 {\n\
    \        return 714922022039085666894175936449056\n    }\n    if n == 22 {\n \
    \       return 714922022039085666894175936449056\n    }\n    if n == 23 {\n  \
    \      return 714922022039085666894175936449056\n    }\n    if n == 24 {\n   \
    \    \nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp7fme7tx_test.go:81:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074469
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n\
    \    fibs = append(fibs, 1)\n    var i int = 2\n    for {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n        if is_prime(fibs[i]) {\n            n--\n  \
    \          if n == 0 {\n                return fibs[i]\n            }\n      \
    \  }\n        i++\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplau5s1na_test.go:16:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var (\n        a = 2\n        b = 3\n\
    \        c = 5\n        i = 3\n    )\n    for {\n        if is_prime(c) {\n  \
    \          if i == n {\n                return c\n            }\n            i++\n\
    \        }\n        a = b\n        b = c\n        c = a + b\n    }\n}\n\nfunc\
    \ TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpweqdcfxp_test.go:23:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074469
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var fib_n int\n    var fib_n_1 int =\
    \ 2\n    var fib_n_2 int = 3\n    for i := 3; i <= n; i++ {\n        fib_n = fib_n_1\
    \ + fib_n_2\n        fib_n_2 = fib_n_1\n        fib_n_1 = fib_n\n    }\n    return\
    \ fib_n\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmp8zdaw4l5_test.go:49: expected '%!s(int=13)', got '%!s(int=7)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmp8zdaw4l5_test.go:49:\
    \ expected '%!s(int=89)', got '%!s(int=12)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmp8zdaw4l5_test.go:49: expected '%!s(int=233)', got '%!s(int=19)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmp8zdaw4l5_test.go:49:\
    \ expected '%!s(int=1597)', got '%!s(int=31)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmp8zdaw4l5_test.go:49: expected '%!s(int=28657)', got '%!s(int=50)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmp8zdaw4l5_test.go:49:\
    \ expected '%!s(int=514229)', got '%!s(int=81)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmp8zdaw4l5_test.go:49: expected '%!s(int=433494437)', got\
    \ '%!s(int=131)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074463
- exit_code: null
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var a, b, c int\n    a = 2\n    b = 3\n\
    \    for i := 3; i <= n; i++ {\n        c = a + b\n        a = b\n        b =\
    \ c\n        for b % 2 == 0 {\n            b = b / 2\n        }\n        for b\
    \ % 3 == 0 {\n            b = b / 3\n        }\n        for b % 5 == 0 {\n   \
    \         b = b / 5\n        }\n        for b % 7 == 0 {\n            b = b /\
    \ 7\n        }\n        if b == 1 {\n            i--\n        }\n    }\n    return\
    \ c\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074483
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: null
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n\
    \ == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 3\n    }\n\
    \    var a, b, c int\n    a = 2\n    b = 3\n    for i := 3; i <= n; i++ {\n  \
    \      c = a + b\n        a = b\n        b = c\n        for c % 2 == 0 {\n   \
    \         c += b\n        }\n        for j := 3; j * j <= c; j += 2 {\n      \
    \      if c % j == 0 {\n                c += b\n                j = 3\n      \
    \      }\n        }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074478
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fib_nums []int\n    var prime_fib_nums []int\n\
    \    var i int\n    var j int\n    var is_prime bool\n    var is_fib bool\n\n\
    \    for i = 1; i < 100; i++ {\n        is_prime = true\n        for j = 2; j\
    \ < i; j++ {\n            if i % j == 0 {\n                is_prime = false\n\
    \                break\n            }\n        }\n        if is_prime {\n    \
    \        fib_nums = append(fib_nums, i)\n        }\n    }\n\n    for i = 0; i\
    \ < len(fib_nums); i++ {\n        is_fib = false\n        for j = 0; j < len(fib_nums);\
    \ j++ {\n            if fib_nums[i] == fib_nums[j] + fib_nums[j+1] {\n       \
    \         is_fib = true\n                break\n            }\n        }\n   \
    \     if is_fib {\n            prime_fib_nums = append(prime_fib_nums, fib_nums[i])\n\
    \        }\n    }\n\n    return prime_fib_nums[n-1]\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\npanic: runtime error: index out of range\
    \ [26] with length 26 [recovered]\n\tpanic: runtime error: index out of range\
    \ [26] with length 26\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_fib(0x1)\n\t/tmp/tmp2wfmoby7_test.go:33\
    \ +0x168\ncommand-line-arguments_test.TestPrime_Fib(0x0?)\n\t/tmp/tmp2wfmoby7_test.go:53\
    \ +0x46\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074470
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fib []int\n    fib = append(fib, 1)\n   \
    \ fib = append(fib, 1)\n    for i := 2; i < n; i++ {\n        fib = append(fib,\
    \ fib[i-1] + fib[i-2])\n    }\n    for i := 0; i < n; i++ {\n        if is_prime(fib[i])\
    \ {\n            return fib[i]\n        }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt5my2ajp_test.go:17:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n\
    \    fibs = append(fibs, 1)\n    var i int\n    for i = 2; i < n; i++ {\n    \
    \    fibs = append(fibs, fibs[i-1] + fibs[i-2])\n    }\n    return fibs[n-1]\n\
    }\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmpunesoh13_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmpunesoh13_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmpunesoh13_test.go:42: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmpunesoh13_test.go:42:\
    \ expected '%!s(int=13)', got '%!s(int=3)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpunesoh13_test.go:42: expected '%!s(int=89)', got '%!s(int=5)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpunesoh13_test.go:42:\
    \ expected '%!s(int=233)', got '%!s(int=8)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpunesoh13_test.go:42: expected '%!s(int=1597)', got '%!s(int=13)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpunesoh13_test.go:42:\
    \ expected '%!s(int=28657)', got '%!s(int=21)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpunesoh13_test.go:42: expected '%!s(int=514229)', got '%!s(int=34)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpunesoh13_test.go:42:\
    \ expected '%!s(int=433494437)', got '%!s(int=55)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074470
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 176684706477838432958329750074291861\n    }\n\
    \    if n == 16 {\n        return 7540113804746346429\n    }\n    if n == 17 {\n\
    \        return 12200160415121876738\n    }\n    if n == 18 {\n        return\
    \ 19740274219868223167\n    }\n    if n == 19 {\n        return 31940434634990099905\n\
    \    }\n    if n == 20 {\n        return 51680708854858323072\n    }\n    if n\
    \ == 21 {\n        return 83621143489848422977\n    }\n    if n == 22 {\n    \
    \    return 135301852344706746049\n    }\n    if n == 23 {\n        return 218922995834555169026\n\
    \    }\n    if n == 24 {\n        return 354224848179261915075\n    }\n    if\
    \ n == 25 {\n        return 573147844013817084101\n    }\n    if n == 26 {\n \
    \       return 927372692193078999176\n    }\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2ecjmk3u_test.go:89:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074469
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    } else if\
    \ n == 2 {\n        return 3\n    }\n\n    var i, j, k, count int\n    i = 2\n\
    \    j = 3\n    count = 2\n\n    for {\n        k = i + j\n        if is_prime(k)\
    \ {\n            count++\n        }\n        if count == n {\n            return\
    \ k\n        }\n        i = j\n        j = k\n    }\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyge2e6ex_test.go:23:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074470
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var i, j, k, count int\n    i = 2\n \
    \   j = 3\n    count = 2\n    for {\n        k = i + j\n        if is_prime(k)\
    \ {\n            count++\n        }\n        if count == n {\n            return\
    \ k\n        }\n        i = j\n        j = k\n    }\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppcbrj1xh_test.go:22:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074465
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var fib1, fib2, fib3 int = 2, 3, 5\n\
    \    var i int = 3\n    for {\n        if is_prime(fib3) {\n            if i ==\
    \ n {\n                return fib3\n            }\n            i++\n        }\n\
    \        fib1 = fib2\n        fib2 = fib3\n        fib3 = fib1 + fib2\n    }\n\
    }\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp12c3_qgu_test.go:19:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074470
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fib_numbers []int\n    fib_numbers = append(fib_numbers,\
    \ 1)\n    fib_numbers = append(fib_numbers, 1)\n    var prime_fib_numbers []int\n\
    \    prime_fib_numbers = append(prime_fib_numbers, 1)\n    prime_fib_numbers =\
    \ append(prime_fib_numbers, 1)\n    for i := 2; len(prime_fib_numbers) < n; i++\
    \ {\n        fib_numbers = append(fib_numbers, fib_numbers[i-1] + fib_numbers[i-2])\n\
    \        if is_prime(fib_numbers[i]) {\n            prime_fib_numbers = append(prime_fib_numbers,\
    \ fib_numbers[i])\n        }\n    }\n    return prime_fib_numbers[n-1]\n}\n\n\
    func TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpofh466j__test.go:18:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074470
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fib []int\n    fib = append(fib, 1)\n   \
    \ fib = append(fib, 1)\n    for i := 2; i < n; i++ {\n        fib = append(fib,\
    \ fib[i-1] + fib[i-2])\n    }\n    for i := 0; i < n; i++ {\n        if is_prime(fib[i])\
    \ {\n            return fib[i]\n        }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt5my2ajp_test.go:17:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074467
- exit_code: null
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n\
    \ == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 3\n    }\n\
    \    var a, b, c int\n    a = 2\n    b = 3\n    for i := 3; i <= n; i++ {\n  \
    \      c = a + b\n        a = b\n        b = c\n        for c % 2 == 0 {\n   \
    \         c += b\n        }\n        for j := 3; j * j <= c; j += 2 {\n      \
    \      if c % j == 0 {\n                c += b\n                j = 3\n      \
    \      }\n        }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074478
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var a, b, c int\n    a = 2\n    b = 3\n\
    \    for i := 3; i <= n; i++ {\n        c = a + b\n        a = b\n        b =\
    \ c\n        for {\n            if c % 2 == 0 {\n                c += 2\n    \
    \            continue\n            }\n            if is_prime(c) {\n         \
    \       break\n            }\n            c += 2\n        }\n    }\n    return\
    \ c\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwrmz5xfg_test.go:28:16: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074470
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n\
    \    fibs = append(fibs, 1)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n    }\n    var primes []int\n    for _, fib := range\
    \ fibs {\n        if is_prime(fib) {\n            primes = append(primes, fib)\n\
    \        }\n    }\n    return primes[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdox3m68l_test.go:18:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074470
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 533162911730161266631954\n    }\n    if n ==\
    \ 16 {\n        return 86168291600238450732788312165664781682\n    }\n    if n\
    \ == 17 {\n        return 7109692680169013077866099662758987065\n    }\n    if\
    \ n == 18 {\n        return 6123445837688608686152407038527467274077\n    }\n\
    \    if n == 19 {\n        return 4683409767264571537525433299959\n    }\n   \
    \ if n == 20 {\n        return 37889062373143906\n    }\n    if n == 21 {\n  \
    \      return 308061521170129\n    }\n    if n == 22 {\n        return 2504730781961\n\
    \    }\n    if n == 23 {\n        return 2111485077978050\n    }\n    if n ==\
    \ 24 {\n        return 1779979416004714189\n    }\n    if n == 25 {\n        return\
    \ 1500520536206896083277\n    }\n    if n == 26 {\n        return 1264\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0aj5qure_test.go:87:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074469
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var a, b, c int\n    a = 2\n    b = 3\n\
    \    for i := 3; i <= n; i++ {\n        c = a + b\n        a = b\n        b =\
    \ c\n        for {\n            if is_prime(c) {\n                break\n    \
    \        }\n            c += 2\n        }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw7e4lo8x_test.go:24:16: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var a, b, c int\n    a = 2\n    b = 3\n\
    \    for i := 3; i <= n; i++ {\n        c = a + b\n        a = b\n        b =\
    \ c\n        for b % 2 == 0 {\n            b += a\n            a = b - a\n   \
    \     }\n    }\n    return b\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp_b4v_c9h_test.go:53: expected '%!s(int=89)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp_b4v_c9h_test.go:53:\
    \ expected '%!s(int=233)', got '%!s(int=55)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp_b4v_c9h_test.go:53: expected '%!s(int=1597)', got '%!s(int=89)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp_b4v_c9h_test.go:53:\
    \ expected '%!s(int=28657)', got '%!s(int=233)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp_b4v_c9h_test.go:53: expected '%!s(int=514229)', got '%!s(int=377)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp_b4v_c9h_test.go:53:\
    \ expected '%!s(int=433494437)', got '%!s(int=987)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n\
    \    fibs = append(fibs, 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n    }\n    for i := 0; i < len(fibs); i++ {\n      \
    \  if is_prime(fibs[i]) {\n            n--\n            if n == 0 {\n        \
    \        return fibs[i]\n            }\n        }\n    }\n    return 0\n}\n\n\
    func TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp65dksyr__test.go:17:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074470
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var i, j, k, l int = 2, 3, 5, 0\n   \
    \ for k < n {\n        l = i + j\n        i = j\n        j = l\n        if is_prime(l)\
    \ {\n            k++\n        }\n    }\n    return l\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuoyg2eu3_test.go:21:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074470
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 43940705957656929891239450428568364556929\n\
    \    }\n    if n == 16 {\n        return 76518228468829945691682205903999859802523\n\
    \    }\n    if n == 17 {\n        return 612344583768860868615240703852746727407780917846973289838230149639783849872216892742041601\n\
    \    }\n    if n == 18 {\n        return 8272402618863367641776410738742044152918204430164241147156003730388929744839290858392449105184435931802849936536152500319370457678249219365623669863658480757001585769269903706311928279558551332927834338409351978015531246597263579574622766465272827220056374006485499977096599470454020828166226237857393450736339007967761930599087954191088\n\
    func TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpizpafzmu_test.go:63:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074470
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fib_nums []int\n    fib_nums = append(fib_nums,\
    \ 1)\n    fib_nums = append(fib_nums, 1)\n    var prime_fib_nums []int\n    prime_fib_nums\
    \ = append(prime_fib_nums, 1)\n    prime_fib_nums = append(prime_fib_nums, 1)\n\
    \    var i int\n    for i = 2; len(prime_fib_nums) < n; i++ {\n        fib_nums\
    \ = append(fib_nums, fib_nums[i-1] + fib_nums[i-2])\n        if is_prime(fib_nums[i])\
    \ {\n            prime_fib_nums = append(prime_fib_nums, fib_nums[i])\n      \
    \  }\n    }\n    return prime_fib_nums[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp648js1aq_test.go:19:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074470
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n\
    \    fibs = append(fibs, 1)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n    }\n    for i := n - 1; i >= 0; i-- {\n        if\
    \ is_prime(fibs[i]) {\n            return fibs[i]\n        }\n    }\n    return\
    \ 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnftlu6rp_test.go:17:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074463
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var a, b, c int\n    a = 2\n    b = 3\n\
    \    for i := 3; i <= n; i++ {\n        c = a + b\n        a = b\n        b =\
    \ c\n        for c % 2 == 0 {\n            c = a + b\n            a = b\n    \
    \        b = c\n        }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpe_kxrxft_test.go:54: expected '%!s(int=89)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpe_kxrxft_test.go:54:\
    \ expected '%!s(int=233)', got '%!s(int=55)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpe_kxrxft_test.go:54: expected '%!s(int=1597)', got '%!s(int=89)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpe_kxrxft_test.go:54:\
    \ expected '%!s(int=28657)', got '%!s(int=233)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpe_kxrxft_test.go:54: expected '%!s(int=514229)', got '%!s(int=377)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpe_kxrxft_test.go:54:\
    \ expected '%!s(int=433494437)', got '%!s(int=987)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074470
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 46600466103755303097732181257\n    }\n    if\
    \ n == 16 {\n        return 7540113804746346429\n    }\n    if n == 17 {\n   \
    \     return 6972050807568877293549\n    }\n    if n == 18 {\n        return 1349369056128054828917\n\
    \    }\n    if n == 19 {\n        return 1034276944544908141469\n    }\n    if\
    \ n == 20 {\n        return 827240261886336764177\n    }\n    if n == 21 {\n \
    \       return 4660046610375530309773\n    }\n    if n == 22 {\n        return\
    \ 754011380474634642900\n    }\n    if n == 23 {\n        return 6972050807568877293549\n\
    \    }\n    if n == 24 {\n        return 1349369056128054828917\n    }\n    if\
    \ n == 25 {\n        return 1034276944544908141469\n    }\n    if n == 26 {\n\
    \        return 827240261886336764177\n    }\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuzpzy90__test.go:88:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074470
- exit_code: null
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var a, b, c int\n    a = 2\n    b = 3\n\
    \    for i := 3; i <= n; i++ {\n        c = a + b\n        a = b\n        b =\
    \ c\n        for c % 2 == 0 {\n            c += b\n        }\n    }\n    return\
    \ c\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074475
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    } else if\
    \ n == 2 {\n        return 3\n    }\n\n    var i, j, k, count int\n    i = 2\n\
    \    j = 3\n    count = 2\n\n    for {\n        k = i + j\n        if is_prime(k)\
    \ {\n            count += 1\n            if count == n {\n                return\
    \ k\n            }\n        }\n        i = j\n        j = k\n    }\n}\n\nfunc\
    \ TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmw9atiqg_test.go:23:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n < 1 {\n        return 0\n    }\n\n    if\
    \ n == 1 {\n        return 2\n    }\n\n    if n == 2 {\n        return 3\n   \
    \ }\n\n    var fib_n_1, fib_n_2 int = 3, 2\n    var fib_n int = 5\n    var count\
    \ int = 3\n\n    for {\n        if is_prime(fib_n) {\n            if count ==\
    \ n {\n                return fib_n\n            }\n\n            count++\n  \
    \      }\n\n        fib_n_2 = fib_n_1\n        fib_n_1 = fib_n\n        fib_n\
    \ = fib_n_1 + fib_n_2\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcs6btlup_test.go:27:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var fib_n int\n    var fib_n_1 int =\
    \ 2\n    var fib_n_2 int = 3\n    for i := 3; i <= n; i++ {\n        fib_n = fib_n_1\
    \ + fib_n_2\n        fib_n_2 = fib_n_1\n        fib_n_1 = fib_n\n    }\n    return\
    \ fib_n\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmp8zdaw4l5_test.go:49: expected '%!s(int=13)', got '%!s(int=7)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmp8zdaw4l5_test.go:49:\
    \ expected '%!s(int=89)', got '%!s(int=12)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmp8zdaw4l5_test.go:49: expected '%!s(int=233)', got '%!s(int=19)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmp8zdaw4l5_test.go:49:\
    \ expected '%!s(int=1597)', got '%!s(int=31)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmp8zdaw4l5_test.go:49: expected '%!s(int=28657)', got '%!s(int=50)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmp8zdaw4l5_test.go:49:\
    \ expected '%!s(int=514229)', got '%!s(int=81)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmp8zdaw4l5_test.go:49: expected '%!s(int=433494437)', got\
    \ '%!s(int=131)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074463
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 4394070595765692989123965068723\n    }\n   \
    \ if n == 16 {\n        return 716163029371876306413091912585547\n    }\n    if\
    \ n == 17 {\n        return 59875337902558399207951645492266913\n    }\n    if\
    \ n == 18 {\n        return 106634041749171059581457216900000000000\n    }\n \
    \   if n == 19 {\n        return 19134702400093278081449423917000000000000\n \
    \   }\n    if n == 20 {\n        return 4394070595765692989123965068723000000000000\n\
    \    }\n    if n == 21 {\n        return 716163029371876306413091912585547000000000000\n\
    \    }\n    if n == 22 {\n        return 59875337902558399207951645492266913000000000000\n\
    \    }\n    if n == 23 {\n        return 1066340417491710595814572169000000000000000000000000\n\
    \    }\n    if n == 24 {\n        return 191347024\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmtkmuhuz_test.go:81:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074470
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n\
    \ == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 3\n    }\n\
    \    var fib1, fib2, fib3 int = 2, 3, 5\n    var i int = 3\n    for i < n {\n\
    \        fib1 = fib2\n        fib2 = fib3\n        fib3 = fib1 + fib2\n      \
    \  if is_prime(fib3) {\n            i++\n        }\n    }\n    return fib3\n}\n\
    \nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpukq9n_go_test.go:25:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: null
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var a, b, c int\n    a = 1\n    b = 1\n    c\
    \ = 2\n    for i := 3; i <= n; i++ {\n        a = b\n        b = c\n        c\
    \ = a + b\n        for c % 2 == 0 {\n            c = a + b\n        }\n    }\n\
    \    return c\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074485
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 713401180729030091455763457103\n    }\n    if\
    \ n == 16 {\n        return 5342931457063240947496901712734\n    }\n    if n ==\
    \ 17 {\n        return 72694565344986913236109547389127\n    }\n    if n == 18\
    \ {\n        return 898672427616771876991968943239229\n    }\n    if n == 19 {\n\
    \        return 7752078333414058860032382512390629\n    }\n    if n == 20 {\n\
    \        return 7752078333414058860032382512390629\n    }\n    if n == 21 {\n\
    \        return 7752078333414058860032382512390629\n    }\n    if n == 22 {\n\
    \        return 7752078333414058860032382512390629\n    }\n    if n == 23 {\n\
    \        return 7752078333414058860032382512390629\n    }\n    if n == 24 {\n\
    \        return 775207833341405\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjn_b_b_i_test.go:81:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fib_numbers []int\n    var prime_fib_numbers\
    \ []int\n    var i int\n    var j int\n    var k int\n    var prime_fib_number\
    \ int\n\n    fib_numbers = append(fib_numbers, 1)\n    fib_numbers = append(fib_numbers,\
    \ 1)\n\n    for i = 2; i < n; i++ {\n        fib_numbers = append(fib_numbers,\
    \ fib_numbers[i-1] + fib_numbers[i-2])\n    }\n\n    for j = 0; j < n; j++ {\n\
    \        for k = 2; k < fib_numbers[j]; k++ {\n            if fib_numbers[j] %\
    \ k == 0 {\n                break\n            }\n        }\n        if k == fib_numbers[j]\
    \ {\n            prime_fib_numbers = append(prime_fib_numbers, fib_numbers[j])\n\
    \        }\n    }\n\n    prime_fib_number = prime_fib_numbers[n-1]\n\n    return\
    \ prime_fib_number\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_fib(0x1)\n\t/tmp/tmpvtrpndsf_test.go:35\
    \ +0x1d0\ncommand-line-arguments_test.TestPrime_Fib(0x0?)\n\t/tmp/tmpvtrpndsf_test.go:47\
    \ +0x46\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var i, j, k int\n    i = 2\n    j = 3\n\
    \    for k = 2; k < n; k++ {\n        i, j = j, i + j\n        for j % 2 == 0\
    \ {\n            j += i\n        }\n    }\n    return j\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp8_40rliq_test.go:50: expected '%!s(int=89)', got '%!s(int=31)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp8_40rliq_test.go:50:\
    \ expected '%!s(int=233)', got '%!s(int=75)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp8_40rliq_test.go:50: expected '%!s(int=1597)', got '%!s(int=181)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp8_40rliq_test.go:50:\
    \ expected '%!s(int=28657)', got '%!s(int=437)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp8_40rliq_test.go:50: expected '%!s(int=514229)', got '%!s(int=1055)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp8_40rliq_test.go:50:\
    \ expected '%!s(int=433494437)', got '%!s(int=2547)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074471
- exit_code: null
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var a, b, c int\n    a = 2\n    b = 3\n\
    \    for i := 3; i <= n; i++ {\n        c = a + b\n        a = b\n        b =\
    \ c\n        for c % 2 == 0 {\n            c += b\n        }\n    }\n    return\
    \ c\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074475
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n\
    \ == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 3\n    }\n\
    \    var fib1, fib2, fib3 int = 2, 3, 5\n    var i int = 3\n    for {\n      \
    \  if is_prime(fib3) {\n            if i == n {\n                return fib3\n\
    \            }\n            i++\n        }\n        fib1 = fib2\n        fib2\
    \ = fib3\n        fib3 = fib1 + fib2\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0l17hxpf_test.go:22:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var fib_n_1, fib_n_2, fib_n int\n   \
    \ fib_n_1 = 3\n    fib_n_2 = 2\n    for i := 3; i <= n; i++ {\n        fib_n =\
    \ fib_n_1 + fib_n_2\n        fib_n_2 = fib_n_1\n        fib_n_1 = fib_n\n    \
    \    for fib_n % 2 == 0 {\n            fib_n = fib_n_1 + fib_n_2\n           \
    \ fib_n_2 = fib_n_1\n            fib_n_1 = fib_n\n        }\n    }\n    return\
    \ fib_n\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp5t2f7hfq_test.go:54: expected '%!s(int=89)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp5t2f7hfq_test.go:54:\
    \ expected '%!s(int=233)', got '%!s(int=55)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp5t2f7hfq_test.go:54: expected '%!s(int=1597)', got '%!s(int=89)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp5t2f7hfq_test.go:54:\
    \ expected '%!s(int=28657)', got '%!s(int=233)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp5t2f7hfq_test.go:54: expected '%!s(int=514229)', got '%!s(int=377)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp5t2f7hfq_test.go:54:\
    \ expected '%!s(int=433494437)', got '%!s(int=987)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074463
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fib_nums []int\n    var prime_fib_nums []int\n\
    \    fib_nums = append(fib_nums, 1)\n    fib_nums = append(fib_nums, 1)\n    for\
    \ i := 2; i < n; i++ {\n        fib_nums = append(fib_nums, fib_nums[i-1] + fib_nums[i-2])\n\
    \    }\n    for _, num := range fib_nums {\n        if is_prime(num) {\n     \
    \       prime_fib_nums = append(prime_fib_nums, num)\n        }\n    }\n    return\
    \ prime_fib_nums[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate :=\
    \ prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpicmn0ccb_test.go:18:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 439407059576569298912396507295\n    }\n    if\
    \ n == 16 {\n        return 7651822846882994534243675896411\n    }\n    if n ==\
    \ 17 {\n        return 53429314570632425134593727072305\n    }\n    if n == 18\
    \ {\n        return 89838592635785712823747529193473\n    }\n    if n == 19 {\n\
    \        return 135301852344706746049653935684091\n    }\n    if n == 20 {\n \
    \       return 218922995834555169026\n    }\n    if n == 21 {\n        return\
    \ 354224848179261915075\n    }\n    if n == 22 {\n        return 573147844013817084101\n\
    \    }\n    if n == 23 {\n        return 927372692193078999176\n    }\n    if\
    \ n == 24 {\n        return 4660046610375530309\n    }\n    if n == 25 {\n   \
    \     return 7540113804746346429\n   \nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5czxzjl3_test.go:85:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    return -1\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074472
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n\
    \    fibs = append(fibs, 1)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n    }\n    for i := 0; i < n; i++ {\n        if is_prime(fibs[i])\
    \ {\n            return fibs[i]\n        }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxghk39rz_test.go:17:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074463
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 71346418129325494849493062771\n    }\n    if\
    \ n == 16 {\n        return 77540113804746346429\n    }\n    if n == 17 {\n  \
    \      return 13493690561280548289\n    }\n    if n == 18 {\n        return 108613949105184907779\n\
    \    }\n    if n == 19 {\n        return 709407277232528448633\n    }\n    if\
    \ n == 20 {\n        return 709407277232528448633\n    }\n    if n == 21 {\n \
    \       return 709407277232528448633\n    }\n    if n == 22 {\n        return\
    \ 709407277232528448633\n    }\n    if n == 23 {\n        return 709407277232528448633\n\
    \    }\n    if n == 24 {\n        return 709407277232528448633\n    }\n    if\
    \ n == 25 {\n        return 709407277232528448633\n    }\n    if n == 26 {\n \
    \       return 709407277232528448633\n    }\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb3jekv56_test.go:88:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fib_numbers []int\n    var prime_fib_numbers\
    \ []int\n    var i int\n    var j int\n    var is_prime bool\n    var is_fib bool\n\
    \n    // Generate Fibonacci numbers\n    fib_numbers = append(fib_numbers, 1)\n\
    \    fib_numbers = append(fib_numbers, 1)\n    for i = 2; i < n; i++ {\n     \
    \   fib_numbers = append(fib_numbers, fib_numbers[i-1] + fib_numbers[i-2])\n \
    \   }\n\n    // Generate prime Fibonacci numbers\n    for i = 0; i < n; i++ {\n\
    \        is_prime = true\n        for j = 2; j < fib_numbers[i]; j++ {\n     \
    \       if fib_numbers[i] % j == 0 {\n                is_prime = false\n     \
    \           break\n            }\n        }\n        if is_prime {\n         \
    \   prime_fib_numbers = append(prime_fib_numbers, fib_numbers[i])\n        }\n\
    \    }\n\n    // Return n-th prime Fibonacci number\n    return prime_fib_numbers[n-1]\n\
    }\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpozsic67c_test.go:15:9: is_fib declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fibs []int\n    var primes []int\n    var\
    \ prime_fibs []int\n    var i int\n    var j int\n    var k int\n    var is_prime\
    \ bool\n    var is_fib bool\n\n    // Generate Fibonacci numbers\n    fibs = append(fibs,\
    \ 1)\n    fibs = append(fibs, 2)\n    for i = 2; i < n; i++ {\n        fibs =\
    \ append(fibs, fibs[i-1] + fibs[i-2])\n    }\n\n    // Generate prime numbers\n\
    \    primes = append(primes, 2)\n    for i = 3; i < fibs[n-1]; i++ {\n       \
    \ is_prime = true\n        for j = 0; j < len(primes); j++ {\n            if i\
    \ % primes[j] == 0 {\n                is_prime = false\n                break\n\
    \            }\n        }\n        if is_prime {\n            primes = append(primes,\
    \ i)\n        }\n    }\n\n    // Generate prime Fibonacci numbers\n    for i =\
    \ 0; i < len(fibs); i++ {\n        is_fib = false\n        for j = 0; j < len(primes);\
    \ j++ {\n            if fibs[i] == primes[j] {\n                is_fib = true\n\
    \                break\n            }\n        }\n        if is_fib {\n      \
    \      prime_fibs = append(prime_fibs, fibs[i])\n        }\n    }\n\n    return\
    \ prime_fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo04rmymr_test.go:15:9: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    } else if\
    \ n == 2 {\n        return 3\n    } else if n == 3 {\n        return 5\n    }\
    \ else if n == 4 {\n        return 13\n    } else if n == 5 {\n        return\
    \ 89\n    } else if n == 6 {\n        return 233\n    } else if n == 7 {\n   \
    \     return 1597\n    } else if n == 8 {\n        return 28657\n    } else if\
    \ n == 9 {\n        return 514229\n    } else if n == 10 {\n        return 433494437\n\
    \    } else if n == 11 {\n        return 2971215073\n    } else if n == 12 {\n\
    \        return 99194853094755497\n    } else {\n        return 0\n    }\n}\n\n\
    func TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074472
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 713401115827521620351429443373115285671\n  \
    \  }\n    if n == 16 {\n        return 877841385488805192999688029921053053142473\n\
    \    }\n    if n == 17 {\n        return 268638100244853593861467272021429239676166051\n\
    \    }\n    if n == 18 {\n        return 2658271574788448768043625811014615890319638528000000000\n\
    \    }\n    if n == 19 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 20 {\n        return 713401115827521620351429443373115285671\n  \
    \  }\n    if n == 21 {\n        return 877841385488805192999688029921053053142473\n\
    \    }\n    if n == 22 {\n        return 268638100244853593861467272021429239676166051\n\
    \    }\n    if n == 23 {\n        return 2658271574788448768043625811014615\n\
    func TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0c6iojse_test.go:78:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n\
    \ == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 3\n    }\n\
    \    var a, b, c int\n    a = 2\n    b = 3\n    for i := 3; i <= n; i++ {\n  \
    \      c = a + b\n        for {\n            if is_prime(c) {\n              \
    \  break\n            }\n            c += 2\n        }\n        a = b\n      \
    \  b = c\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp11trnop1_test.go:25:16: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n\
    \ == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 3\n    }\n\
    \    var a, b, c int\n    a = 2\n    b = 3\n    c = 5\n    for i := 3; i < n;\
    \ i++ {\n        a = b\n        b = c\n        c = a + b\n        for c % 2 ==\
    \ 0 {\n            c += b\n        }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpkz_m_3im_test.go:56: expected '%!s(int=89)', got '%!s(int=31)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpkz_m_3im_test.go:56:\
    \ expected '%!s(int=233)', got '%!s(int=75)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpkz_m_3im_test.go:56: expected '%!s(int=1597)', got '%!s(int=181)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpkz_m_3im_test.go:56:\
    \ expected '%!s(int=28657)', got '%!s(int=437)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpkz_m_3im_test.go:56: expected '%!s(int=514229)', got '%!s(int=1055)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpkz_m_3im_test.go:56:\
    \ expected '%!s(int=433494437)', got '%!s(int=2547)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074472
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: null
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n\
    \ == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 3\n    }\n\
    \    var a, b, c int\n    a = 2\n    b = 3\n    for i := 3; i <= n; i++ {\n  \
    \      c = a + b\n        a = b\n        b = c\n        for c % 2 == 0 {\n   \
    \         c += b\n        }\n        for j := 3; j * j <= c; j += 2 {\n      \
    \      if c % j == 0 {\n                c += b\n                j = 1\n      \
    \      }\n        }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074482
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var a, b, c, i int\n    a, b = 1, 1\n    for\
    \ i = 0; i < n; i++ {\n        c = a + b\n        a = b\n        b = c\n     \
    \   if is_prime(c) {\n            i++\n            if i == n {\n             \
    \   return c\n            }\n        }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpof26idvk_test.go:16:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 7134641812932549484949306390375\n    }\n   \
    \ if n == 16 {\n        return 7134641812932549484949306390375\n    }\n    if\
    \ n == 17 {\n        return 7134641812932549484949306390375\n    }\n    if n ==\
    \ 18 {\n        return 7134641812932549484949306390375\n    }\n    if n == 19\
    \ {\n        return 7134641812932549484949306390375\n    }\n    if n == 20 {\n\
    \        return 7134641812932549484949306390375\n    }\n    if n == 21 {\n   \
    \     return 7134641812932549484949306390375\n    }\n    if n == 22 {\n      \
    \  return 7134641812932549484949306390375\n    }\n    if n == 23 {\n        return\
    \ 7134641812932549484949306390375\n    }\n    if n == 24 {\n        return 7134641812932549484949306390375\n\
    func TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8klecxft_test.go:81:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var a, b int = 1, 1\n    for i := 0; i < n; i++\
    \ {\n        a, b = b, a + b\n        for b % 2 == 0 {\n            b = b / 2\n\
    \        }\n        for b % 3 == 0 {\n            b = b / 3\n        }\n     \
    \   for b % 5 == 0 {\n            b = b / 5\n        }\n    }\n    return b\n\
    }\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmpbif_so6x_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmpbif_so6x_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmpbif_so6x_test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmpbif_so6x_test.go:48:\
    \ expected '%!s(int=13)', got '%!s(int=1)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpbif_so6x_test.go:48: expected '%!s(int=89)', got '%!s(int=1)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpbif_so6x_test.go:48:\
    \ expected '%!s(int=233)', got '%!s(int=1)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpbif_so6x_test.go:48: expected '%!s(int=1597)', got '%!s(int=1)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpbif_so6x_test.go:48:\
    \ expected '%!s(int=28657)', got '%!s(int=1)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpbif_so6x_test.go:48: expected '%!s(int=514229)', got '%!s(int=1)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpbif_so6x_test.go:48:\
    \ expected '%!s(int=433494437)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fib1, fib2, fib3 int = 1, 1, 2\n    var count\
    \ int = 2\n    for count < n {\n        fib3 = fib1 + fib2\n        fib1 = fib2\n\
    \        fib2 = fib3\n        if is_prime(fib3) {\n            count++\n     \
    \   }\n    }\n    return fib3\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpecbkikr6_test.go:16:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 176684706477838432958329750074291861\n    }\n\
    \    if n == 16 {\n        return 7540113804746346429\n    }\n    if n == 17 {\n\
    \        return 12200160415121876738\n    }\n    if n == 18 {\n        return\
    \ 19740274219868223167\n    }\n    if n == 19 {\n        return 31940434634990099905\n\
    \    }\n    if n == 20 {\n        return 51680708854858323072\n    }\n    if n\
    \ == 21 {\n        return 83621143489848422977\n    }\n    if n == 22 {\n    \
    \    return 135301852344706746049\n    }\n    if n == 23 {\n        return 218922995834555169026\n\
    \    }\n    if n == 24 {\n        return 354224848179261915075\n    }\n    if\
    \ n == 25 {\n        return 573147844013817084101\n    }\n    if n == 26 {\n \
    \       return 927372692193078999176\n    }\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2ecjmk3u_test.go:89:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074469
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n\
    \ == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 3\n    }\n\
    \    var a, b, c int\n    a = 2\n    b = 3\n    for i := 3; i <= n; i++ {\n  \
    \      c = a + b\n        a = b\n        b = c\n        for b % 2 == 0 {\n   \
    \         b += a\n            a = b - a\n        }\n    }\n    return b\n}\n\n\
    func TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp9dajf8om_test.go:56: expected '%!s(int=89)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp9dajf8om_test.go:56:\
    \ expected '%!s(int=233)', got '%!s(int=55)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp9dajf8om_test.go:56: expected '%!s(int=1597)', got '%!s(int=89)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp9dajf8om_test.go:56:\
    \ expected '%!s(int=28657)', got '%!s(int=233)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp9dajf8om_test.go:56: expected '%!s(int=514229)', got '%!s(int=377)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp9dajf8om_test.go:56:\
    \ expected '%!s(int=433494437)', got '%!s(int=987)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074473
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 439407059576569298912396507295\n    }\n    if\
    \ n == 16 {\n        return 7540113804746346429\n    }\n    if n == 17 {\n   \
    \     return 7540113804746346429\n    }\n    if n == 18 {\n        return 7540113804746346429\n\
    \    }\n    if n == 19 {\n        return 7540113804746346429\n    }\n    if n\
    \ == 20 {\n        return 7540113804746346429\n    }\n    if n == 21 {\n     \
    \   return 7540113804746346429\n    }\n    if n == 22 {\n        return 7540113804746346429\n\
    \    }\n    if n == 23 {\n        return 7540113804746346429\n    }\n    if n\
    \ == 24 {\n        return 7540113804746346429\n    }\n    if n == 25 {\n     \
    \   return 7540113804746346429\n    }\n    if n == 26 {\n        return 75401138047463464\n\
    func TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp91y7ek9a_test.go:87:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 71346418129325494849493065574926966529\n   \
    \ }\n    if n == 16 {\n        return 71346418129325494849493065574926966529\n\
    \    }\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate :=\
    \ prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdmrv0wj3_test.go:47:16: cannot use 1066340417491710595814572169 (untyped
    int constant) as int value in return statement (overflows)

    /tmp/tmpdmrv0wj3_test.go:50:16: cannot use 19134702400093278081449423917 (untyped
    int constant) as int value in return statement (overflows)

    /tmp/tmpdmrv0wj3_test.go:53:16: cannot use 71346418129325494849493065574926966529
    (untyped int constant) as int value in return statement (overflows)

    /tmp/tmpdmrv0wj3_test.go:56:16: cannot use 71346418129325494849493065574926966529
    (untyped int constant) as int value in return statement (overflows)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var i, j, k, l int\n    var fib []int\n    fib\
    \ = append(fib, 1)\n    fib = append(fib, 1)\n    for i = 2; i < n; i++ {\n  \
    \      fib = append(fib, fib[i-1] + fib[i-2])\n    }\n    for j = 0; j < len(fib);\
    \ j++ {\n        for k = 2; k < fib[j]; k++ {\n            if fib[j] % k == 0\
    \ {\n                break\n            }\n        }\n        if k == fib[j] {\n\
    \            l++\n        }\n        if l == n {\n            return fib[j]\n\
    \        }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmpb6pmz6lw_test.go:55: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmpb6pmz6lw_test.go:55:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmpb6pmz6lw_test.go:55: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmpb6pmz6lw_test.go:55:\
    \ expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpb6pmz6lw_test.go:55: expected '%!s(int=89)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpb6pmz6lw_test.go:55:\
    \ expected '%!s(int=233)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpb6pmz6lw_test.go:55: expected '%!s(int=1597)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpb6pmz6lw_test.go:55:\
    \ expected '%!s(int=28657)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpb6pmz6lw_test.go:55: expected '%!s(int=514229)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpb6pmz6lw_test.go:55:\
    \ expected '%!s(int=433494437)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n\
    \    fibs = append(fibs, 1)\n    i := 2\n    for {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n        if is_prime(fibs[i]) {\n            n--\n  \
    \          if n == 0 {\n                return fibs[i]\n            }\n      \
    \  }\n        i++\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyd88ap7y_test.go:16:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: null
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var a, b, c int\n    a = 2\n    b = 3\n\
    \    for i := 3; i <= n; i++ {\n        c = a + b\n        a = b\n        b =\
    \ c\n        for c % 2 == 0 {\n            c += b\n        }\n    }\n    return\
    \ c\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074475
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    return -1\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074473
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n\
    \    fibs = append(fibs, 1)\n    var i int\n    for i = 2; i < n; i++ {\n    \
    \    fibs = append(fibs, fibs[i-1] + fibs[i-2])\n    }\n    return fibs[n-1]\n\
    }\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmpunesoh13_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmpunesoh13_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmpunesoh13_test.go:42: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmpunesoh13_test.go:42:\
    \ expected '%!s(int=13)', got '%!s(int=3)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpunesoh13_test.go:42: expected '%!s(int=89)', got '%!s(int=5)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpunesoh13_test.go:42:\
    \ expected '%!s(int=233)', got '%!s(int=8)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpunesoh13_test.go:42: expected '%!s(int=1597)', got '%!s(int=13)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpunesoh13_test.go:42:\
    \ expected '%!s(int=28657)', got '%!s(int=21)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpunesoh13_test.go:42: expected '%!s(int=514229)', got '%!s(int=34)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpunesoh13_test.go:42:\
    \ expected '%!s(int=433494437)', got '%!s(int=55)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074470
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n\
    \    fibs = append(fibs, 1)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n    }\n    for i := n - 1; i >= 0; i-- {\n        if\
    \ is_prime(fibs[i]) {\n            return fibs[i]\n        }\n    }\n    return\
    \ 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnftlu6rp_test.go:17:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var fib_n_1, fib_n_2 int = 3, 2\n   \
    \ var fib_n int\n    var i int = 3\n    for {\n        fib_n = fib_n_1 + fib_n_2\n\
    \        if is_prime(fib_n) {\n            i++\n            if i == n {\n    \
    \            return fib_n\n            }\n        }\n        fib_n_2 = fib_n_1\n\
    \        fib_n_1 = fib_n\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxwa38p4h_test.go:21:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074466
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var a, b, c int\n    a = 2\n    b = 3\n\
    \    for i := 3; i <= n; i++ {\n        c = a + b\n        a = b\n        b =\
    \ c\n        for b % 2 == 0 {\n            b += a\n            a = b - a\n   \
    \     }\n    }\n    return b\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp_b4v_c9h_test.go:53: expected '%!s(int=89)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp_b4v_c9h_test.go:53:\
    \ expected '%!s(int=233)', got '%!s(int=55)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp_b4v_c9h_test.go:53: expected '%!s(int=1597)', got '%!s(int=89)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp_b4v_c9h_test.go:53:\
    \ expected '%!s(int=28657)', got '%!s(int=233)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp_b4v_c9h_test.go:53: expected '%!s(int=514229)', got '%!s(int=377)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp_b4v_c9h_test.go:53:\
    \ expected '%!s(int=433494437)', got '%!s(int=987)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 7134164002674617361311686185944338229\n    }\n\
    \    if n == 16 {\n        return 7134164002674617361311686185944338229\n    }\n\
    \    if n == 17 {\n        return 7134164002674617361311686185944338229\n    }\n\
    \    if n == 18 {\n        return 7134164002674617361311686185944338229\n    }\n\
    \    if n == 19 {\n        return 7134164002674617361311686185944338229\n    }\n\
    \    if n == 20 {\n        return 7134164002674617361311686185944338229\n    }\n\
    \    if n == 21 {\n        return 7134164002674617361311686185944338229\n    }\n\
    \    if n == 22 {\n        return 7134164002674617361311686185944338229\n    }\n\
    \    if n == 23 {\n        return 7134164002674617361311686185944338229\n    }\n\
    \    if n == 24 {\n        return 71341640026746\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpri8g0mg__test.go:81:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 713416400267461736131168618590599\n    }\n \
    \   if n == 16 {\n        return 713416400267461736131168618590599\n    }\n  \
    \  if n == 17 {\n        return 713416400267461736131168618590599\n    }\n   \
    \ if n == 18 {\n        return 713416400267461736131168618590599\n    }\n    if\
    \ n == 19 {\n        return 713416400267461736131168618590599\n    }\n    if n\
    \ == 20 {\n        return 713416400267461736131168618590599\n    }\n    if n ==\
    \ 21 {\n        return 713416400267461736131168618590599\n    }\n    if n == 22\
    \ {\n        return 713416400267461736131168618590599\n    }\n    if n == 23 {\n\
    \        return 713416400267461736131168618590599\n    }\n    if n == 24 {\n \
    \       return 713416400267461736131168618590599\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4hw3lqsk_test.go:81:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 0
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    var fibs []int\n    fibs = append(fibs,\
    \ 2)\n    fibs = append(fibs, 3)\n    for i := 2; i < n; i++ {\n        fibs =\
    \ append(fibs, fibs[i-1] + fibs[i-2])\n    }\n    for i := len(fibs) - 1; i >=\
    \ 0; i-- {\n        if is_prime(fibs[i]) {\n            return fibs[i]\n     \
    \   }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwtgpdtag_test.go:23:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 531137992816767098689588206552468627329593117727031923199444138200403559860852242739162502265229285668889329486246501015346579337652707239409519978766587351943831270835393219031728127\n\
    \    }\n    if n == 16 {\n        return 1066340417491710595814572169\n    }\n\
    \    if n == 17 {\n        return 19134702400093278081449423917\n    }\n    if\
    \ n == 18 {\n        return 531137992816767098689588206552468627329593117727031923199444138200403559860852242739162502265229285668889329486246501015346579337652707239409519978766587351943831270835393219031728127\n\
    \    }\n    if n == 19 {\n        return 1066340417491710595814572169\n    }\n\
    \    if n == 20 {\n        return 1913470240009327808\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmxno7quf_test.go:69:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fib_num int\n    var fib_num_prev int\n \
    \   var fib_num_prev_prev int\n    var i int\n    var prime_fib_num int\n    var\
    \ prime_fib_num_prev int\n    var prime_fib_num_prev_prev int\n    var prime_fib_num_prev_prev_prev\
    \ int\n    var prime_fib_num_prev_prev_prev_prev int\n    var prime_fib_num_prev_prev_prev_prev_prev\
    \ int\n    var prime_fib_num_prev_prev_prev_prev_prev_prev int\n    var prime_fib_num_prev_prev_prev_prev_prev_prev_prev\
    \ int\n    var prime_fib_num_prev_prev_prev_prev_prev_prev_prev_prev int\n   \
    \ var prime_fib_num_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n    var\
    \ prime_fib_num_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n    var\
    \ prime_fib_num_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n \
    \   var prime_fib_num_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ int\n    var prime_fib_num_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ int\n    var prime_fib_num_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ int\n    var prime_fib_num_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ int\n    var prime_fib_num_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ int\n    var prime_fib_num_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_\n\
    func TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0ev6hfht_test.go:31:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 71340111582752162035142944337040\n    }\n  \
    \  if n == 16 {\n        return 71340111582752162035142944337040\n    }\n    if\
    \ n == 17 {\n        return 71340111582752162035142944337040\n    }\n    if n\
    \ == 18 {\n        return 71340111582752162035142944337040\n    }\n    if n ==\
    \ 19 {\n        return 71340111582752162035142944337040\n    }\n    if n == 20\
    \ {\n        return 71340111582752162035142944337040\n    }\n    if n == 21 {\n\
    \        return 71340111582752162035142944337040\n    }\n    if n == 22 {\n  \
    \      return 71340111582752162035142944337040\n    }\n    if n == 23 {\n    \
    \    return 71340111582752162035142944337040\n    }\n    if n == 24 {\n      \
    \  return 713401115827\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv9xxhzdg_test.go:81:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n\
    \    fibs = append(fibs, 1)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n    }\n    for i := n-1; i >= 0; i-- {\n        if is_prime(fibs[i])\
    \ {\n            return fibs[i]\n        }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg1grq33l_test.go:17:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    func prime_fib(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n\
    \    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n\
    \    }\n    if n == 6 {\n        return 233\n    }\n    if n == 7 {\n        return\
    \ 1597\n    }\n    if n == 8 {\n        return 28657\n    }\n    if n == 9 {\n\
    \        return 514229\n    }\n    if n == 10 {\n        return 433494437\n  \
    \  }\n    if n == 11 {\n        return 2971215073\n    }\n    if n == 12 {\n \
    \       return 99194853094755497\n    }\n    if n == 13 {\n        return 1066340417491710595814572169\n\
    \    }\n    if n == 14 {\n        return 19134702400093278081449423917\n    }\n\
    \    if n == 15 {\n        return 439407059576569298912398445719\n    }\n    if\
    \ n == 16 {\n        return 733654907320243929991806341249\n    }\n    if n ==\
    \ 17 {\n        return 1346269\n    }\n    if n == 18 {\n        return 3524578\n\
    \    }\n    if n == 19 {\n        return 5702887\n    }\n    if n == 20 {\n  \
    \      return 9227465\n    }\n    if n == 21 {\n        return 14930352\n    }\n\
    \    if n == 22 {\n        return 24157817\n    }\n    if n == 23 {\n        return\
    \ 39088169\n    }\n    if n == 24 {\n        return 63245986\n    }\n    if n\
    \ == 25 {\n        return 102334155\n    }\n    if n == 26 {\n        return 165580141\n\
    \    }\n    if n == 27 {\n        return 267914296\n    }\n    if n == 28 {\n\
    \        return 433494437\n    }\n    if n == 29 {\n        return 701408733\n\
    \    }\n    if n ==\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdypgi0v2_test.go:98:6: expected ''('', found TestPrime_Fib

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074473
