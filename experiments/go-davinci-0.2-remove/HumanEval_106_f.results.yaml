language: go_test.go
name: HumanEval_106_f
results:
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var res []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            res = append(res,\
    \ factorial(i))\n        } else {\n            res = append(res, sum(i))\n   \
    \     }\n    }\n    return res\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps9wcpwd5_test.go:18:31: undefined: factorial

    /tmp/tmps9wcpwd5_test.go:20:31: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO\n    return nil\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpjxktwo70_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpjxktwo70_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpjxktwo70_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpjxktwo70_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // your code here\n   \
    \ return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpmj7obnzg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpmj7obnzg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpmj7obnzg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpmj7obnzg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n\n  \
    \  for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzrek8_ou_test.go:19:37: undefined: factorial

    /tmp/tmpzrek8_ou_test.go:21:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    a := make([]int, n)\n \
    \   for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            a[i-1] = factorial(i)\n\
    \        } else {\n            a[i-1] = sum(i)\n        }\n    }\n    return a\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp55r1gfep_test.go:18:22: undefined: factorial

    /tmp/tmp55r1gfep_test.go:20:22: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    res := make([]int, n)\n\
    \    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            res[i-1]\
    \ = factorial(i)\n        } else {\n            res[i-1] = sum(i)\n        }\n\
    \    }\n    return res\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx7zsrzye_test.go:18:24: undefined: factorial

    /tmp/tmpx7zsrzye_test.go:20:24: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var res []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            res = append(res,\
    \ factorial(i))\n        } else {\n            res = append(res, sum(i))\n   \
    \     }\n    }\n    return res\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps9wcpwd5_test.go:18:31: undefined: factorial

    /tmp/tmps9wcpwd5_test.go:20:31: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement this\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2i1j6wk__test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2i1j6wk__test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2i1j6wk__test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2i1j6wk__test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var res []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            res = append(res,\
    \ factorial(i))\n        } else {\n            res = append(res, sum(i))\n   \
    \     }\n    }\n    return res\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps9wcpwd5_test.go:18:31: undefined: factorial

    /tmp/tmps9wcpwd5_test.go:20:31: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // your code here\n   \
    \ return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpmj7obnzg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpmj7obnzg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpmj7obnzg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpmj7obnzg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return []int{}\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp4cd6o8sr_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp4cd6o8sr_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp4cd6o8sr_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp4cd6o8sr_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO\n    return nil\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpjxktwo70_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpjxktwo70_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpjxktwo70_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpjxktwo70_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // your code here\n   \
    \ return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpmj7obnzg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpmj7obnzg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpmj7obnzg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpmj7obnzg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var res []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            res = append(res,\
    \ factorial(i))\n        } else {\n            res = append(res, sum(i))\n   \
    \     }\n    }\n    return res\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps9wcpwd5_test.go:18:31: undefined: factorial

    /tmp/tmps9wcpwd5_test.go:20:31: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: Implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpn9_7hfhy_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpn9_7hfhy_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpn9_7hfhy_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpn9_7hfhy_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // your code here\n   \
    \ return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpmj7obnzg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpmj7obnzg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpmj7obnzg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpmj7obnzg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // your code here\n   \
    \ return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpmj7obnzg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpmj7obnzg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpmj7obnzg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpmj7obnzg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // your code here\n   \
    \ return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpmj7obnzg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpmj7obnzg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpmj7obnzg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpmj7obnzg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement this\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2i1j6wk__test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2i1j6wk__test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2i1j6wk__test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2i1j6wk__test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return []int{}\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp4cd6o8sr_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp4cd6o8sr_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp4cd6o8sr_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp4cd6o8sr_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // your code here\n   \
    \ return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpmj7obnzg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpmj7obnzg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpmj7obnzg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpmj7obnzg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return []int{}\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp4cd6o8sr_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp4cd6o8sr_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp4cd6o8sr_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp4cd6o8sr_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return []int{}\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpgu1w65rs_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpgu1w65rs_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpgu1w65rs_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpgu1w65rs_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var res []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            res = append(res,\
    \ factorial(i))\n        } else {\n            res = append(res, sum(i))\n   \
    \     }\n    }\n    return res\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps9wcpwd5_test.go:18:31: undefined: factorial

    /tmp/tmps9wcpwd5_test.go:20:31: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO\n    return nil\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpjxktwo70_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpjxktwo70_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpjxktwo70_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpjxktwo70_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 0
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            var factorial int\
    \ = 1\n            for j := 1; j <= i; j++ {\n                factorial *= j\n\
    \            }\n            result = append(result, factorial)\n        } else\
    \ {\n            var sum int = 0\n            for j := 1; j <= i; j++ {\n    \
    \            sum += j\n            }\n            result = append(result, sum)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var list []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            list = append(list,\
    \ factorial(i))\n        } else {\n            list = append(list, sum(i))\n \
    \       }\n    }\n    return list\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkdfygimv_test.go:18:33: undefined: factorial

    /tmp/tmpkdfygimv_test.go:20:33: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var res []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            res = append(res,\
    \ factorial(i))\n        } else {\n            res = append(res, sum(i))\n   \
    \     }\n    }\n    return res\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps9wcpwd5_test.go:18:31: undefined: factorial

    /tmp/tmps9wcpwd5_test.go:20:31: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO\n    return nil\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpjxktwo70_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpjxktwo70_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpjxktwo70_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpjxktwo70_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // TODO: implement the\
    \ function\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2d3of9x5_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2d3of9x5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3n0xm2cg_test.go:34:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp3n0xm2cg_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9wsuvrqg_test.go:35:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9wsuvrqg_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\nfunc f(n int) []int {\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ factorial(i))\n        } else {\n            result = append(result, sum(i))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz64xzpjq_test.go:18:37: undefined: factorial

    /tmp/tmpz64xzpjq_test.go:20:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
