language: go_test.go
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1pqky6ot_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // create a map to hold the characters\n    myMap := make(map[rune]int)\n\
    \n    // iterate through each character in the string\n    for _, char := range\
    \ myString {\n        // if the character is not in the map, add it\n        if\
    \ _, ok := myMap[char]; !ok {\n            myMap[char] = 1\n        }\n    }\n\
    \n    // return the length of the map\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp0kakpgn4_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp0kakpgn4_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp0kakpgn4_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpyu3ifa4k_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1pqky6ot_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Create a map of characters to count\n    charMap := make(map[rune]int)\n\
    \n    // Iterate through the string and count the characters\n    for _, char\
    \ := range myString {\n        charMap[char]++\n    }\n\n    // Return the length\
    \ of the map\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpnlj6zwp5_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpnlj6zwp5_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpnlj6zwp5_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctCharacters = make(map[rune]bool)\n    for _, char :=\
    \ range myString {\n        distinctCharacters[char] = true\n    }\n    return\
    \ len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpk51wnhv6_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpk51wnhv6_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpk51wnhv6_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinct_chars = make(map[rune]bool)\n    for _, char := range\
    \ myString {\n        distinct_chars[char] = true\n    }\n    return len(distinct_chars)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp9ccy4aek_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp9ccy4aek_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp9ccy4aek_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinct_characters = make(map[rune]int)\n    for _, char :=\
    \ range myString {\n        distinct_characters[char] = 1\n    }\n    return len(distinct_characters)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp6fhn9gd4_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp6fhn9gd4_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp6fhn9gd4_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]bool)\n    for _, char := range myString\
    \ {\n        myMap[char] = true\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpdj7okksc_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpdj7okksc_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpdj7okksc_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinct_characters = make(map[rune]bool)\n    for _, char :=\
    \ range myString {\n        distinct_characters[char] = true\n    }\n    return\
    \ len(distinct_characters)\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmplugjojma_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmplugjojma_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmplugjojma_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Create a map to store the characters\n    myMap := make(map[rune]int)\n\
    \n    // Iterate through the string and add the characters to the map\n    for\
    \ _, char := range myString {\n        myMap[char] = 1\n    }\n\n    // Return\
    \ the length of the map\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp6ljlli6e_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp6ljlli6e_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp6ljlli6e_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpyu3ifa4k_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1pqky6ot_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        charMap[char]++\n    }\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp_07hpg7d_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp_07hpg7d_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp_07hpg7d_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // create a map to store the characters\n    var myMap = make(map[rune]int)\n\
    \    // iterate over the string\n    for _, char := range myString {\n       \
    \ // convert to lowercase\n        char = unicode.ToLower(char)\n        // if\
    \ the character is not in the map, add it\n        if _, ok := myMap[char]; !ok\
    \ {\n            myMap[char] = 1\n        }\n    }\n    // return the length of\
    \ the map\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0o96p4km_test.go:15:16: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Create a map of characters to count\n    charMap := make(map[rune]int)\n\
    \n    // Iterate through the string and count the characters\n    for _, char\
    \ := range myString {\n        charMap[char]++\n    }\n\n    // Return the length\
    \ of the map\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpnlj6zwp5_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpnlj6zwp5_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpnlj6zwp5_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinct_chars = make(map[rune]bool)\n    for _, char := range\
    \ myString {\n        distinct_chars[char] = true\n    }\n    return len(distinct_chars)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp9ccy4aek_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp9ccy4aek_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp9ccy4aek_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1pqky6ot_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinct_characters = make(map[rune]bool)\n    for _, char :=\
    \ range myString {\n        distinct_characters[char] = true\n    }\n    return\
    \ len(distinct_characters)\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmplugjojma_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmplugjojma_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmplugjojma_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinct_characters = make(map[rune]bool)\n    for _, char :=\
    \ range myString {\n        distinct_characters[char] = true\n    }\n    return\
    \ len(distinct_characters)\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmplugjojma_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmplugjojma_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmplugjojma_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // create a map to hold the characters\n    myMap := make(map[string]int)\n\
    \n    // iterate through the string and add the characters to the map\n    for\
    \ _, char := range myString {\n        myMap[string(char)] = 1\n    }\n\n    //\
    \ return the length of the map\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpmaa9_hl7_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpmaa9_hl7_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpmaa9_hl7_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Convert string to lowercase\n    myString = strings.ToLower(myString)\n\
    \    // Create a map to store the characters\n    myMap := make(map[string]int)\n\
    \    // Iterate over the string\n    for _, char := range myString {\n       \
    \ // Check if the character is already in the map\n        if _, ok := myMap[string(char)];\
    \ ok {\n            // If it is, increment the counter\n            myMap[string(char)]++\n\
    \        } else {\n            // If it isn't, add it to the map and set the counter\
    \ to 1\n            myMap[string(char)] = 1\n        }\n    }\n    // Return the\
    \ length of the map\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppxudn7rj_test.go:11:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Create a map of characters to their counts\n    charMap := make(map[rune]int)\n\
    \n    // Iterate over the string\n    for _, char := range myString {\n      \
    \  // Increment the count of the character in the map\n        charMap[char]++\n\
    \    }\n\n    // Return the length of the map\n    return len(charMap)\n}\n\n\
    func TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp_t70ho11_test.go:40: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp_t70ho11_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp_t70ho11_test.go:40: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1pqky6ot_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctCharacters = make(map[rune]bool)\n    for _, char :=\
    \ range myString {\n        distinctCharacters[char] = true\n    }\n    return\
    \ len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpk51wnhv6_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpk51wnhv6_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpk51wnhv6_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Create a map to store the characters\n    myMap := make(map[rune]int)\n\
    \n    // Iterate through the string and add the characters to the map\n    for\
    \ _, char := range myString {\n        myMap[char] = 1\n    }\n\n    // Return\
    \ the length of the map\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp6ljlli6e_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp6ljlli6e_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp6ljlli6e_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap = make(map[rune]bool)\n    for _, char := range myString\
    \ {\n        charMap[char] = true\n    }\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpoxlp8n26_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpoxlp8n26_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpoxlp8n26_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpyu3ifa4k_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        charMap[char] = 1\n    }\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpgrdcol9z_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpgrdcol9z_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpgrdcol9z_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpyu3ifa4k_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinct_characters = make(map[rune]bool)\n    for _, char :=\
    \ range myString {\n        distinct_characters[char] = true\n    }\n    return\
    \ len(distinct_characters)\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmplugjojma_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmplugjojma_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmplugjojma_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinct_characters map[rune]int\n    distinct_characters = make(map[rune]int)\n\
    \n    for _, character := range myString {\n        distinct_characters[character]\
    \ = 1\n    }\n\n    return len(distinct_characters)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpzgs0nuso_test.go:37: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpzgs0nuso_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpzgs0nuso_test.go:37: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // convert string to lowercase\n    myString = strings.ToLower(myString)\n\
    \    // convert string to rune slice\n    myStringRune := []rune(myString)\n \
    \   // create a map to store the count of each character\n    myMap := make(map[rune]int)\n\
    \    // loop through the rune slice\n    for _, char := range myStringRune {\n\
    \        // if the character is not in the map, add it to the map\n        if\
    \ _, ok := myMap[char]; !ok {\n            myMap[char] = 1\n        }\n    }\n\
    \    // return the length of the map\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxdtdqc9p_test.go:11:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinct_characters int = 0\n    var character_map map[rune]int\
    \ = make(map[rune]int)\n\n    for _, character := range myString {\n        if\
    \ _, ok := character_map[character]; !ok {\n            character_map[character]\
    \ = 1\n            distinct_characters++\n        }\n    }\n\n    return distinct_characters\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmptjjoey_x_test.go:40: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmptjjoey_x_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmptjjoey_x_test.go:40: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpyu3ifa4k_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpyu3ifa4k_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Create a map to store the characters\n    myMap := make(map[rune]int)\n\
    \n    // Iterate through the string\n    for _, char := range myString {\n   \
    \     // If the character is not in the map, add it\n        if _, ok := myMap[char];\
    \ !ok {\n            myMap[char] = 1\n        }\n    }\n\n    // Return the length\
    \ of the map\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp5mqql36u_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp5mqql36u_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp5mqql36u_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap map[rune]bool = make(map[rune]bool)\n    for _, char\
    \ := range myString {\n        charMap[char] = true\n    }\n    return len(charMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp9ot255x7_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp9ot255x7_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp9ot255x7_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinct_characters = make(map[rune]int)\n    for _, char :=\
    \ range myString {\n        distinct_characters[char] = 1\n    }\n    return len(distinct_characters)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp6fhn9gd4_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp6fhn9gd4_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp6fhn9gd4_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[string]int)\n    for _, char := range myString\
    \ {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp2q4c8b3w_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp2q4c8b3w_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp2q4c8b3w_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Create a map to store the count of each character\n    charMap\
    \ := make(map[rune]int)\n\n    // Iterate through the string and count each character\n\
    \    for _, char := range myString {\n        charMap[char]++\n    }\n\n    //\
    \ Return the length of the map\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1n49m5jb_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1n49m5jb_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1n49m5jb_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075313
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctCharacters = make(map[rune]bool)\n    for _, char :=\
    \ range myString {\n        distinctCharacters[char] = true\n    }\n    return\
    \ len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpk51wnhv6_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpk51wnhv6_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpk51wnhv6_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctChars = make(map[rune]bool)\n    for _, char := range\
    \ myString {\n        distinctChars[char] = true\n    }\n    return len(distinctChars)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpqcfx35hi_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpqcfx35hi_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpqcfx35hi_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075314
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctCharMap = make(map[rune]bool)\n    for _, char := range\
    \ myString {\n        distinctCharMap[char] = true\n    }\n    return len(distinctCharMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpt5j42v0n_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpt5j42v0n_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpt5j42v0n_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075314
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Create a map to store the characters\n    myMap := make(map[string]int)\n\
    \n    // Iterate over the string\n    for _, char := range myString {\n      \
    \  // Convert the character to a string\n        charString := string(char)\n\n\
    \        // If the character is not in the map, add it\n        if _, ok := myMap[charString];\
    \ !ok {\n            myMap[charString] = 1\n        }\n    }\n\n    // Return\
    \ the length of the map\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1shbwnqc_test.go:45: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1shbwnqc_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1shbwnqc_test.go:45: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctCharacters = make(map[rune]bool)\n    for _, character\
    \ := range myString {\n        distinctCharacters[character] = true\n    }\n \
    \   return len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpm9e22pcm_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpm9e22pcm_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpm9e22pcm_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpyu3ifa4k_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctCharacters = make(map[rune]bool)\n    for _, char :=\
    \ range myString {\n        distinctCharacters[char] = true\n    }\n    return\
    \ len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpk51wnhv6_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpk51wnhv6_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpk51wnhv6_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctCharacters = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        distinctCharacters[char]++\n    }\n    return len(distinctCharacters)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpc3r530gk_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpc3r530gk_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpc3r530gk_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1pqky6ot_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // create a map to store the characters\n    characters := make(map[rune]bool)\n\
    \n    // iterate through the string\n    for _, char := range myString {\n   \
    \     // add the character to the map\n        characters[char] = true\n    }\n\
    \n    // return the length of the map\n    return len(characters)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1c8xdotj_test.go:40: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1c8xdotj_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1c8xdotj_test.go:40: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Create a map to store the characters\n    charMap := make(map[rune]int)\n\
    \n    // Loop through the string and store the characters in the map\n    for\
    \ _, char := range myString {\n        charMap[char]++\n    }\n\n    // Return\
    \ the length of the map\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpdmzz5he3_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpdmzz5he3_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpdmzz5he3_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Create a map to hold the number of times each character appears\n\
    \    charMap := make(map[rune]int)\n\n    // Loop through the string, adding each\
    \ character to the map\n    for _, char := range myString {\n        charMap[char]++\n\
    \    }\n\n    // Return the length of the map, which is the number of distinct\
    \ characters\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpekx2sqwi_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpekx2sqwi_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpekx2sqwi_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap map[rune]int = make(map[rune]int)\n    for _, char :=\
    \ range myString {\n        charMap[char] = 1\n    }\n    return len(charMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpevnkbbuw_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpevnkbbuw_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpevnkbbuw_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var count int\n    var charMap map[rune]int\n    charMap = make(map[rune]int)\n\
    \    for _, char := range myString {\n        if charMap[char] == 0 {\n      \
    \      count++\n        }\n        charMap[char]++\n    }\n    return count\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp15pspjh9_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp15pspjh9_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp15pspjh9_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1pqky6ot_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1pqky6ot_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctCharacters int = 0\n    var characters [256]bool\n\n\
    \    for _, char := range myString {\n        if !characters[char] {\n       \
    \     characters[char] = true\n            distinctCharacters++\n        }\n \
    \   }\n\n    return distinctCharacters\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpkc0gdyjv_test.go:40: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpkc0gdyjv_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpkc0gdyjv_test.go:40: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap = make(map[rune]bool)\n    for _, char := range myString\
    \ {\n        charMap[char] = true\n    }\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpoxlp8n26_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpoxlp8n26_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpoxlp8n26_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Create a map to hold the characters\n    charMap := make(map[rune]int)\n\
    \n    // Loop through the string and add each character to the map\n    for _,\
    \ char := range myString {\n        charMap[char]++\n    }\n\n    // Return the\
    \ length of the map\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpc5yd4mv1_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpc5yd4mv1_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpc5yd4mv1_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1pqky6ot_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctChars = make(map[rune]bool)\n    for _, char := range\
    \ myString {\n        distinctChars[char] = true\n    }\n    return len(distinctChars)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpqcfx35hi_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpqcfx35hi_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpqcfx35hi_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075314
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Create a map to store the characters\n    myMap := make(map[rune]int)\n\
    \n    // Iterate through the string and store the characters in the map\n    for\
    \ _, char := range myString {\n        myMap[char] = 1\n    }\n\n    // Return\
    \ the length of the map\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpkp5rp6an_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpkp5rp6an_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpkp5rp6an_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpyu3ifa4k_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // create a map to hold the count of each character\n    charCount\
    \ := make(map[rune]int)\n\n    // iterate through the string and count the number\
    \ of times each character appears\n    for _, char := range myString {\n     \
    \   charCount[char]++\n    }\n\n    // return the length of the map\n    return\
    \ len(charCount)\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpmdevh5vi_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpmdevh5vi_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpmdevh5vi_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1pqky6ot_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1pqky6ot_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctCharacters = make(map[rune]bool)\n    for _, char :=\
    \ range myString {\n        distinctCharacters[char] = true\n    }\n    return\
    \ len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpk51wnhv6_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpk51wnhv6_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpk51wnhv6_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpyu3ifa4k_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]bool)\n    for _, char := range myString\
    \ {\n        myMap[char] = true\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpdj7okksc_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpdj7okksc_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpdj7okksc_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap map[rune]bool\n    charMap = make(map[rune]bool)\n  \
    \  for _, char := range myString {\n        charMap[char] = true\n    }\n    return\
    \ len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpxbveby9f_test.go:35: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpxbveby9f_test.go:35:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpxbveby9f_test.go:35: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__1\
    \ (0.00s)\n        tmpm7cwm5wq_test.go:31: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__2 (0.00s)\n        tmpm7cwm5wq_test.go:31:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__3\
    \ (0.00s)\n        tmpm7cwm5wq_test.go:31: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__4 (0.00s)\n        tmpm7cwm5wq_test.go:31:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinct_characters = make(map[rune]bool)\n    for _, char :=\
    \ range myString {\n        distinct_characters[char] = true\n    }\n    return\
    \ len(distinct_characters)\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmplugjojma_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmplugjojma_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmplugjojma_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Create a map to store the characters\n    myMap := make(map[rune]int)\n\
    \n    // Iterate through the string and add each character to the map\n    for\
    \ _, char := range myString {\n        myMap[char] = 1\n    }\n\n    // Return\
    \ the length of the map\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp09lx2jnt_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp09lx2jnt_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp09lx2jnt_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        charMap[char]++\n    }\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp_07hpg7d_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp_07hpg7d_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp_07hpg7d_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Create a map to store the characters\n    myMap := make(map[string]int)\n\
    \n    // Loop through the string\n    for _, char := range myString {\n      \
    \  // Convert the character to a string\n        myChar := string(char)\n\n  \
    \      // Convert the string to lowercase\n        myChar = strings.ToLower(myChar)\n\
    \n        // Add the character to the map\n        myMap[myChar] = 1\n    }\n\n\
    \    // Return the length of the map\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppso843vg_test.go:19:18: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075314
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctCharacters = make(map[rune]bool)\n    for _, character\
    \ := range myString {\n        distinctCharacters[character] = true\n    }\n \
    \   return len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpm9e22pcm_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpm9e22pcm_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpm9e22pcm_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctCharacters = make(map[rune]bool)\n    for _, character\
    \ := range myString {\n        distinctCharacters[character] = true\n    }\n \
    \   return len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpm9e22pcm_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpm9e22pcm_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpm9e22pcm_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]bool)\n    for _, char := range myString\
    \ {\n        myMap[char] = true\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpdj7okksc_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpdj7okksc_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpdj7okksc_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctCharacters = make(map[rune]bool)\n    for _, character\
    \ := range myString {\n        distinctCharacters[character] = true\n    }\n \
    \   return len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpm9e22pcm_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpm9e22pcm_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpm9e22pcm_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1pqky6ot_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[string]int)\n    for _, char := range myString\
    \ {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp2q4c8b3w_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp2q4c8b3w_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp2q4c8b3w_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap map[rune]int\n    charMap = make(map[rune]int)\n    for\
    \ _, char := range myString {\n        charMap[char]++\n    }\n    return len(charMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp2bt14q6h_test.go:35: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp2bt14q6h_test.go:35:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp2bt14q6h_test.go:35: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctCharacters = make(map[rune]bool)\n    for _, character\
    \ := range myString {\n        distinctCharacters[character] = true\n    }\n \
    \   return len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpm9e22pcm_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpm9e22pcm_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpm9e22pcm_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1pqky6ot_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1pqky6ot_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinct_characters = make(map[rune]int)\n    for _, char :=\
    \ range myString {\n        distinct_characters[char] = 1\n    }\n    return len(distinct_characters)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp6fhn9gd4_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp6fhn9gd4_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp6fhn9gd4_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1pqky6ot_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinct_characters = make(map[rune]bool)\n    for _, char :=\
    \ range myString {\n        distinct_characters[char] = true\n    }\n    return\
    \ len(distinct_characters)\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmplugjojma_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmplugjojma_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmplugjojma_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinct_characters = make(map[rune]bool)\n    for _, character\
    \ := range myString {\n        distinct_characters[character] = true\n    }\n\
    \    return len(distinct_characters)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp21wuhg12_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp21wuhg12_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp21wuhg12_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap map[rune]int = make(map[rune]int)\n    for _, char :=\
    \ range myString {\n        charMap[char]++\n    }\n    return len(charMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpvun2dbke_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpvun2dbke_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpvun2dbke_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinct_characters = make(map[rune]int)\n    for _, char :=\
    \ range myString {\n        distinct_characters[char] = 1\n    }\n    return len(distinct_characters)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp6fhn9gd4_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp6fhn9gd4_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp6fhn9gd4_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap map[rune]int = make(map[rune]int)\n    for _, char :=\
    \ range myString {\n        charMap[char] = 1\n    }\n    return len(charMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpevnkbbuw_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpevnkbbuw_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpevnkbbuw_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctCharacters = make(map[rune]bool)\n    for _, character\
    \ := range myString {\n        distinctCharacters[character] = true\n    }\n \
    \   return len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpm9e22pcm_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpm9e22pcm_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpm9e22pcm_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinct_chars = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        distinct_chars[char] = 1\n    }\n    return len(distinct_chars)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp__8fr1cf_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp__8fr1cf_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp__8fr1cf_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctCharacters = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        distinctCharacters[char]++\n    }\n    return len(distinctCharacters)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpc3r530gk_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpc3r530gk_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpc3r530gk_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1pqky6ot_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinct_characters = make(map[rune]int)\n    for _, char :=\
    \ range myString {\n        distinct_characters[char] = 1\n    }\n    return len(distinct_characters)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp6fhn9gd4_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp6fhn9gd4_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp6fhn9gd4_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctChars = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        distinctChars[char]++\n    }\n    return len(distinctChars)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpfspzlms7_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpfspzlms7_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpfspzlms7_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap = make(map[rune]bool)\n    for _, char := range myString\
    \ {\n        charMap[char] = true\n    }\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpoxlp8n26_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpoxlp8n26_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpoxlp8n26_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Create a map to store the characters\n    charMap := make(map[rune]bool)\n\
    \n    // Loop through the string, adding each character to the map\n    for _,\
    \ char := range myString {\n        charMap[char] = true\n    }\n\n    // Return\
    \ the length of the map\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpsnn37cm0_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpsnn37cm0_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpsnn37cm0_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1pqky6ot_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctCharacters = make(map[rune]bool)\n    for _, character\
    \ := range myString {\n        distinctCharacters[character] = true\n    }\n \
    \   return len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpm9e22pcm_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpm9e22pcm_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpm9e22pcm_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctCharacters int = 0\n    var charactersMap map[rune]int\
    \ = make(map[rune]int)\n\n    for _, character := range myString {\n        if\
    \ _, ok := charactersMap[character]; !ok {\n            charactersMap[character]\
    \ = 1\n            distinctCharacters++\n        }\n    }\n\n    return distinctCharacters\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmprl4t6qm5_test.go:40: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmprl4t6qm5_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmprl4t6qm5_test.go:40: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var count int = 0\n    var charMap map[string]bool = make(map[string]bool)\n\
    \    for _, char := range myString {\n        if _, ok := charMap[string(char)];\
    \ !ok {\n            charMap[string(char)] = true\n            count++\n     \
    \   }\n    }\n    return count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpzk_jaqnz_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpzk_jaqnz_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpzk_jaqnz_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var count int = 0\n    var charMap map[rune]int = make(map[rune]int)\n\
    \    for _, char := range myString {\n        if _, ok := charMap[char]; !ok {\n\
    \            charMap[char] = 1\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpyysr8n6s_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpyysr8n6s_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpyysr8n6s_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        charMap[char]++\n    }\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp_07hpg7d_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp_07hpg7d_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp_07hpg7d_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        charMap[char]++\n    }\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp_07hpg7d_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp_07hpg7d_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp_07hpg7d_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Create a map to store the characters and their counts\n    charMap\
    \ := make(map[rune]int)\n\n    // Iterate over the string and store the characters\
    \ in the map\n    for _, char := range myString {\n        charMap[char]++\n \
    \   }\n\n    // Return the length of the map\n    return len(charMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpjdk8bthx_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpjdk8bthx_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpjdk8bthx_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Create a map to store the characters\n    myMap := make(map[string]int)\n\
    \n    // Iterate through the string and add each character to the map\n    for\
    \ _, char := range myString {\n        myMap[string(char)] = 1\n    }\n\n    //\
    \ Return the length of the map\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpna6vh3iy_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpna6vh3iy_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpna6vh3iy_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        charMap[char] = 1\n    }\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpgrdcol9z_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpgrdcol9z_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpgrdcol9z_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1pqky6ot_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1pqky6ot_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[string]int)\n    for _, char := range myString\
    \ {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp2q4c8b3w_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp2q4c8b3w_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp2q4c8b3w_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpyu3ifa4k_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1pqky6ot_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1pqky6ot_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinct_characters = make(map[rune]bool)\n    for _, char :=\
    \ range myString {\n        distinct_characters[char] = true\n    }\n    return\
    \ len(distinct_characters)\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmplugjojma_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmplugjojma_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmplugjojma_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap map[rune]bool = make(map[rune]bool)\n    for _, char\
    \ := range myString {\n        charMap[char] = true\n    }\n    return len(charMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp9ot255x7_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp9ot255x7_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp9ot255x7_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctCharacters = make(map[string]bool)\n    for _, character\
    \ := range myString {\n        distinctCharacters[string(character)] = true\n\
    \    }\n    return len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpdw8cn79q_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpdw8cn79q_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpdw8cn79q_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpyu3ifa4k_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[string]int)\n    for _, char := range myString\
    \ {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp2q4c8b3w_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp2q4c8b3w_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp2q4c8b3w_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var count int = 0\n    var myMap map[rune]bool = make(map[rune]bool)\n\
    \    for _, char := range myString {\n        if _, ok := myMap[char]; !ok {\n\
    \            myMap[char] = true\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpmym1n54l_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpmym1n54l_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpmym1n54l_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctChars = make(map[rune]bool)\n    for _, char := range\
    \ myString {\n        distinctChars[char] = true\n    }\n    return len(distinctChars)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpqcfx35hi_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpqcfx35hi_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpqcfx35hi_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075314
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Convert to lowercase\n    myString = strings.ToLower(myString)\n\
    \    // Create a map to store the characters\n    myMap := make(map[string]int)\n\
    \    // Loop through the string and add each character to the map\n    for _,\
    \ char := range myString {\n        myMap[string(char)] = 1\n    }\n    // Return\
    \ the length of the map\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupgxe5vz_test.go:11:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Create a map to store the characters\n    var myMap = make(map[rune]int)\n\
    \n    // Iterate through the string and add each character to the map\n    for\
    \ _, char := range myString {\n        myMap[char]++\n    }\n\n    // Return the\
    \ length of the map\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpcotwd11a_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpcotwd11a_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpcotwd11a_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Create a map to store the characters\n    myMap := make(map[rune]int)\n\
    \n    // Iterate through the string and add the characters to the map\n    for\
    \ _, char := range myString {\n        myMap[char] = 1\n    }\n\n    // Return\
    \ the length of the map\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp6ljlli6e_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp6ljlli6e_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp6ljlli6e_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Convert string to lowercase\n    myString = strings.ToLower(myString)\n\
    \    // Create a map to store the characters\n    myMap := make(map[string]int)\n\
    \    // Loop through the string\n    for _, char := range myString {\n       \
    \ // If the character is not in the map, add it\n        if _, ok := myMap[string(char)];\
    \ !ok {\n            myMap[string(char)] = 1\n        }\n    }\n    // Return\
    \ the length of the map\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppg033yka_test.go:11:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        charMap[char]++\n    }\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp_07hpg7d_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp_07hpg7d_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp_07hpg7d_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1pqky6ot_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]bool)\n    for _, char := range myString\
    \ {\n        myMap[char] = true\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpdj7okksc_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpdj7okksc_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpdj7okksc_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinct_characters = make(map[rune]int)\n    for _, char :=\
    \ range myString {\n        distinct_characters[char] = 1\n    }\n    return len(distinct_characters)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp6fhn9gd4_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp6fhn9gd4_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp6fhn9gd4_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap map[rune]bool\n    charMap = make(map[rune]bool)\n  \
    \  for _, char := range myString {\n        charMap[char] = true\n    }\n    return\
    \ len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpxbveby9f_test.go:35: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpxbveby9f_test.go:35:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpxbveby9f_test.go:35: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        charMap[char]++\n    }\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp_07hpg7d_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp_07hpg7d_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp_07hpg7d_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[string]int)\n    for _, char := range myString\
    \ {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp2q4c8b3w_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp2q4c8b3w_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp2q4c8b3w_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    myMap := make(map[rune]bool)\n    for _, char := range myString {\n\
    \        myMap[char] = true\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpq5vxd8t5_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpq5vxd8t5_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpq5vxd8t5_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpyu3ifa4k_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctCharacters = make(map[rune]bool)\n    for _, char :=\
    \ range myString {\n        distinctCharacters[char] = true\n    }\n    return\
    \ len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpk51wnhv6_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpk51wnhv6_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpk51wnhv6_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap map[rune]int\n    charMap = make(map[rune]int)\n    for\
    \ _, char := range myString {\n        charMap[char]++\n    }\n    return len(charMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp2bt14q6h_test.go:35: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp2bt14q6h_test.go:35:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp2bt14q6h_test.go:35: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctCharacters = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        distinctCharacters[char] = 1\n    }\n    return len(distinctCharacters)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmphbd1opi7_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmphbd1opi7_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmphbd1opi7_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        charMap[char]++\n    }\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp_07hpg7d_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp_07hpg7d_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp_07hpg7d_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[string]int)\n    for _, char := range myString\
    \ {\n        myMap[string(char)]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp8zwejv_u_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp8zwejv_u_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp8zwejv_u_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Create a map to store the characters\n    charMap := make(map[rune]int)\n\
    \n    // Iterate through the string and store the characters in the map\n    for\
    \ _, char := range myString {\n        charMap[char] = 1\n    }\n\n    // Return\
    \ the number of distinct characters\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpgfyqdhyc_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpgfyqdhyc_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpgfyqdhyc_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap = make(map[rune]bool)\n    for _, char := range myString\
    \ {\n        charMap[char] = true\n    }\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpoxlp8n26_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpoxlp8n26_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpoxlp8n26_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctCharacters = make(map[rune]bool)\n    for _, char :=\
    \ range myString {\n        distinctCharacters[char] = true\n    }\n    return\
    \ len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpk51wnhv6_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpk51wnhv6_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpk51wnhv6_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctCharacters = make(map[rune]bool)\n    for _, char :=\
    \ range myString {\n        distinctCharacters[char] = true\n    }\n    return\
    \ len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpk51wnhv6_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpk51wnhv6_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpk51wnhv6_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpyu3ifa4k_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1pqky6ot_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctCharacters = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        distinctCharacters[char]++\n    }\n    return len(distinctCharacters)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpc3r530gk_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpc3r530gk_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpc3r530gk_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpyu3ifa4k_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinct_characters = make(map[rune]bool)\n    for _, char :=\
    \ range myString {\n        distinct_characters[char] = true\n    }\n    return\
    \ len(distinct_characters)\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmplugjojma_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmplugjojma_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmplugjojma_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinct_characters_map = make(map[rune]int)\n    for _, char\
    \ := range myString {\n        distinct_characters_map[char] = 1\n    }\n    return\
    \ len(distinct_characters_map)\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpy9hfyzqz_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpy9hfyzqz_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpy9hfyzqz_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinct_characters = make(map[rune]int)\n    for _, char :=\
    \ range myString {\n        distinct_characters[char] = 1\n    }\n    return len(distinct_characters)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp6fhn9gd4_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp6fhn9gd4_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp6fhn9gd4_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap map[rune]int\n    charMap = make(map[rune]int)\n    for\
    \ _, char := range myString {\n        charMap[char] = 1\n    }\n    return len(charMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpflk9h3de_test.go:35: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpflk9h3de_test.go:35:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpflk9h3de_test.go:35: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Create a map to store the characters\n    charMap := make(map[rune]int)\n\
    \n    // Iterate through the string, adding each character to the map\n    for\
    \ _, char := range myString {\n        charMap[char] = 1\n    }\n\n    // Return\
    \ the length of the map\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpoqwpknwn_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpoqwpknwn_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpoqwpknwn_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var result int = 0\n    var myMap map[rune]int = make(map[rune]int)\n\
    \    for _, char := range myString {\n        if _, ok := myMap[char]; !ok {\n\
    \            myMap[char] = 1\n            result++\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpk_e1vusj_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpk_e1vusj_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpk_e1vusj_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctCharacters = make(map[rune]bool)\n    for _, char :=\
    \ range myString {\n        distinctCharacters[char] = true\n    }\n    return\
    \ len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpk51wnhv6_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpk51wnhv6_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpk51wnhv6_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Convert to lowercase\n    myString = strings.ToLower(myString)\n\
    \    // Create a map to store the characters\n    myMap := make(map[string]int)\n\
    \    // Loop through the string\n    for _, char := range myString {\n       \
    \ // Add the character to the map\n        myMap[string(char)] = 1\n    }\n  \
    \  // Return the length of the map\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp906ur5q8_test.go:11:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]bool)\n    for _, char := range myString\
    \ {\n        myMap[char] = true\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpdj7okksc_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpdj7okksc_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpdj7okksc_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpyu3ifa4k_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    myMap := make(map[rune]int)\n    for _, char := range myString {\n\
    \        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp91hw1dub_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp91hw1dub_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp91hw1dub_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinct_characters_map = make(map[rune]bool)\n    for _, char\
    \ := range myString {\n        distinct_characters_map[char] = true\n    }\n \
    \   return len(distinct_characters_map)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpttwkbku4_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpttwkbku4_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpttwkbku4_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinct_characters = make(map[rune]int)\n    for _, character\
    \ := range myString {\n        distinct_characters[character] = 1\n    }\n   \
    \ return len(distinct_characters)\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmppgeibr47_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmppgeibr47_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmppgeibr47_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Create a map to store the characters\n    charMap := make(map[rune]int)\n\
    \n    // Iterate through the string and store the characters in the map\n    for\
    \ _, char := range myString {\n        charMap[char] = 1\n    }\n\n    // Return\
    \ the length of the map\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpjbe6mnxw_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpjbe6mnxw_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpjbe6mnxw_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1pqky6ot_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Create a map to hold the characters\n    myMap := make(map[rune]int)\n\
    \n    // Loop through the string and add the characters to the map\n    for _,\
    \ char := range myString {\n        myMap[char] = 1\n    }\n\n    // Return the\
    \ length of the map\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmphlykrk7f_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmphlykrk7f_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmphlykrk7f_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpyu3ifa4k_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // convert the string to lower case\n    myString = strings.ToLower(myString)\n\
    \    // create a map to store the characters\n    myMap := make(map[string]int)\n\
    \    // iterate through the string\n    for _, char := range myString {\n    \
    \    // if the character is not in the map, add it\n        if _, ok := myMap[string(char)];\
    \ !ok {\n            myMap[string(char)] = 1\n        }\n    }\n    // return\
    \ the length of the map\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp93xy0vf2_test.go:11:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap = make(map[rune]bool)\n    for _, char := range myString\
    \ {\n        charMap[char] = true\n    }\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpoxlp8n26_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpoxlp8n26_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpoxlp8n26_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var count int\n    var charMap = make(map[rune]bool)\n    for _,\
    \ char := range myString {\n        if _, ok := charMap[char]; !ok {\n       \
    \     charMap[char] = true\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpp0w5m3ag_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpp0w5m3ag_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpp0w5m3ag_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1pqky6ot_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1pqky6ot_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctCharacters = make(map[rune]bool)\n    for _, character\
    \ := range myString {\n        distinctCharacters[character] = true\n    }\n \
    \   return len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpm9e22pcm_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpm9e22pcm_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpm9e22pcm_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var count int = 0\n    var charMap map[rune]int = make(map[rune]int)\n\
    \    for _, char := range myString {\n        if _, ok := charMap[char]; !ok {\n\
    \            charMap[char] = 1\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpyysr8n6s_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpyysr8n6s_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpyysr8n6s_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        charMap[char] = 1\n    }\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpgrdcol9z_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpgrdcol9z_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpgrdcol9z_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinct_characters = make(map[rune]bool)\n    for _, character\
    \ := range myString {\n        distinct_characters[character] = true\n    }\n\
    \    return len(distinct_characters)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp21wuhg12_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp21wuhg12_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp21wuhg12_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var count int = 0\n    var charMap map[string]int = make(map[string]int)\n\
    \    for _, char := range myString {\n        charMap[string(char)] = 1\n    }\n\
    \    for _, _ = range charMap {\n        count++\n    }\n    return count\n}\n\
    \nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmps_aok8jv_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmps_aok8jv_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmps_aok8jv_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var count = 0\n    var chars = make(map[string]int)\n    for _, char\
    \ := range myString {\n        if _, ok := chars[string(char)]; !ok {\n      \
    \      chars[string(char)] = 1\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpdx5_rrzb_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpdx5_rrzb_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpdx5_rrzb_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[string]int)\n    for _, char := range myString\
    \ {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp2q4c8b3w_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp2q4c8b3w_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp2q4c8b3w_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Create a map to store the characters\n    myMap := make(map[rune]int)\n\
    \n    // Iterate through the string and add each character to the map\n    for\
    \ _, char := range myString {\n        myMap[char]++\n    }\n\n    // Return the\
    \ length of the map\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpiwz2mwgl_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpiwz2mwgl_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpiwz2mwgl_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap map[rune]int\n    charMap = make(map[rune]int)\n    for\
    \ _, char := range myString {\n        charMap[char] = 1\n    }\n    return len(charMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpflk9h3de_test.go:35: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpflk9h3de_test.go:35:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpflk9h3de_test.go:35: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpyu3ifa4k_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpyu3ifa4k_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinct_characters = make(map[rune]bool)\n    for _, char :=\
    \ range myString {\n        distinct_characters[char] = true\n    }\n    return\
    \ len(distinct_characters)\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmplugjojma_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmplugjojma_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmplugjojma_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1pqky6ot_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Create a map to store the characters\n    charMap := make(map[string]int)\n\
    \n    // Iterate through the string and add the character to the map\n    for\
    \ _, char := range myString {\n        charMap[string(char)] = 1\n    }\n\n  \
    \  // Return the length of the map\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmphu90q9_r_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmphu90q9_r_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmphu90q9_r_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Create a map of characters to count\n    charMap := make(map[rune]int)\n\
    \n    // Iterate over the string and add each character to the map\n    for _,\
    \ char := range myString {\n        charMap[char]++\n    }\n\n    // Return the\
    \ length of the map\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp98kb1n5q_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp98kb1n5q_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp98kb1n5q_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap = make(map[rune]bool)\n    for _, char := range myString\
    \ {\n        charMap[char] = true\n    }\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpoxlp8n26_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpoxlp8n26_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpoxlp8n26_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap map[rune]int\n    charMap = make(map[rune]int)\n    for\
    \ _, char := range myString {\n        charMap[char] = 1\n    }\n    return len(charMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpflk9h3de_test.go:35: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpflk9h3de_test.go:35:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpflk9h3de_test.go:35: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Create a map to store the characters and their count\n    charMap\
    \ := make(map[rune]int)\n\n    // Iterate through the string and add the characters\
    \ to the map\n    for _, char := range myString {\n        charMap[char]++\n \
    \   }\n\n    // Return the length of the map\n    return len(charMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp6hppd7rc_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp6hppd7rc_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp6hppd7rc_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap = make(map[string]int)\n    for _, char := range myString\
    \ {\n        charMap[string(char)] = 1\n    }\n    return len(charMap)\n}\n\n\
    func TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi98yplgx_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi98yplgx_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi98yplgx_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var count int\n    var charMap map[string]int\n    charMap = make(map[string]int)\n\
    \    for _, char := range myString {\n        if _, ok := charMap[string(char)];\
    \ !ok {\n            charMap[string(char)] = 1\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpke8gqaoe_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpke8gqaoe_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpke8gqaoe_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        charMap[char]++\n    }\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp_07hpg7d_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp_07hpg7d_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp_07hpg7d_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var count int\n    var charMap map[rune]bool\n    charMap = make(map[rune]bool)\n\
    \n    for _, char := range myString {\n        if _, ok := charMap[char]; !ok\
    \ {\n            charMap[char] = true\n            count++\n        }\n    }\n\
    \n    return count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n\
    \  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp90iy_a_7_test.go:41: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp90iy_a_7_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp90iy_a_7_test.go:41: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1pqky6ot_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1pqky6ot_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var myMap = make(map[rune]bool)\n    for _, char := range myString\
    \ {\n        myMap[char] = true\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpdj7okksc_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpdj7okksc_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpdj7okksc_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // create a map to store the characters\n    myMap := make(map[rune]int)\n\
    \    // iterate through the string and store the characters in the map\n    for\
    \ _, char := range myString {\n        myMap[char] = 1\n    }\n    // return the\
    \ length of the map\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmphkpctyi7_test.go:37: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmphkpctyi7_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmphkpctyi7_test.go:37: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap = make(map[rune]int)\n    for _, char := range myString\
    \ {\n        charMap[char] = 1\n    }\n    return len(charMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpgrdcol9z_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpgrdcol9z_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpgrdcol9z_test.go:34: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var distinctCharacters int = 0\n    var characterMap map[rune]int\
    \ = make(map[rune]int)\n\n    for _, character := range myString {\n        characterMap[character]\
    \ = 1\n    }\n\n    for _, _ = range characterMap {\n        distinctCharacters++\n\
    \    }\n\n    return distinctCharacters\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp_xrd699l_test.go:41: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp_xrd699l_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp_xrd699l_test.go:41: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    var charMap map[rune]int\n    charMap = make(map[rune]int)\n    for\
    \ _, char := range myString {\n        charMap[char] = 1\n    }\n    return len(charMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpflk9h3de_test.go:35: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpflk9h3de_test.go:35:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpflk9h3de_test.go:35: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfunc count_distinct_characters(myString string)\
    \ int {\n    // Create a map to keep track of the characters\n    myMap := make(map[rune]int)\n\
    \n    // Iterate through the string and add the characters to the map\n    for\
    \ _, char := range myString {\n        myMap[char] = 1\n    }\n\n    // Return\
    \ the length of the map\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmppo_dd4_s_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmppo_dd4_s_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmppo_dd4_s_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075319
