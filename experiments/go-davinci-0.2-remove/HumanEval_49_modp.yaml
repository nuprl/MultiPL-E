name: HumanEval_49_modp
language: go_test.go
prompt: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
  \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n"
tests: "func TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
  \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
  \    { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101),\
  \ expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual:\
  \ candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101), expected:\
  \ 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31,\
  \ 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n   \
    \     return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1,\
    \ p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n \
    \       return 2\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    r := 1\n    for i\
    \ := 0; i < n; i++ {\n        r = (r * 2) % p\n    }\n    return r\n}\n", "  \
    \  if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n \
    \   }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n \
    \   }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n%2 == 0 {\n    \
    \    return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p)\
    \ % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n    \
    \    return 2\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n < 0 {\n    \
    \    panic(\"negative exponent\")\n    }\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2 == 0 {\n      \
    \  return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p)\
    \ % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n    \
    \    return 2\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2\
    \ == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2\
    \ * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return\
    \ 2 * modp(n-1, p) % p\n}\n", "    var r int = 1\n    for i := 0; i < n; i++ {\n\
    \        r = (2 * r) % p\n    }\n    return r\n}\n", "    if n == 0 {\n      \
    \  return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2 ==\
    \ 0 {\n        return (modp(n/2, p) * modp(n/2, p)) % p\n    }\n    return (2\
    \ * modp(n-1, p)) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n == 1 {\n        return 2\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return modp(n-1, p) * 2 % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n\
    \    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n \
    \   }\n    if n == 1 {\n        return 2\n    }\n    if n%2 == 0 {\n        return\
    \ modp(n/2, p) * modp(n/2, p) % p\n    }\n    return modp(n-1, p) * 2 % p\n}\n",
  "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n\
    \    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n \
    \   }\n    if n == 1 {\n        return 2\n    }\n    if n % 2 == 0 {\n       \
    \ return (modp(n/2, p) * modp(n/2, p)) % p\n    }\n    return (2 * modp(n-1, p))\
    \ % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n    \
    \    return 2\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2\
    \ == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2\
    \ * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n == 1 {\n        return 2\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n\
    \    if n % 2 == 0 {\n        return (modp(n/2, p) * modp(n/2, p)) % p\n    }\n\
    \    return (2 * modp(n/2, p) * modp(n/2, p)) % p\n}\n", "    if n == 0 {\n  \
    \      return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2\
    \ == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2\
    \ * modp(n-1, p) % p\n}\n", "    var result int = 1\n    for i := 0; i < n; i++\
    \ {\n        result = (result * 2) % p\n    }\n    return result\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n\
    \    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n \
    \   }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n \
    \   }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) %\
    \ p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    var r int\n    r = 1\n\
    \    for i := 0; i < n; i++ {\n        r = (r * 2) % p\n    }\n    return r\n\
    }\n", "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return\
    \ 2\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) %\
    \ p\n    }\n    return modp(n-1, p) * 2 % p\n}\n", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2 == 0 {\n  \
    \      return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1,\
    \ p) % p\n}\n", "    var r int = 1\n    for i := 0; i < n; i++ {\n        r =\
    \ (2 * r) % p\n    }\n    return r\n}\n", "    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2 == 0 {\n      \
    \  return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p)\
    \ % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n    \
    \    return 2\n    }\n    if n % 2 == 0 {\n        return (modp(n/2, p) * modp(n/2,\
    \ p)) % p\n    }\n    return (2 * modp(n-1, p)) % p\n}\n", "    if n == 0 {\n\
    \        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2\
    \ == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2\
    \ * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n == 1 {\n        return 2\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n\
    \    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n \
    \   }\n    if n == 1 {\n        return 2\n    }\n    if n % 2 == 0 {\n       \
    \ return (modp(n/2, p) * modp(n/2, p)) % p\n    }\n    return (2 * modp(n-1, p))\
    \ % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1,\
    \ p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n \
    \       return 2\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2\
    \ == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2\
    \ * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n == 1 {\n        return 2\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n\
    \    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n \
    \   }\n    if n%2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n   \
    \ }\n    return modp(n-1, p) * 2 % p\n}\n", "    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2 == 0 {\n      \
    \  return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p)\
    \ % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1,\
    \ p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1,\
    \ p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n \
    \       return 2\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2\
    \ == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2\
    \ * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return\
    \ 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n == 1 {\n        return 2\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return modp(n-1, p) * 2 % p\n}\n", "    r\
    \ := 1\n    for i := 0; i < n; i++ {\n        r = (r * 2) % p\n    }\n    return\
    \ r\n}\n", "    if n == 0 {\n        return 1\n    } else if n == 1 {\n      \
    \  return 2\n    } else if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    } else {\n        return 2 * modp(n-1, p) % p\n    }\n}\n", "  \
    \  if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    r\
    \ := 1\n    for i := 0; i < n; i++ {\n        r = (r * 2) % p\n    }\n    return\
    \ r\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n  \
    \      return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1,\
    \ p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n \
    \       return 2\n    }\n    if n % 2 == 0 {\n        return (modp(n/2, p) * modp(n/2,\
    \ p)) % p\n    }\n    return (2 * modp(n-1, p)) % p\n}\n", "    if n == 0 {\n\
    \        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n %\
    \ 2 == 0 {\n        return (modp(n/2, p) * modp(n/2, p)) % p\n    }\n    return\
    \ (2 * modp(n-1, p)) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n  \
    \  if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n  \
    \  return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n   \
    \ }\n    if n == 1 {\n        return 2\n    }\n    if n % 2 == 0 {\n        return\
    \ modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n",
  "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n \
    \   }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n \
    \   }\n    return modp(n-1, p) * 2 % p\n}\n", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2 == 0 {\n  \
    \      return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1,\
    \ p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1,\
    \ p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1,\
    \ p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1,\
    \ p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n \
    \       return 2\n    }\n    if n%2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n < 0 {\n    \
    \    return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1\
    \ {\n        return 2\n    }\n    if n%2 == 0 {\n        return (modp(n/2, p)\
    \ * modp(n/2, p)) % p\n    }\n    return (2 * modp(n-1, p)) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n\
    \    return modp(n-1, p) * 2 % p\n}\n", "    if n == 0 {\n        return 1\n \
    \   }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n \
    \   }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) %\
    \ p\n    }\n    return modp(n-1, p) * 2 % p\n}\n", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2 == 0 {\n  \
    \      return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1,\
    \ p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return modp(n-1, p)\
    \ * 2 % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n\
    \        return 2\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2\
    \ == 0 {\n        return (modp(n/2, p) * modp(n/2, p)) % p\n    }\n    return\
    \ (2 * modp(n-1, p)) % p\n}\n", "    if n < 0 {\n        return modp(-n, p)\n\
    \    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return\
    \ 2\n    }\n    if n%2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n\
    \    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) %\
    \ p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) %\
    \ p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2 == 0 {\n  \
    \      return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1,\
    \ p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n \
    \       return 2\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return modp(n-1, p) * 2 % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return modp(n-1, p) * 2 % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2\
    \ == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2\
    \ * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return\
    \ 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return\
    \ 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n == 1 {\n        return 2\n    }\n    if n % 2 == 0 {\n        return (modp(n/2,\
    \ p) * modp(n/2, p)) % p\n    }\n    return (2 * modp(n-1, p)) % p\n}\n", "  \
    \  if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n\
    \    return 2 * modp(n-1, p) % p\n}\n", "    r := 1\n    for i := 0; i < n; i++\
    \ {\n        r = (r * 2) % p\n    }\n    return r\n}\n", "    if n == 0 {\n  \
    \      return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2\
    \ == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2\
    \ * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n    } else if\
    \ n == 1 {\n        return 2\n    } else if n % 2 == 0 {\n        return (modp(n/2,\
    \ p) * modp(n/2, p)) % p\n    } else {\n        return (2 * modp(n/2, p) * modp(n/2,\
    \ p)) % p\n    }\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n %\
    \ 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return\
    \ 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return\
    \ 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return\
    \ 2 * modp(n-1, p) % p\n}\n", "    var r int\n    r = 1\n    for i := 0; i < n;\
    \ i++ {\n        r = (r * 2) % p\n    }\n    return r\n}\n", "    if n == 0 {\n\
    \        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n %\
    \ 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return\
    \ modp(n-1, p) * 2 % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n == 1 {\n        return 2\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n\
    \    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n \
    \   }\n    if n == 1 {\n        return 2\n    }\n    if n%2 == 0 {\n        return\
    \ modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n",
  "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n\
    \    return modp(n-1, p) * 2 % p\n}\n", "    var r int = 1\n    for i := 0; i\
    \ < n; i++ {\n        r = (2 * r) % p\n    }\n    return r\n}\n", "    var result\
    \ int = 1\n    for i := 0; i < n; i++ {\n        result = (result * 2) % p\n \
    \   }\n    return result\n}\n", "    if n == 0 {\n        return 1\n    }\n  \
    \  if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n  \
    \  return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n   \
    \ }\n    if n == 1 {\n        return 2\n    }\n    if n % 2 == 0 {\n        return\
    \ modp(n/2, p) * modp(n/2, p) % p\n    }\n    return modp(n-1, p) * 2 % p\n}\n",
  "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n \
    \   }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n \
    \   }\n    return modp(n-1, p) * 2 % p\n}\n", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) %\
    \ p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2 == 0 {\n  \
    \      return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1,\
    \ p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n \
    \       return 2\n    }\n    if n % 2 == 0 {\n        return (modp(n/2, p) * modp(n/2,\
    \ p)) % p\n    }\n    return (2 * modp(n-1, p)) % p\n}\n", "    if n == 0 {\n\
    \        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2\
    \ == 0 {\n        return (modp(n/2, p) * modp(n/2, p)) % p\n    }\n    return\
    \ (2 * modp(n-1, p)) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n  \
    \  if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n  \
    \  return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n   \
    \ }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n   \
    \ }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n\
    \    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n\
    \    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2 == 0 {\n  \
    \      return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1,\
    \ p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1,\
    \ p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1,\
    \ p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1,\
    \ p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n \
    \       return 2\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2\
    \ == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return modp(n-1,\
    \ p) * 2 % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n % 2 ==\
    \ 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1,\
    \ p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n \
    \       return 2\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return modp(n-1, p) * 2 % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2\
    \ == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return modp(n-1,\
    \ p) * 2 % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n % 2 ==\
    \ 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1,\
    \ p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n \
    \       return 2\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2\
    \ == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2\
    \ * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return\
    \ modp(n-1, p) * 2 % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return\
    \ 2 * modp(n-1, p) % p\n}\n", "    var result int = 1\n    for i := 0; i < n;\
    \ i++ {\n        result = (result * 2) % p\n    }\n    return result\n}\n", " \
    \   if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n\
    \    }\n    if n % 2 == 0 {\n        return (modp(n/2, p) * modp(n/2, p)) % p\n\
    \    }\n    return (2 * modp(n-1, p)) % p\n}\n", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) %\
    \ p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return\
    \ 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2 == 0 {\n  \
    \      return (modp(n/2, p) * modp(n/2, p)) % p\n    }\n    return (2 * modp(n/2,\
    \ p) * modp(n/2, p)) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n  \
    \  if n == 1 {\n        return 2\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n\
    \    return modp(n-1, p) * 2 % p\n}\n", "    var r int = 1\n    for i := 0; i\
    \ < n; i++ {\n        r = (2 * r) % p\n    }\n    return r\n}\n", "    var r int\n\
    \    r = 1\n    for i := 0; i < n; i++ {\n        r = (r * 2) % p\n    }\n   \
    \ return r\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n\
    \        return 2\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2\
    \ == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return modp(n-1,\
    \ p) * 2 % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n % 2 ==\
    \ 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1,\
    \ p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1,\
    \ p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1,\
    \ p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n \
    \       return 2\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2\
    \ == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2\
    \ * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n == 1 {\n        return 2\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n\
    \    if n % 2 == 0 {\n        return (modp(n/2, p) * modp(n/2, p)) % p\n    }\n\
    \    return (2 * modp(n-1, p)) % p\n}\n", "    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2 == 0 {\n      \
    \  return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p)\
    \ % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1,\
    \ p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1,\
    \ p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n \
    \       return 2\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return modp(n-1, p) * 2 % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2\
    \ == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return modp(n-1,\
    \ p) * 2 % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n % 2 ==\
    \ 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1,\
    \ p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1,\
    \ p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n \
    \       return 2\n    }\n    if n % 2 == 0 {\n        return (modp(n/2, p) * modp(n/2,\
    \ p)) % p\n    }\n    return (2 * modp(n-1, p)) % p\n}\n", "    if n == 0 {\n\
    \        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n %\
    \ 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return\
    \ 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return\
    \ 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return\
    \ 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return\
    \ 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return\
    \ 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return\
    \ 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if\
    \ n == 1 {\n        return 2\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n\
    \    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n \
    \   }\n    if n == 1 {\n        return 2\n    }\n    if n % 2 == 0 {\n       \
    \ return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return modp(n-1, p) * 2 %\
    \ p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n  \
    \      return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1,\
    \ p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n \
    \       return 2\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n % 2\
    \ == 0 {\n        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2\
    \ * modp(n-1, p) % p\n}\n", "    if n == 0 {\n        return 1\n    } else if\
    \ n == 1 {\n        return 2\n    } else if n % 2 == 0 {\n        return modp(n/2,\
    \ p) * modp(n/2, p) % p\n    } else {\n        return 2 * modp(n-1, p) % p\n \
    \   }\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return 2 * modp(n-1,\
    \ p) % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n % 2 == 0 {\n\
    \        return modp(n/2, p) * modp(n/2, p) % p\n    }\n    return modp(n-1, p)\
    \ * 2 % p\n}\n", "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n\
    \        return 2\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return modp(n-1, p) * 2 % p\n}\n", "    if n == 0 {\n   \
    \     return 1\n    }\n    if n % 2 == 0 {\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p\n    }\n    return 2 * modp(n-1, p) % p\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
